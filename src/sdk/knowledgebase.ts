/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { knowledgeBaseCreateArticle } from "../funcs/knowledgeBaseCreateArticle.js";
import { knowledgeBaseDeleteArticle } from "../funcs/knowledgeBaseDeleteArticle.js";
import { knowledgeBaseGetArticle } from "../funcs/knowledgeBaseGetArticle.js";
import { knowledgeBaseGetPublicArticles } from "../funcs/knowledgeBaseGetPublicArticles.js";
import { knowledgeBaseListArticles } from "../funcs/knowledgeBaseListArticles.js";
import { knowledgeBaseSearchPublicArticles } from "../funcs/knowledgeBaseSearchPublicArticles.js";
import { knowledgeBaseUpdateArticle } from "../funcs/knowledgeBaseUpdateArticle.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class KnowledgeBase extends ClientSDK {
  async listArticles(
    request: operations.ListArticlesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecArticleResponse> {
    return unwrapAsync(knowledgeBaseListArticles(
      this,
      request,
      options,
    ));
  }

  async createArticle(
    request: operations.CreateArticleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseArticleResponse> {
    return unwrapAsync(knowledgeBaseCreateArticle(
      this,
      request,
      options,
    ));
  }

  async getArticle(
    request: operations.GetArticleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseArticleResponse> {
    return unwrapAsync(knowledgeBaseGetArticle(
      this,
      request,
      options,
    ));
  }

  async updateArticle(
    request: operations.UpdateArticleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseArticleResponse> {
    return unwrapAsync(knowledgeBaseUpdateArticle(
      this,
      request,
      options,
    ));
  }

  async deleteArticle(
    request: operations.DeleteArticleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(knowledgeBaseDeleteArticle(
      this,
      request,
      options,
    ));
  }

  async getPublicArticles(
    request: operations.GetPublicArticlesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecArticleResponse> {
    return unwrapAsync(knowledgeBaseGetPublicArticles(
      this,
      request,
      options,
    ));
  }

  async searchPublicArticles(
    request: operations.SearchPublicArticlesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecArticleResponse> {
    return unwrapAsync(knowledgeBaseSearchPublicArticles(
      this,
      request,
      options,
    ));
  }
}
