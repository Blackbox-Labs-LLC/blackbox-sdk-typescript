/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsAcceptInvitation } from "../funcs/organizationsAcceptInvitation.js";
import { organizationsAssignRole } from "../funcs/organizationsAssignRole.js";
import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsCreateRole } from "../funcs/organizationsCreateRole.js";
import { organizationsDeleteRole } from "../funcs/organizationsDeleteRole.js";
import { organizationsDeleteSetting } from "../funcs/organizationsDeleteSetting.js";
import { organizationsFindOrganizationsByEmailDomain } from "../funcs/organizationsFindOrganizationsByEmailDomain.js";
import { organizationsGet } from "../funcs/organizationsGet.js";
import { organizationsGetAllForUser } from "../funcs/organizationsGetAllForUser.js";
import { organizationsGetEffectivePermissions } from "../funcs/organizationsGetEffectivePermissions.js";
import { organizationsGetMembers } from "../funcs/organizationsGetMembers.js";
import { organizationsGetPermissionsCatalog } from "../funcs/organizationsGetPermissionsCatalog.js";
import { organizationsGetRole } from "../funcs/organizationsGetRole.js";
import { organizationsGetSetting } from "../funcs/organizationsGetSetting.js";
import { organizationsGetSettings } from "../funcs/organizationsGetSettings.js";
import { organizationsInviteUser } from "../funcs/organizationsInviteUser.js";
import { organizationsJoinOrganization } from "../funcs/organizationsJoinOrganization.js";
import { organizationsListRoles } from "../funcs/organizationsListRoles.js";
import { organizationsRemoveMember } from "../funcs/organizationsRemoveMember.js";
import { organizationsRevokeRole } from "../funcs/organizationsRevokeRole.js";
import { organizationsSetSetting } from "../funcs/organizationsSetSetting.js";
import { organizationsUpdateMembership } from "../funcs/organizationsUpdateMembership.js";
import { organizationsUpdateRole } from "../funcs/organizationsUpdateRole.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Organizations extends ClientSDK {
  async getAllForUser(
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecOrganizationResponse> {
    return unwrapAsync(organizationsGetAllForUser(
      this,
      options,
    ));
  }

  async create(
    request: models.CreateOrganizationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOrganizationResponse> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  async findOrganizationsByEmailDomain(
    request: operations.FindOrganizationsByEmailDomainRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecOrganizationByDomainResponse> {
    return unwrapAsync(organizationsFindOrganizationsByEmailDomain(
      this,
      request,
      options,
    ));
  }

  async joinOrganization(
    request: models.JoinOrganizationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsJoinOrganization(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.GetOrganizationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOrganizationResponse> {
    return unwrapAsync(organizationsGet(
      this,
      request,
      options,
    ));
  }

  async acceptInvitation(
    request: operations.AcceptInvitationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsAcceptInvitation(
      this,
      request,
      options,
    ));
  }

  async inviteUser(
    request: operations.InviteUserRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsInviteUser(
      this,
      request,
      options,
    ));
  }

  async getMembers(
    request: operations.GetMembersRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecMembershipResponse> {
    return unwrapAsync(organizationsGetMembers(
      this,
      request,
      options,
    ));
  }

  async updateMembership(
    request: operations.UpdateMembershipRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsUpdateMembership(
      this,
      request,
      options,
    ));
  }

  async removeMember(
    request: operations.RemoveMemberRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsRemoveMember(
      this,
      request,
      options,
    ));
  }

  async getEffectivePermissions(
    request: operations.GetEffectivePermissionsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseEffectivePermissionsResponse> {
    return unwrapAsync(organizationsGetEffectivePermissions(
      this,
      request,
      options,
    ));
  }

  async listRoles(
    request: operations.ListRolesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecRoleResponse> {
    return unwrapAsync(organizationsListRoles(
      this,
      request,
      options,
    ));
  }

  async createRole(
    request: operations.CreateRoleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseRoleResponse> {
    return unwrapAsync(organizationsCreateRole(
      this,
      request,
      options,
    ));
  }

  async getRole(
    request: operations.GetRoleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseRoleResponse> {
    return unwrapAsync(organizationsGetRole(
      this,
      request,
      options,
    ));
  }

  async updateRole(
    request: operations.UpdateRoleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseRoleResponse> {
    return unwrapAsync(organizationsUpdateRole(
      this,
      request,
      options,
    ));
  }

  async deleteRole(
    request: operations.DeleteRoleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsDeleteRole(
      this,
      request,
      options,
    ));
  }

  async assignRole(
    request: operations.AssignRoleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsAssignRole(
      this,
      request,
      options,
    ));
  }

  async revokeRole(
    request: operations.RevokeRoleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsRevokeRole(
      this,
      request,
      options,
    ));
  }

  async getSettings(
    request: operations.GetAllOrganizationSettingsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecOrganizationSettingResponse> {
    return unwrapAsync(organizationsGetSettings(
      this,
      request,
      options,
    ));
  }

  async setSetting(
    request: operations.SetOrganizationSettingRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOrganizationSettingResponse> {
    return unwrapAsync(organizationsSetSetting(
      this,
      request,
      options,
    ));
  }

  async getSetting(
    request: operations.GetOrganizationSettingRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOptionOrganizationSettingResponse> {
    return unwrapAsync(organizationsGetSetting(
      this,
      request,
      options,
    ));
  }

  async deleteSetting(
    request: operations.DeleteOrganizationSettingRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsDeleteSetting(
      this,
      request,
      options,
    ));
  }

  async getPermissionsCatalog(
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecPermissionCatalogEntry> {
    return unwrapAsync(organizationsGetPermissionsCatalog(
      this,
      options,
    ));
  }
}
