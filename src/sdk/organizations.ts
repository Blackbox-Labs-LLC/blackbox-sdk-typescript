/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsAcceptInvitation } from "../funcs/organizationsAcceptInvitation.js";
import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsDeleteSetting } from "../funcs/organizationsDeleteSetting.js";
import { organizationsGet } from "../funcs/organizationsGet.js";
import { organizationsGetAllForUser } from "../funcs/organizationsGetAllForUser.js";
import { organizationsGetMembers } from "../funcs/organizationsGetMembers.js";
import { organizationsGetSetting } from "../funcs/organizationsGetSetting.js";
import { organizationsGetSettings } from "../funcs/organizationsGetSettings.js";
import { organizationsInviteUser } from "../funcs/organizationsInviteUser.js";
import { organizationsRemoveMember } from "../funcs/organizationsRemoveMember.js";
import { organizationsSetSetting } from "../funcs/organizationsSetSetting.js";
import { organizationsUpdateMembership } from "../funcs/organizationsUpdateMembership.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Organizations extends ClientSDK {
  async getAllForUser(
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecOrganizationResponse> {
    return unwrapAsync(organizationsGetAllForUser(
      this,
      options,
    ));
  }

  /**
   * Create a new support ticket
   *
   * @remarks
   * Creates a new support ticket in the specified organization. The ticket will be assigned to the authenticated user as the creator and can optionally be assigned to another team member.
   */
  async create(
    request: models.CreateOrganizationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOrganizationResponse> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get ticket details
   *
   * @remarks
   * Retrieves detailed information about a specific ticket including its current status, assignment, tags, and metadata.
   */
  async get(
    request: operations.GetOrganizationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOrganizationResponse> {
    return unwrapAsync(organizationsGet(
      this,
      request,
      options,
    ));
  }

  async acceptInvitation(
    request: operations.AcceptInvitationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsAcceptInvitation(
      this,
      request,
      options,
    ));
  }

  async inviteUser(
    request: operations.InviteUserRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsInviteUser(
      this,
      request,
      options,
    ));
  }

  async getMembers(
    request: operations.GetMembersRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecMembershipResponse> {
    return unwrapAsync(organizationsGetMembers(
      this,
      request,
      options,
    ));
  }

  async updateMembership(
    request: operations.UpdateMembershipRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsUpdateMembership(
      this,
      request,
      options,
    ));
  }

  async removeMember(
    request: operations.RemoveMemberRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(organizationsRemoveMember(
      this,
      request,
      options,
    ));
  }

  async getSettings(
    request: operations.GetAllOrganizationSettingsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecOrganizationSettingResponse> {
    return unwrapAsync(organizationsGetSettings(
      this,
      request,
      options,
    ));
  }

  async setSetting(
    request: operations.SetOrganizationSettingRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOrganizationSettingResponse> {
    return unwrapAsync(organizationsSetSetting(
      this,
      request,
      options,
    ));
  }

  async getSetting(
    request: operations.GetOrganizationSettingRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOptionOrganizationSettingResponse> {
    return unwrapAsync(organizationsGetSetting(
      this,
      request,
      options,
    ));
  }

  async deleteSetting(
    request: operations.DeleteOrganizationSettingRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsDeleteSetting(
      this,
      request,
      options,
    ));
  }
}
