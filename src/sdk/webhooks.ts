/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksDelete } from "../funcs/webhooksDelete.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksGetStats } from "../funcs/webhooksGetStats.js";
import { webhooksList } from "../funcs/webhooksList.js";
import { webhooksListEvents } from "../funcs/webhooksListEvents.js";
import { webhooksSend } from "../funcs/webhooksSend.js";
import { webhooksTest } from "../funcs/webhooksTest.js";
import { webhooksUpdate } from "../funcs/webhooksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhooks extends ClientSDK {
  /**
   * List tickets with filtering
   *
   * @remarks
   * Retrieves a paginated list of tickets with optional filtering by status, priority, assignment, creator, and tags. Results are ordered by creation date (newest first).
   */
  async list(
    request: operations.ListWebhooksRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecWebhookResponse> {
    return unwrapAsync(webhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a tag
   *
   * @remarks
   * Requires permission: MANAGE_TAGS
   */
  async create(
    request: operations.CreateWebhookRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseWebhookResponse> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  async listEvents(
    request: operations.ListWebhookEventsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecString> {
    return unwrapAsync(webhooksListEvents(
      this,
      request,
      options,
    ));
  }

  async send(
    request: operations.SendWebhooksRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecWebhookDelivery> {
    return unwrapAsync(webhooksSend(
      this,
      request,
      options,
    ));
  }

  async getStats(
    request: operations.GetWebhookStatsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseWebhookStats> {
    return unwrapAsync(webhooksGetStats(
      this,
      request,
      options,
    ));
  }

  /**
   * Get ticket details
   *
   * @remarks
   * Retrieves detailed information about a specific ticket including its current status, assignment, tags, and metadata.
   */
  async get(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseWebhookResponse> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a tag
   *
   * @remarks
   * Requires permission: MANAGE_TAGS
   */
  async update(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseWebhookResponse> {
    return unwrapAsync(webhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a tag
   *
   * @remarks
   * Requires permission: MANAGE_TAGS
   */
  async delete(
    request: operations.DeleteWebhookRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDelete(
      this,
      request,
      options,
    ));
  }

  async test(
    request: operations.TestWebhookRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseWebhookTestResult> {
    return unwrapAsync(webhooksTest(
      this,
      request,
      options,
    ));
  }
}
