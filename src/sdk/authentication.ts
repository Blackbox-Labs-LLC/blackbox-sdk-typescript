/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authenticationDisable2fa } from "../funcs/authenticationDisable2fa.js";
import { authenticationEnable2fa } from "../funcs/authenticationEnable2fa.js";
import { authenticationLogin } from "../funcs/authenticationLogin.js";
import { authenticationLogout } from "../funcs/authenticationLogout.js";
import { authenticationRegister } from "../funcs/authenticationRegister.js";
import { authenticationRequestPasswordReset } from "../funcs/authenticationRequestPasswordReset.js";
import { authenticationResendVerification } from "../funcs/authenticationResendVerification.js";
import { authenticationResetPassword } from "../funcs/authenticationResetPassword.js";
import { authenticationSetup2fa } from "../funcs/authenticationSetup2fa.js";
import { authenticationVerifyEmail } from "../funcs/authenticationVerifyEmail.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Authentication extends ClientSDK {
  async disable2fa(
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(authenticationDisable2fa(
      this,
      options,
    ));
  }

  async enable2fa(
    request: models.Enable2FARequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(authenticationEnable2fa(
      this,
      request,
      options,
    ));
  }

  async login(
    request: models.LoginRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseAuthResponse> {
    return unwrapAsync(authenticationLogin(
      this,
      request,
      options,
    ));
  }

  async logout(
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(authenticationLogout(
      this,
      options,
    ));
  }

  async register(
    request: models.RegisterRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseRegisterResponse> {
    return unwrapAsync(authenticationRegister(
      this,
      request,
      options,
    ));
  }

  async requestPasswordReset(
    request: models.PasswordResetRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(authenticationRequestPasswordReset(
      this,
      request,
      options,
    ));
  }

  async resendVerification(
    request: models.ResendVerificationRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(authenticationResendVerification(
      this,
      request,
      options,
    ));
  }

  async resetPassword(
    request: models.ResetPasswordRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(authenticationResetPassword(
      this,
      request,
      options,
    ));
  }

  async setup2fa(
    options?: RequestOptions,
  ): Promise<models.ApiResponseSetup2FAResponse> {
    return unwrapAsync(authenticationSetup2fa(
      this,
      options,
    ));
  }

  async verifyEmail(
    request: models.VerifyEmailRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(authenticationVerifyEmail(
      this,
      request,
      options,
    ));
  }
}
