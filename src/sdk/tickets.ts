/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ticketsAddTags } from "../funcs/ticketsAddTags.js";
import { ticketsCreate } from "../funcs/ticketsCreate.js";
import { ticketsDelete } from "../funcs/ticketsDelete.js";
import { ticketsGet } from "../funcs/ticketsGet.js";
import { ticketsList } from "../funcs/ticketsList.js";
import { ticketsRemoveTags } from "../funcs/ticketsRemoveTags.js";
import { ticketsUpdate } from "../funcs/ticketsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tickets extends ClientSDK {
  /**
   * List tickets with filtering
   *
   * @remarks
   * Retrieves a paginated list of tickets with optional filtering by status, priority, assignment, creator, and tags. Results are ordered by creation date (newest first).
   */
  async list(
    request: operations.ListTicketsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecTicketResponse> {
    return unwrapAsync(ticketsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new support ticket
   *
   * @remarks
   * Creates a new support ticket in the specified organization. The ticket will be assigned to the authenticated user as the creator and can optionally be assigned to another team member.
   */
  async create(
    request: operations.CreateTicketRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseTicketResponse> {
    return unwrapAsync(ticketsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get ticket details
   *
   * @remarks
   * Retrieves detailed information about a specific ticket including its current status, assignment, tags, and metadata.
   */
  async get(
    request: operations.GetTicketRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseTicketResponse> {
    return unwrapAsync(ticketsGet(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.UpdateTicketRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseTicketResponse> {
    return unwrapAsync(ticketsUpdate(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.DeleteTicketRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketsDelete(
      this,
      request,
      options,
    ));
  }

  async addTags(
    request: operations.AddTagsToTicketRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketsAddTags(
      this,
      request,
      options,
    ));
  }

  async removeTags(
    request: operations.RemoveTagsFromTicketRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ticketsRemoveTags(
      this,
      request,
      options,
    ));
  }
}
