/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagesCount } from "../funcs/messagesCount.js";
import { messagesCreate } from "../funcs/messagesCreate.js";
import { messagesDelete } from "../funcs/messagesDelete.js";
import { messagesGet } from "../funcs/messagesGet.js";
import { messagesGetLatest } from "../funcs/messagesGetLatest.js";
import { messagesList } from "../funcs/messagesList.js";
import { messagesSearch } from "../funcs/messagesSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Messages extends ClientSDK {
  /**
   * Get ticket details
   *
   * @remarks
   * Retrieves detailed information about a specific ticket including its current status, assignment, tags, and metadata.
   */
  async get(
    request: operations.GetMessageRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseMessageResponse> {
    return unwrapAsync(messagesGet(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.DeleteMessageRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List tickets with filtering
   *
   * @remarks
   * Retrieves a paginated list of tickets with optional filtering by status, priority, assignment, creator, and tags. Results are ordered by creation date (newest first).
   */
  async list(
    request: operations.ListTicketMessagesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecMessageResponse> {
    return unwrapAsync(messagesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new support ticket
   *
   * @remarks
   * Creates a new support ticket in the specified organization. The ticket will be assigned to the authenticated user as the creator and can optionally be assigned to another team member.
   */
  async create(
    request: operations.CreateMessageRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseMessageResponse> {
    return unwrapAsync(messagesCreate(
      this,
      request,
      options,
    ));
  }

  async count(
    request: operations.GetMessageCountRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseU64> {
    return unwrapAsync(messagesCount(
      this,
      request,
      options,
    ));
  }

  async getLatest(
    request: operations.GetLatestMessageRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOptionMessageResponse> {
    return unwrapAsync(messagesGetLatest(
      this,
      request,
      options,
    ));
  }

  async search(
    request: operations.SearchMessagesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecMessageResponse> {
    return unwrapAsync(messagesSearch(
      this,
      request,
      options,
    ));
  }
}
