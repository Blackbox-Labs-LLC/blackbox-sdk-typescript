/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { analyticsGet } from "../funcs/analyticsGet.js";
import { analyticsGetAgents } from "../funcs/analyticsGetAgents.js";
import { analyticsGetKnowledgeBase } from "../funcs/analyticsGetKnowledgeBase.js";
import { analyticsGetMacros } from "../funcs/analyticsGetMacros.js";
import { analyticsGetSystem } from "../funcs/analyticsGetSystem.js";
import { analyticsGetTickets } from "../funcs/analyticsGetTickets.js";
import { analyticsGetTrends } from "../funcs/analyticsGetTrends.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Analytics extends ClientSDK {
  async get(
    request: operations.GetOrganizationAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseOrganizationAnalytics> {
    return unwrapAsync(analyticsGet(
      this,
      request,
      options,
    ));
  }

  async getAgents(
    request: operations.GetAgentAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseAgentAnalytics> {
    return unwrapAsync(analyticsGetAgents(
      this,
      request,
      options,
    ));
  }

  async getKnowledgeBase(
    request: operations.GetKnowledgeBaseAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseKnowledgeBaseStats> {
    return unwrapAsync(analyticsGetKnowledgeBase(
      this,
      request,
      options,
    ));
  }

  async getMacros(
    request: operations.GetMacroAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseMacroUsageStats> {
    return unwrapAsync(analyticsGetMacros(
      this,
      request,
      options,
    ));
  }

  async getSystem(
    request: operations.GetSystemAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseSystemUsage> {
    return unwrapAsync(analyticsGetSystem(
      this,
      request,
      options,
    ));
  }

  async getTickets(
    request: operations.GetTicketAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseTicketAnalytics> {
    return unwrapAsync(analyticsGetTickets(
      this,
      request,
      options,
    ));
  }

  async getTrends(
    request: operations.GetTrendAnalyticsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseTimeSeriesData> {
    return unwrapAsync(analyticsGetTrends(
      this,
      request,
      options,
    ));
  }
}
