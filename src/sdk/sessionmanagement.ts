/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sessionManagementCleanupExpiredSessions } from "../funcs/sessionManagementCleanupExpiredSessions.js";
import { sessionManagementExtendSession } from "../funcs/sessionManagementExtendSession.js";
import { sessionManagementGetSession } from "../funcs/sessionManagementGetSession.js";
import { sessionManagementGetSessionStats } from "../funcs/sessionManagementGetSessionStats.js";
import { sessionManagementListSessions } from "../funcs/sessionManagementListSessions.js";
import { sessionManagementRevokeAllSessions } from "../funcs/sessionManagementRevokeAllSessions.js";
import { sessionManagementRevokeSession } from "../funcs/sessionManagementRevokeSession.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SessionManagement extends ClientSDK {
  async listSessions(
    options?: RequestOptions,
  ): Promise<models.ApiResponseSessionListResponse> {
    return unwrapAsync(sessionManagementListSessions(
      this,
      options,
    ));
  }

  async cleanupExpiredSessions(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(sessionManagementCleanupExpiredSessions(
      this,
      options,
    ));
  }

  async revokeAllSessions(
    request: models.RevokeAllSessionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(sessionManagementRevokeAllSessions(
      this,
      request,
      options,
    ));
  }

  async getSessionStats(
    options?: RequestOptions,
  ): Promise<models.ApiResponseSessionStats> {
    return unwrapAsync(sessionManagementGetSessionStats(
      this,
      options,
    ));
  }

  async getSession(
    request: operations.GetSessionRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseSessionInfo> {
    return unwrapAsync(sessionManagementGetSession(
      this,
      request,
      options,
    ));
  }

  async revokeSession(
    request: operations.RevokeSessionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(sessionManagementRevokeSession(
      this,
      request,
      options,
    ));
  }

  async extendSession(
    request: operations.ExtendSessionRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseSessionInfo> {
    return unwrapAsync(sessionManagementExtendSession(
      this,
      request,
      options,
    ));
  }
}
