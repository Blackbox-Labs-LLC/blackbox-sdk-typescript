/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apiKeysCreate } from "../funcs/apiKeysCreate.js";
import { apiKeysDelete } from "../funcs/apiKeysDelete.js";
import { apiKeysGet } from "../funcs/apiKeysGet.js";
import { apiKeysList } from "../funcs/apiKeysList.js";
import { apiKeysRevoke } from "../funcs/apiKeysRevoke.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ApiKeys extends ClientSDK {
  /**
   * List tickets with filtering
   *
   * @remarks
   * Retrieves a paginated list of tickets with optional filtering by status, priority, assignment, creator, and tags. Results are ordered by creation date (newest first).
   */
  async list(
    request?: operations.ListApiKeysRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecApiKeyResponse> {
    return unwrapAsync(apiKeysList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a tag
   *
   * @remarks
   * Requires permission: MANAGE_TAGS
   */
  async create(
    request: models.CreateApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseCreateApiKeyResponse> {
    return unwrapAsync(apiKeysCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get ticket details
   *
   * @remarks
   * Retrieves detailed information about a specific ticket including its current status, assignment, tags, and metadata.
   */
  async get(
    request: operations.GetApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseApiKeyResponse> {
    return unwrapAsync(apiKeysGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a tag
   *
   * @remarks
   * Requires permission: MANAGE_TAGS
   */
  async delete(
    request: operations.DeleteApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(apiKeysDelete(
      this,
      request,
      options,
    ));
  }

  async revoke(
    request: operations.RevokeApiKeyRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(apiKeysRevoke(
      this,
      request,
      options,
    ));
  }
}
