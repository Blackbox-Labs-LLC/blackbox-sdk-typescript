/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { automationCreate } from "../funcs/automationCreate.js";
import { automationDeleteRule } from "../funcs/automationDeleteRule.js";
import { automationExecute } from "../funcs/automationExecute.js";
import { automationGet } from "../funcs/automationGet.js";
import { automationGetStats } from "../funcs/automationGetStats.js";
import { automationList } from "../funcs/automationList.js";
import { automationUpdate } from "../funcs/automationUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Automation extends ClientSDK {
  async execute(
    request: operations.ExecuteAutomationRulesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecAutomationExecution> {
    return unwrapAsync(automationExecute(
      this,
      request,
      options,
    ));
  }

  async list(
    request: operations.ListAutomationRulesRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecAutomationRuleResponse> {
    return unwrapAsync(automationList(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.CreateAutomationRuleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseAutomationRuleResponse> {
    return unwrapAsync(automationCreate(
      this,
      request,
      options,
    ));
  }

  async get(
    request: operations.GetAutomationRuleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseAutomationRuleResponse> {
    return unwrapAsync(automationGet(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.UpdateAutomationRuleRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseAutomationRuleResponse> {
    return unwrapAsync(automationUpdate(
      this,
      request,
      options,
    ));
  }

  async deleteRule(
    request: operations.DeleteAutomationRuleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(automationDeleteRule(
      this,
      request,
      options,
    ));
  }

  async getStats(
    request: operations.GetAutomationStatsRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseAutomationStats> {
    return unwrapAsync(automationGetStats(
      this,
      request,
      options,
    ));
  }
}
