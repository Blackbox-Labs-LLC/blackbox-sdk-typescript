/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersChangePassword } from "../funcs/usersChangePassword.js";
import { usersDeleteAccount } from "../funcs/usersDeleteAccount.js";
import { usersGetLoginAttempts } from "../funcs/usersGetLoginAttempts.js";
import { usersGetLoginHistory } from "../funcs/usersGetLoginHistory.js";
import { usersGetProfile } from "../funcs/usersGetProfile.js";
import { usersUpdateProfile } from "../funcs/usersUpdateProfile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Users extends ClientSDK {
  async deleteAccount(
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(usersDeleteAccount(
      this,
      options,
    ));
  }

  async getLoginAttempts(
    request?: operations.GetLoginAttemptsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecLoginAttemptResponse> {
    return unwrapAsync(usersGetLoginAttempts(
      this,
      request,
      options,
    ));
  }

  async getLoginHistory(
    request?: operations.GetLoginHistoryRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.ApiResponseVecLoginHistoryResponse> {
    return unwrapAsync(usersGetLoginHistory(
      this,
      request,
      options,
    ));
  }

  async changePassword(
    request: models.ChangePasswordRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseString> {
    return unwrapAsync(usersChangePassword(
      this,
      request,
      options,
    ));
  }

  async getProfile(
    options?: RequestOptions,
  ): Promise<models.ApiResponseUserProfileResponse> {
    return unwrapAsync(usersGetProfile(
      this,
      options,
    ));
  }

  async updateProfile(
    request: models.UpdateProfileRequest,
    options?: RequestOptions,
  ): Promise<models.ApiResponseUserProfileResponse> {
    return unwrapAsync(usersUpdateProfile(
      this,
      request,
      options,
    ));
  }
}
