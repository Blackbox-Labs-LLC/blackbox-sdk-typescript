/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ChangePasswordRequest = {
  currentPassword: string;
  newPassword: string;
};

/** @internal */
export const ChangePasswordRequest$inboundSchema: z.ZodType<
  ChangePasswordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_password: z.string(),
  new_password: z.string(),
}).transform((v) => {
  return remap$(v, {
    "current_password": "currentPassword",
    "new_password": "newPassword",
  });
});

/** @internal */
export type ChangePasswordRequest$Outbound = {
  current_password: string;
  new_password: string;
};

/** @internal */
export const ChangePasswordRequest$outboundSchema: z.ZodType<
  ChangePasswordRequest$Outbound,
  z.ZodTypeDef,
  ChangePasswordRequest
> = z.object({
  currentPassword: z.string(),
  newPassword: z.string(),
}).transform((v) => {
  return remap$(v, {
    currentPassword: "current_password",
    newPassword: "new_password",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangePasswordRequest$ {
  /** @deprecated use `ChangePasswordRequest$inboundSchema` instead. */
  export const inboundSchema = ChangePasswordRequest$inboundSchema;
  /** @deprecated use `ChangePasswordRequest$outboundSchema` instead. */
  export const outboundSchema = ChangePasswordRequest$outboundSchema;
  /** @deprecated use `ChangePasswordRequest$Outbound` instead. */
  export type Outbound = ChangePasswordRequest$Outbound;
}

export function changePasswordRequestToJSON(
  changePasswordRequest: ChangePasswordRequest,
): string {
  return JSON.stringify(
    ChangePasswordRequest$outboundSchema.parse(changePasswordRequest),
  );
}

export function changePasswordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChangePasswordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChangePasswordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChangePasswordRequest' from JSON`,
  );
}
