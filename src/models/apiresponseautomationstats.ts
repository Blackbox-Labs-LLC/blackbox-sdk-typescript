/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RuleActivity,
  RuleActivity$inboundSchema,
  RuleActivity$Outbound,
  RuleActivity$outboundSchema,
} from "./ruleactivity.js";
import {
  TriggerCount,
  TriggerCount$inboundSchema,
  TriggerCount$Outbound,
  TriggerCount$outboundSchema,
} from "./triggercount.js";

export type ApiResponseAutomationStatsData = {
  disabledRules: number;
  enabledRules: number;
  executionsThisWeek: number;
  executionsToday: number;
  mostActiveRules: Array<RuleActivity>;
  totalRules: number;
  triggerDistribution: Array<TriggerCount>;
};

export type ApiResponseAutomationStats = {
  data?: ApiResponseAutomationStatsData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAutomationStatsData$inboundSchema: z.ZodType<
  ApiResponseAutomationStatsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  disabled_rules: z.number().int(),
  enabled_rules: z.number().int(),
  executions_this_week: z.number().int(),
  executions_today: z.number().int(),
  most_active_rules: z.array(RuleActivity$inboundSchema),
  total_rules: z.number().int(),
  trigger_distribution: z.array(TriggerCount$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "disabled_rules": "disabledRules",
    "enabled_rules": "enabledRules",
    "executions_this_week": "executionsThisWeek",
    "executions_today": "executionsToday",
    "most_active_rules": "mostActiveRules",
    "total_rules": "totalRules",
    "trigger_distribution": "triggerDistribution",
  });
});

/** @internal */
export type ApiResponseAutomationStatsData$Outbound = {
  disabled_rules: number;
  enabled_rules: number;
  executions_this_week: number;
  executions_today: number;
  most_active_rules: Array<RuleActivity$Outbound>;
  total_rules: number;
  trigger_distribution: Array<TriggerCount$Outbound>;
};

/** @internal */
export const ApiResponseAutomationStatsData$outboundSchema: z.ZodType<
  ApiResponseAutomationStatsData$Outbound,
  z.ZodTypeDef,
  ApiResponseAutomationStatsData
> = z.object({
  disabledRules: z.number().int(),
  enabledRules: z.number().int(),
  executionsThisWeek: z.number().int(),
  executionsToday: z.number().int(),
  mostActiveRules: z.array(RuleActivity$outboundSchema),
  totalRules: z.number().int(),
  triggerDistribution: z.array(TriggerCount$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    disabledRules: "disabled_rules",
    enabledRules: "enabled_rules",
    executionsThisWeek: "executions_this_week",
    executionsToday: "executions_today",
    mostActiveRules: "most_active_rules",
    totalRules: "total_rules",
    triggerDistribution: "trigger_distribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAutomationStatsData$ {
  /** @deprecated use `ApiResponseAutomationStatsData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseAutomationStatsData$inboundSchema;
  /** @deprecated use `ApiResponseAutomationStatsData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseAutomationStatsData$outboundSchema;
  /** @deprecated use `ApiResponseAutomationStatsData$Outbound` instead. */
  export type Outbound = ApiResponseAutomationStatsData$Outbound;
}

export function apiResponseAutomationStatsDataToJSON(
  apiResponseAutomationStatsData: ApiResponseAutomationStatsData,
): string {
  return JSON.stringify(
    ApiResponseAutomationStatsData$outboundSchema.parse(
      apiResponseAutomationStatsData,
    ),
  );
}

export function apiResponseAutomationStatsDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAutomationStatsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseAutomationStatsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAutomationStatsData' from JSON`,
  );
}

/** @internal */
export const ApiResponseAutomationStats$inboundSchema: z.ZodType<
  ApiResponseAutomationStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseAutomationStatsData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseAutomationStats$Outbound = {
  data?: ApiResponseAutomationStatsData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAutomationStats$outboundSchema: z.ZodType<
  ApiResponseAutomationStats$Outbound,
  z.ZodTypeDef,
  ApiResponseAutomationStats
> = z.object({
  data: z.lazy(() => ApiResponseAutomationStatsData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAutomationStats$ {
  /** @deprecated use `ApiResponseAutomationStats$inboundSchema` instead. */
  export const inboundSchema = ApiResponseAutomationStats$inboundSchema;
  /** @deprecated use `ApiResponseAutomationStats$outboundSchema` instead. */
  export const outboundSchema = ApiResponseAutomationStats$outboundSchema;
  /** @deprecated use `ApiResponseAutomationStats$Outbound` instead. */
  export type Outbound = ApiResponseAutomationStats$Outbound;
}

export function apiResponseAutomationStatsToJSON(
  apiResponseAutomationStats: ApiResponseAutomationStats,
): string {
  return JSON.stringify(
    ApiResponseAutomationStats$outboundSchema.parse(apiResponseAutomationStats),
  );
}

export function apiResponseAutomationStatsFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAutomationStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseAutomationStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAutomationStats' from JSON`,
  );
}
