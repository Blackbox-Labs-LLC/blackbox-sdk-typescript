/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseClientTicketResponseData = {
  createdAt: string;
  status: string;
  ticketId: string;
};

export type ApiResponseClientTicketResponse = {
  data?: ApiResponseClientTicketResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseClientTicketResponseData$inboundSchema: z.ZodType<
  ApiResponseClientTicketResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  status: z.string(),
  ticket_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "ticket_id": "ticketId",
  });
});

/** @internal */
export type ApiResponseClientTicketResponseData$Outbound = {
  created_at: string;
  status: string;
  ticket_id: string;
};

/** @internal */
export const ApiResponseClientTicketResponseData$outboundSchema: z.ZodType<
  ApiResponseClientTicketResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseClientTicketResponseData
> = z.object({
  createdAt: z.string(),
  status: z.string(),
  ticketId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    ticketId: "ticket_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseClientTicketResponseData$ {
  /** @deprecated use `ApiResponseClientTicketResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseClientTicketResponseData$inboundSchema;
  /** @deprecated use `ApiResponseClientTicketResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseClientTicketResponseData$outboundSchema;
  /** @deprecated use `ApiResponseClientTicketResponseData$Outbound` instead. */
  export type Outbound = ApiResponseClientTicketResponseData$Outbound;
}

export function apiResponseClientTicketResponseDataToJSON(
  apiResponseClientTicketResponseData: ApiResponseClientTicketResponseData,
): string {
  return JSON.stringify(
    ApiResponseClientTicketResponseData$outboundSchema.parse(
      apiResponseClientTicketResponseData,
    ),
  );
}

export function apiResponseClientTicketResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseClientTicketResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseClientTicketResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseClientTicketResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseClientTicketResponse$inboundSchema: z.ZodType<
  ApiResponseClientTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseClientTicketResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseClientTicketResponse$Outbound = {
  data?: ApiResponseClientTicketResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseClientTicketResponse$outboundSchema: z.ZodType<
  ApiResponseClientTicketResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseClientTicketResponse
> = z.object({
  data: z.lazy(() => ApiResponseClientTicketResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseClientTicketResponse$ {
  /** @deprecated use `ApiResponseClientTicketResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseClientTicketResponse$inboundSchema;
  /** @deprecated use `ApiResponseClientTicketResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseClientTicketResponse$outboundSchema;
  /** @deprecated use `ApiResponseClientTicketResponse$Outbound` instead. */
  export type Outbound = ApiResponseClientTicketResponse$Outbound;
}

export function apiResponseClientTicketResponseToJSON(
  apiResponseClientTicketResponse: ApiResponseClientTicketResponse,
): string {
  return JSON.stringify(
    ApiResponseClientTicketResponse$outboundSchema.parse(
      apiResponseClientTicketResponse,
    ),
  );
}

export function apiResponseClientTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseClientTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseClientTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseClientTicketResponse' from JSON`,
  );
}
