/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateEventRequest = {
  eventType: string;
  metadata?: any | undefined;
  ticketId?: string | null | undefined;
  userId?: string | null | undefined;
};

/** @internal */
export const CreateEventRequest$inboundSchema: z.ZodType<
  CreateEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_type: z.string(),
  metadata: z.any().optional(),
  ticket_id: z.nullable(z.string()).optional(),
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
    "ticket_id": "ticketId",
    "user_id": "userId",
  });
});

/** @internal */
export type CreateEventRequest$Outbound = {
  event_type: string;
  metadata?: any | undefined;
  ticket_id?: string | null | undefined;
  user_id?: string | null | undefined;
};

/** @internal */
export const CreateEventRequest$outboundSchema: z.ZodType<
  CreateEventRequest$Outbound,
  z.ZodTypeDef,
  CreateEventRequest
> = z.object({
  eventType: z.string(),
  metadata: z.any().optional(),
  ticketId: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
    ticketId: "ticket_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventRequest$ {
  /** @deprecated use `CreateEventRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEventRequest$inboundSchema;
  /** @deprecated use `CreateEventRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEventRequest$outboundSchema;
  /** @deprecated use `CreateEventRequest$Outbound` instead. */
  export type Outbound = CreateEventRequest$Outbound;
}

export function createEventRequestToJSON(
  createEventRequest: CreateEventRequest,
): string {
  return JSON.stringify(
    CreateEventRequest$outboundSchema.parse(createEventRequest),
  );
}

export function createEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEventRequest' from JSON`,
  );
}
