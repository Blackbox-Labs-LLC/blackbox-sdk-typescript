/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateMacroRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Macro ID
   */
  macroId: string;
  updateMacroRequest: models.UpdateMacroRequest;
};

/** @internal */
export const UpdateMacroRequest$inboundSchema: z.ZodType<
  UpdateMacroRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  macro_id: z.string(),
  UpdateMacroRequest: models.UpdateMacroRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "macro_id": "macroId",
    "UpdateMacroRequest": "updateMacroRequest",
  });
});

/** @internal */
export type UpdateMacroRequest$Outbound = {
  org_id: string;
  macro_id: string;
  UpdateMacroRequest: models.UpdateMacroRequest$Outbound;
};

/** @internal */
export const UpdateMacroRequest$outboundSchema: z.ZodType<
  UpdateMacroRequest$Outbound,
  z.ZodTypeDef,
  UpdateMacroRequest
> = z.object({
  orgId: z.string(),
  macroId: z.string(),
  updateMacroRequest: models.UpdateMacroRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    macroId: "macro_id",
    updateMacroRequest: "UpdateMacroRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMacroRequest$ {
  /** @deprecated use `UpdateMacroRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMacroRequest$inboundSchema;
  /** @deprecated use `UpdateMacroRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateMacroRequest$outboundSchema;
  /** @deprecated use `UpdateMacroRequest$Outbound` instead. */
  export type Outbound = UpdateMacroRequest$Outbound;
}

export function updateMacroRequestToJSON(
  updateMacroRequest: UpdateMacroRequest,
): string {
  return JSON.stringify(
    UpdateMacroRequest$outboundSchema.parse(updateMacroRequest),
  );
}

export function updateMacroRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMacroRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMacroRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMacroRequest' from JSON`,
  );
}
