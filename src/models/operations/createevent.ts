/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateEventRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  createEventRequest: models.CreateEventRequest;
};

/** @internal */
export const CreateEventRequest$inboundSchema: z.ZodType<
  CreateEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  CreateEventRequest: models.CreateEventRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "CreateEventRequest": "createEventRequest",
  });
});

/** @internal */
export type CreateEventRequest$Outbound = {
  org_id: string;
  CreateEventRequest: models.CreateEventRequest$Outbound;
};

/** @internal */
export const CreateEventRequest$outboundSchema: z.ZodType<
  CreateEventRequest$Outbound,
  z.ZodTypeDef,
  CreateEventRequest
> = z.object({
  orgId: z.string(),
  createEventRequest: models.CreateEventRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    createEventRequest: "CreateEventRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEventRequest$ {
  /** @deprecated use `CreateEventRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEventRequest$inboundSchema;
  /** @deprecated use `CreateEventRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEventRequest$outboundSchema;
  /** @deprecated use `CreateEventRequest$Outbound` instead. */
  export type Outbound = CreateEventRequest$Outbound;
}

export function createEventRequestToJSON(
  createEventRequest: CreateEventRequest,
): string {
  return JSON.stringify(
    CreateEventRequest$outboundSchema.parse(createEventRequest),
  );
}

export function createEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEventRequest' from JSON`,
  );
}
