/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListWebhooksRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Filter by enabled status
   */
  enabled?: boolean | undefined;
  /**
   * Filter by event type
   */
  eventType?: string | undefined;
  /**
   * Search by name
   */
  nameSearch?: string | undefined;
  /**
   * Search by URL
   */
  urlSearch?: string | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Items per page
   */
  perPage?: number | undefined;
};

/** @internal */
export const ListWebhooksRequest$inboundSchema: z.ZodType<
  ListWebhooksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  enabled: z.boolean().optional(),
  event_type: z.string().optional(),
  name_search: z.string().optional(),
  url_search: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "event_type": "eventType",
    "name_search": "nameSearch",
    "url_search": "urlSearch",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListWebhooksRequest$Outbound = {
  org_id: string;
  enabled?: boolean | undefined;
  event_type?: string | undefined;
  name_search?: string | undefined;
  url_search?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListWebhooksRequest$outboundSchema: z.ZodType<
  ListWebhooksRequest$Outbound,
  z.ZodTypeDef,
  ListWebhooksRequest
> = z.object({
  orgId: z.string(),
  enabled: z.boolean().optional(),
  eventType: z.string().optional(),
  nameSearch: z.string().optional(),
  urlSearch: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    eventType: "event_type",
    nameSearch: "name_search",
    urlSearch: "url_search",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksRequest$ {
  /** @deprecated use `ListWebhooksRequest$inboundSchema` instead. */
  export const inboundSchema = ListWebhooksRequest$inboundSchema;
  /** @deprecated use `ListWebhooksRequest$outboundSchema` instead. */
  export const outboundSchema = ListWebhooksRequest$outboundSchema;
  /** @deprecated use `ListWebhooksRequest$Outbound` instead. */
  export type Outbound = ListWebhooksRequest$Outbound;
}

export function listWebhooksRequestToJSON(
  listWebhooksRequest: ListWebhooksRequest,
): string {
  return JSON.stringify(
    ListWebhooksRequest$outboundSchema.parse(listWebhooksRequest),
  );
}

export function listWebhooksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhooksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhooksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhooksRequest' from JSON`,
  );
}
