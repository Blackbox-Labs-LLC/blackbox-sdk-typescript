/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RenderMacroTemplateRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  macroTemplateRequest: models.MacroTemplateRequest;
};

/** @internal */
export const RenderMacroTemplateRequest$inboundSchema: z.ZodType<
  RenderMacroTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  MacroTemplateRequest: models.MacroTemplateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "MacroTemplateRequest": "macroTemplateRequest",
  });
});

/** @internal */
export type RenderMacroTemplateRequest$Outbound = {
  org_id: string;
  MacroTemplateRequest: models.MacroTemplateRequest$Outbound;
};

/** @internal */
export const RenderMacroTemplateRequest$outboundSchema: z.ZodType<
  RenderMacroTemplateRequest$Outbound,
  z.ZodTypeDef,
  RenderMacroTemplateRequest
> = z.object({
  orgId: z.string(),
  macroTemplateRequest: models.MacroTemplateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    macroTemplateRequest: "MacroTemplateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenderMacroTemplateRequest$ {
  /** @deprecated use `RenderMacroTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = RenderMacroTemplateRequest$inboundSchema;
  /** @deprecated use `RenderMacroTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = RenderMacroTemplateRequest$outboundSchema;
  /** @deprecated use `RenderMacroTemplateRequest$Outbound` instead. */
  export type Outbound = RenderMacroTemplateRequest$Outbound;
}

export function renderMacroTemplateRequestToJSON(
  renderMacroTemplateRequest: RenderMacroTemplateRequest,
): string {
  return JSON.stringify(
    RenderMacroTemplateRequest$outboundSchema.parse(renderMacroTemplateRequest),
  );
}

export function renderMacroTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RenderMacroTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenderMacroTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenderMacroTemplateRequest' from JSON`,
  );
}
