/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListApiKeysRequest = {
  /**
   * Page number (default: 1)
   */
  page?: number | undefined;
  /**
   * Items per page (default: 20, max: 100)
   */
  perPage?: number | undefined;
  /**
   * Include revoked keys (default: false)
   */
  includeRevoked?: boolean | undefined;
};

/** @internal */
export const ListApiKeysRequest$inboundSchema: z.ZodType<
  ListApiKeysRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  include_revoked: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "per_page": "perPage",
    "include_revoked": "includeRevoked",
  });
});

/** @internal */
export type ListApiKeysRequest$Outbound = {
  page?: number | undefined;
  per_page?: number | undefined;
  include_revoked?: boolean | undefined;
};

/** @internal */
export const ListApiKeysRequest$outboundSchema: z.ZodType<
  ListApiKeysRequest$Outbound,
  z.ZodTypeDef,
  ListApiKeysRequest
> = z.object({
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  includeRevoked: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    perPage: "per_page",
    includeRevoked: "include_revoked",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListApiKeysRequest$ {
  /** @deprecated use `ListApiKeysRequest$inboundSchema` instead. */
  export const inboundSchema = ListApiKeysRequest$inboundSchema;
  /** @deprecated use `ListApiKeysRequest$outboundSchema` instead. */
  export const outboundSchema = ListApiKeysRequest$outboundSchema;
  /** @deprecated use `ListApiKeysRequest$Outbound` instead. */
  export type Outbound = ListApiKeysRequest$Outbound;
}

export function listApiKeysRequestToJSON(
  listApiKeysRequest: ListApiKeysRequest,
): string {
  return JSON.stringify(
    ListApiKeysRequest$outboundSchema.parse(listApiKeysRequest),
  );
}

export function listApiKeysRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListApiKeysRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListApiKeysRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListApiKeysRequest' from JSON`,
  );
}
