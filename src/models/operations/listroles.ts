/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRolesRequest = {
  orgId: string;
};

/** @internal */
export const ListRolesRequest$inboundSchema: z.ZodType<
  ListRolesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
  });
});

/** @internal */
export type ListRolesRequest$Outbound = {
  org_id: string;
};

/** @internal */
export const ListRolesRequest$outboundSchema: z.ZodType<
  ListRolesRequest$Outbound,
  z.ZodTypeDef,
  ListRolesRequest
> = z.object({
  orgId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRolesRequest$ {
  /** @deprecated use `ListRolesRequest$inboundSchema` instead. */
  export const inboundSchema = ListRolesRequest$inboundSchema;
  /** @deprecated use `ListRolesRequest$outboundSchema` instead. */
  export const outboundSchema = ListRolesRequest$outboundSchema;
  /** @deprecated use `ListRolesRequest$Outbound` instead. */
  export type Outbound = ListRolesRequest$Outbound;
}

export function listRolesRequestToJSON(
  listRolesRequest: ListRolesRequest,
): string {
  return JSON.stringify(
    ListRolesRequest$outboundSchema.parse(listRolesRequest),
  );
}

export function listRolesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRolesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRolesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRolesRequest' from JSON`,
  );
}
