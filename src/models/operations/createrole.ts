/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateRoleRequest = {
  orgId: string;
  createRoleRequest: models.CreateRoleRequest;
};

/** @internal */
export const CreateRoleRequest$inboundSchema: z.ZodType<
  CreateRoleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  CreateRoleRequest: models.CreateRoleRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "CreateRoleRequest": "createRoleRequest",
  });
});

/** @internal */
export type CreateRoleRequest$Outbound = {
  org_id: string;
  CreateRoleRequest: models.CreateRoleRequest$Outbound;
};

/** @internal */
export const CreateRoleRequest$outboundSchema: z.ZodType<
  CreateRoleRequest$Outbound,
  z.ZodTypeDef,
  CreateRoleRequest
> = z.object({
  orgId: z.string(),
  createRoleRequest: models.CreateRoleRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    createRoleRequest: "CreateRoleRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRoleRequest$ {
  /** @deprecated use `CreateRoleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRoleRequest$inboundSchema;
  /** @deprecated use `CreateRoleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRoleRequest$outboundSchema;
  /** @deprecated use `CreateRoleRequest$Outbound` instead. */
  export type Outbound = CreateRoleRequest$Outbound;
}

export function createRoleRequestToJSON(
  createRoleRequest: CreateRoleRequest,
): string {
  return JSON.stringify(
    CreateRoleRequest$outboundSchema.parse(createRoleRequest),
  );
}

export function createRoleRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRoleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRoleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRoleRequest' from JSON`,
  );
}
