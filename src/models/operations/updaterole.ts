/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateRoleRequest = {
  orgId: string;
  roleId: string;
  updateRoleRequest: models.UpdateRoleRequest;
};

/** @internal */
export const UpdateRoleRequest$inboundSchema: z.ZodType<
  UpdateRoleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  role_id: z.string(),
  UpdateRoleRequest: models.UpdateRoleRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "role_id": "roleId",
    "UpdateRoleRequest": "updateRoleRequest",
  });
});

/** @internal */
export type UpdateRoleRequest$Outbound = {
  org_id: string;
  role_id: string;
  UpdateRoleRequest: models.UpdateRoleRequest$Outbound;
};

/** @internal */
export const UpdateRoleRequest$outboundSchema: z.ZodType<
  UpdateRoleRequest$Outbound,
  z.ZodTypeDef,
  UpdateRoleRequest
> = z.object({
  orgId: z.string(),
  roleId: z.string(),
  updateRoleRequest: models.UpdateRoleRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    roleId: "role_id",
    updateRoleRequest: "UpdateRoleRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRoleRequest$ {
  /** @deprecated use `UpdateRoleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRoleRequest$inboundSchema;
  /** @deprecated use `UpdateRoleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRoleRequest$outboundSchema;
  /** @deprecated use `UpdateRoleRequest$Outbound` instead. */
  export type Outbound = UpdateRoleRequest$Outbound;
}

export function updateRoleRequestToJSON(
  updateRoleRequest: UpdateRoleRequest,
): string {
  return JSON.stringify(
    UpdateRoleRequest$outboundSchema.parse(updateRoleRequest),
  );
}

export function updateRoleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRoleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRoleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRoleRequest' from JSON`,
  );
}
