/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SubmitSurveyRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  submitSurveyRequest: models.SubmitSurveyRequest;
};

/** @internal */
export const SubmitSurveyRequest$inboundSchema: z.ZodType<
  SubmitSurveyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  SubmitSurveyRequest: models.SubmitSurveyRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "SubmitSurveyRequest": "submitSurveyRequest",
  });
});

/** @internal */
export type SubmitSurveyRequest$Outbound = {
  org_id: string;
  SubmitSurveyRequest: models.SubmitSurveyRequest$Outbound;
};

/** @internal */
export const SubmitSurveyRequest$outboundSchema: z.ZodType<
  SubmitSurveyRequest$Outbound,
  z.ZodTypeDef,
  SubmitSurveyRequest
> = z.object({
  orgId: z.string(),
  submitSurveyRequest: models.SubmitSurveyRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    submitSurveyRequest: "SubmitSurveyRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitSurveyRequest$ {
  /** @deprecated use `SubmitSurveyRequest$inboundSchema` instead. */
  export const inboundSchema = SubmitSurveyRequest$inboundSchema;
  /** @deprecated use `SubmitSurveyRequest$outboundSchema` instead. */
  export const outboundSchema = SubmitSurveyRequest$outboundSchema;
  /** @deprecated use `SubmitSurveyRequest$Outbound` instead. */
  export type Outbound = SubmitSurveyRequest$Outbound;
}

export function submitSurveyRequestToJSON(
  submitSurveyRequest: SubmitSurveyRequest,
): string {
  return JSON.stringify(
    SubmitSurveyRequest$outboundSchema.parse(submitSurveyRequest),
  );
}

export function submitSurveyRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubmitSurveyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitSurveyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitSurveyRequest' from JSON`,
  );
}
