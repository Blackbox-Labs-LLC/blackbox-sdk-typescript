/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserTicketsRequest = {
  /**
   * User ID
   */
  userId: string;
  /**
   * Organization domain
   */
  orgDomain: string;
};

/** @internal */
export const GetUserTicketsRequest$inboundSchema: z.ZodType<
  GetUserTicketsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  org_domain: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "org_domain": "orgDomain",
  });
});

/** @internal */
export type GetUserTicketsRequest$Outbound = {
  user_id: string;
  org_domain: string;
};

/** @internal */
export const GetUserTicketsRequest$outboundSchema: z.ZodType<
  GetUserTicketsRequest$Outbound,
  z.ZodTypeDef,
  GetUserTicketsRequest
> = z.object({
  userId: z.string(),
  orgDomain: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    orgDomain: "org_domain",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserTicketsRequest$ {
  /** @deprecated use `GetUserTicketsRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserTicketsRequest$inboundSchema;
  /** @deprecated use `GetUserTicketsRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserTicketsRequest$outboundSchema;
  /** @deprecated use `GetUserTicketsRequest$Outbound` instead. */
  export type Outbound = GetUserTicketsRequest$Outbound;
}

export function getUserTicketsRequestToJSON(
  getUserTicketsRequest: GetUserTicketsRequest,
): string {
  return JSON.stringify(
    GetUserTicketsRequest$outboundSchema.parse(getUserTicketsRequest),
  );
}

export function getUserTicketsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserTicketsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserTicketsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserTicketsRequest' from JSON`,
  );
}
