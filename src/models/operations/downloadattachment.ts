/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DownloadAttachmentRequest = {
  /**
   * Attachment ID
   */
  attachmentId: string;
};

/** @internal */
export const DownloadAttachmentRequest$inboundSchema: z.ZodType<
  DownloadAttachmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "attachment_id": "attachmentId",
  });
});

/** @internal */
export type DownloadAttachmentRequest$Outbound = {
  attachment_id: string;
};

/** @internal */
export const DownloadAttachmentRequest$outboundSchema: z.ZodType<
  DownloadAttachmentRequest$Outbound,
  z.ZodTypeDef,
  DownloadAttachmentRequest
> = z.object({
  attachmentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    attachmentId: "attachment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadAttachmentRequest$ {
  /** @deprecated use `DownloadAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema = DownloadAttachmentRequest$inboundSchema;
  /** @deprecated use `DownloadAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema = DownloadAttachmentRequest$outboundSchema;
  /** @deprecated use `DownloadAttachmentRequest$Outbound` instead. */
  export type Outbound = DownloadAttachmentRequest$Outbound;
}

export function downloadAttachmentRequestToJSON(
  downloadAttachmentRequest: DownloadAttachmentRequest,
): string {
  return JSON.stringify(
    DownloadAttachmentRequest$outboundSchema.parse(downloadAttachmentRequest),
  );
}

export function downloadAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DownloadAttachmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DownloadAttachmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DownloadAttachmentRequest' from JSON`,
  );
}
