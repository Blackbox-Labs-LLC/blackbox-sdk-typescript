/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAutomationRulesRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Filter by enabled status
   */
  enabled?: boolean | undefined;
  /**
   * Filter by trigger type
   */
  trigger?: string | undefined;
  /**
   * Search by name
   */
  nameSearch?: string | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Items per page
   */
  perPage?: number | undefined;
};

/** @internal */
export const ListAutomationRulesRequest$inboundSchema: z.ZodType<
  ListAutomationRulesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.string().optional(),
  name_search: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "name_search": "nameSearch",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListAutomationRulesRequest$Outbound = {
  org_id: string;
  enabled?: boolean | undefined;
  trigger?: string | undefined;
  name_search?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListAutomationRulesRequest$outboundSchema: z.ZodType<
  ListAutomationRulesRequest$Outbound,
  z.ZodTypeDef,
  ListAutomationRulesRequest
> = z.object({
  orgId: z.string(),
  enabled: z.boolean().optional(),
  trigger: z.string().optional(),
  nameSearch: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    nameSearch: "name_search",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAutomationRulesRequest$ {
  /** @deprecated use `ListAutomationRulesRequest$inboundSchema` instead. */
  export const inboundSchema = ListAutomationRulesRequest$inboundSchema;
  /** @deprecated use `ListAutomationRulesRequest$outboundSchema` instead. */
  export const outboundSchema = ListAutomationRulesRequest$outboundSchema;
  /** @deprecated use `ListAutomationRulesRequest$Outbound` instead. */
  export type Outbound = ListAutomationRulesRequest$Outbound;
}

export function listAutomationRulesRequestToJSON(
  listAutomationRulesRequest: ListAutomationRulesRequest,
): string {
  return JSON.stringify(
    ListAutomationRulesRequest$outboundSchema.parse(listAutomationRulesRequest),
  );
}

export function listAutomationRulesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAutomationRulesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAutomationRulesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAutomationRulesRequest' from JSON`,
  );
}
