/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteAttachmentRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Ticket ID
   */
  ticketId: string;
  /**
   * Message ID
   */
  messageId: string;
  /**
   * Attachment ID
   */
  attachmentId: string;
};

/** @internal */
export const DeleteAttachmentRequest$inboundSchema: z.ZodType<
  DeleteAttachmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  ticket_id: z.string(),
  message_id: z.string(),
  attachment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "ticket_id": "ticketId",
    "message_id": "messageId",
    "attachment_id": "attachmentId",
  });
});

/** @internal */
export type DeleteAttachmentRequest$Outbound = {
  org_id: string;
  ticket_id: string;
  message_id: string;
  attachment_id: string;
};

/** @internal */
export const DeleteAttachmentRequest$outboundSchema: z.ZodType<
  DeleteAttachmentRequest$Outbound,
  z.ZodTypeDef,
  DeleteAttachmentRequest
> = z.object({
  orgId: z.string(),
  ticketId: z.string(),
  messageId: z.string(),
  attachmentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    ticketId: "ticket_id",
    messageId: "message_id",
    attachmentId: "attachment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAttachmentRequest$ {
  /** @deprecated use `DeleteAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAttachmentRequest$inboundSchema;
  /** @deprecated use `DeleteAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteAttachmentRequest$outboundSchema;
  /** @deprecated use `DeleteAttachmentRequest$Outbound` instead. */
  export type Outbound = DeleteAttachmentRequest$Outbound;
}

export function deleteAttachmentRequestToJSON(
  deleteAttachmentRequest: DeleteAttachmentRequest,
): string {
  return JSON.stringify(
    DeleteAttachmentRequest$outboundSchema.parse(deleteAttachmentRequest),
  );
}

export function deleteAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAttachmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAttachmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAttachmentRequest' from JSON`,
  );
}
