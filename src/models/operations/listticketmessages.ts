/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketMessagesRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Ticket ID
   */
  ticketId: string;
  /**
   * Filter by channel
   */
  channel?: string | undefined;
  /**
   * Filter by sender user ID
   */
  senderId?: string | undefined;
  /**
   * Page number
   */
  page?: number | undefined;
  /**
   * Items per page
   */
  perPage?: number | undefined;
};

/** @internal */
export const ListTicketMessagesRequest$inboundSchema: z.ZodType<
  ListTicketMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  ticket_id: z.string(),
  channel: z.string().optional(),
  sender_id: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "ticket_id": "ticketId",
    "sender_id": "senderId",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListTicketMessagesRequest$Outbound = {
  org_id: string;
  ticket_id: string;
  channel?: string | undefined;
  sender_id?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListTicketMessagesRequest$outboundSchema: z.ZodType<
  ListTicketMessagesRequest$Outbound,
  z.ZodTypeDef,
  ListTicketMessagesRequest
> = z.object({
  orgId: z.string(),
  ticketId: z.string(),
  channel: z.string().optional(),
  senderId: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    ticketId: "ticket_id",
    senderId: "sender_id",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketMessagesRequest$ {
  /** @deprecated use `ListTicketMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketMessagesRequest$inboundSchema;
  /** @deprecated use `ListTicketMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketMessagesRequest$outboundSchema;
  /** @deprecated use `ListTicketMessagesRequest$Outbound` instead. */
  export type Outbound = ListTicketMessagesRequest$Outbound;
}

export function listTicketMessagesRequestToJSON(
  listTicketMessagesRequest: ListTicketMessagesRequest,
): string {
  return JSON.stringify(
    ListTicketMessagesRequest$outboundSchema.parse(listTicketMessagesRequest),
  );
}

export function listTicketMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketMessagesRequest' from JSON`,
  );
}
