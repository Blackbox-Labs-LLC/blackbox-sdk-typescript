/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RevokeRoleRequest = {
  orgId: string;
  roleId: string;
  assignRoleRequest: models.AssignRoleRequest;
};

/** @internal */
export const RevokeRoleRequest$inboundSchema: z.ZodType<
  RevokeRoleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  role_id: z.string(),
  AssignRoleRequest: models.AssignRoleRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "role_id": "roleId",
    "AssignRoleRequest": "assignRoleRequest",
  });
});

/** @internal */
export type RevokeRoleRequest$Outbound = {
  org_id: string;
  role_id: string;
  AssignRoleRequest: models.AssignRoleRequest$Outbound;
};

/** @internal */
export const RevokeRoleRequest$outboundSchema: z.ZodType<
  RevokeRoleRequest$Outbound,
  z.ZodTypeDef,
  RevokeRoleRequest
> = z.object({
  orgId: z.string(),
  roleId: z.string(),
  assignRoleRequest: models.AssignRoleRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    roleId: "role_id",
    assignRoleRequest: "AssignRoleRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeRoleRequest$ {
  /** @deprecated use `RevokeRoleRequest$inboundSchema` instead. */
  export const inboundSchema = RevokeRoleRequest$inboundSchema;
  /** @deprecated use `RevokeRoleRequest$outboundSchema` instead. */
  export const outboundSchema = RevokeRoleRequest$outboundSchema;
  /** @deprecated use `RevokeRoleRequest$Outbound` instead. */
  export type Outbound = RevokeRoleRequest$Outbound;
}

export function revokeRoleRequestToJSON(
  revokeRoleRequest: RevokeRoleRequest,
): string {
  return JSON.stringify(
    RevokeRoleRequest$outboundSchema.parse(revokeRoleRequest),
  );
}

export function revokeRoleRequestFromJSON(
  jsonString: string,
): SafeParseResult<RevokeRoleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeRoleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeRoleRequest' from JSON`,
  );
}
