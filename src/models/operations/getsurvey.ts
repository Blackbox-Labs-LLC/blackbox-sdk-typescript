/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSurveyRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Survey ID
   */
  surveyId: string;
};

/** @internal */
export const GetSurveyRequest$inboundSchema: z.ZodType<
  GetSurveyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  survey_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "survey_id": "surveyId",
  });
});

/** @internal */
export type GetSurveyRequest$Outbound = {
  org_id: string;
  survey_id: string;
};

/** @internal */
export const GetSurveyRequest$outboundSchema: z.ZodType<
  GetSurveyRequest$Outbound,
  z.ZodTypeDef,
  GetSurveyRequest
> = z.object({
  orgId: z.string(),
  surveyId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    surveyId: "survey_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSurveyRequest$ {
  /** @deprecated use `GetSurveyRequest$inboundSchema` instead. */
  export const inboundSchema = GetSurveyRequest$inboundSchema;
  /** @deprecated use `GetSurveyRequest$outboundSchema` instead. */
  export const outboundSchema = GetSurveyRequest$outboundSchema;
  /** @deprecated use `GetSurveyRequest$Outbound` instead. */
  export type Outbound = GetSurveyRequest$Outbound;
}

export function getSurveyRequestToJSON(
  getSurveyRequest: GetSurveyRequest,
): string {
  return JSON.stringify(
    GetSurveyRequest$outboundSchema.parse(getSurveyRequest),
  );
}

export function getSurveyRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSurveyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSurveyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSurveyRequest' from JSON`,
  );
}
