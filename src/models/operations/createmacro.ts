/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateMacroRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  createMacroRequest: models.CreateMacroRequest;
};

/** @internal */
export const CreateMacroRequest$inboundSchema: z.ZodType<
  CreateMacroRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  CreateMacroRequest: models.CreateMacroRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "CreateMacroRequest": "createMacroRequest",
  });
});

/** @internal */
export type CreateMacroRequest$Outbound = {
  org_id: string;
  CreateMacroRequest: models.CreateMacroRequest$Outbound;
};

/** @internal */
export const CreateMacroRequest$outboundSchema: z.ZodType<
  CreateMacroRequest$Outbound,
  z.ZodTypeDef,
  CreateMacroRequest
> = z.object({
  orgId: z.string(),
  createMacroRequest: models.CreateMacroRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    createMacroRequest: "CreateMacroRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMacroRequest$ {
  /** @deprecated use `CreateMacroRequest$inboundSchema` instead. */
  export const inboundSchema = CreateMacroRequest$inboundSchema;
  /** @deprecated use `CreateMacroRequest$outboundSchema` instead. */
  export const outboundSchema = CreateMacroRequest$outboundSchema;
  /** @deprecated use `CreateMacroRequest$Outbound` instead. */
  export type Outbound = CreateMacroRequest$Outbound;
}

export function createMacroRequestToJSON(
  createMacroRequest: CreateMacroRequest,
): string {
  return JSON.stringify(
    CreateMacroRequest$outboundSchema.parse(createMacroRequest),
  );
}

export function createMacroRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateMacroRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMacroRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMacroRequest' from JSON`,
  );
}
