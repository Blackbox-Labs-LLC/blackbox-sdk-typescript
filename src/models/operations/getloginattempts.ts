/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetLoginAttemptsRequest = {
  /**
   * Maximum number of entries to return
   */
  limit?: number | undefined;
};

/** @internal */
export const GetLoginAttemptsRequest$inboundSchema: z.ZodType<
  GetLoginAttemptsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
});

/** @internal */
export type GetLoginAttemptsRequest$Outbound = {
  limit?: number | undefined;
};

/** @internal */
export const GetLoginAttemptsRequest$outboundSchema: z.ZodType<
  GetLoginAttemptsRequest$Outbound,
  z.ZodTypeDef,
  GetLoginAttemptsRequest
> = z.object({
  limit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetLoginAttemptsRequest$ {
  /** @deprecated use `GetLoginAttemptsRequest$inboundSchema` instead. */
  export const inboundSchema = GetLoginAttemptsRequest$inboundSchema;
  /** @deprecated use `GetLoginAttemptsRequest$outboundSchema` instead. */
  export const outboundSchema = GetLoginAttemptsRequest$outboundSchema;
  /** @deprecated use `GetLoginAttemptsRequest$Outbound` instead. */
  export type Outbound = GetLoginAttemptsRequest$Outbound;
}

export function getLoginAttemptsRequestToJSON(
  getLoginAttemptsRequest: GetLoginAttemptsRequest,
): string {
  return JSON.stringify(
    GetLoginAttemptsRequest$outboundSchema.parse(getLoginAttemptsRequest),
  );
}

export function getLoginAttemptsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetLoginAttemptsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetLoginAttemptsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetLoginAttemptsRequest' from JSON`,
  );
}
