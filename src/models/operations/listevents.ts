/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListEventsRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Page number (default: 1)
   */
  page?: number | undefined;
  /**
   * Items per page (default: 20, max: 100)
   */
  perPage?: number | undefined;
  /**
   * Filter by event type
   */
  eventType?: string | undefined;
  /**
   * Filter by user ID
   */
  userId?: string | undefined;
  /**
   * Filter by ticket ID
   */
  ticketId?: string | undefined;
  /**
   * Filter events from date (ISO 8601)
   */
  fromDate?: string | undefined;
  /**
   * Filter events to date (ISO 8601)
   */
  toDate?: string | undefined;
};

/** @internal */
export const ListEventsRequest$inboundSchema: z.ZodType<
  ListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  event_type: z.string().optional(),
  user_id: z.string().optional(),
  ticket_id: z.string().optional(),
  from_date: z.string().optional(),
  to_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "per_page": "perPage",
    "event_type": "eventType",
    "user_id": "userId",
    "ticket_id": "ticketId",
    "from_date": "fromDate",
    "to_date": "toDate",
  });
});

/** @internal */
export type ListEventsRequest$Outbound = {
  org_id: string;
  page?: number | undefined;
  per_page?: number | undefined;
  event_type?: string | undefined;
  user_id?: string | undefined;
  ticket_id?: string | undefined;
  from_date?: string | undefined;
  to_date?: string | undefined;
};

/** @internal */
export const ListEventsRequest$outboundSchema: z.ZodType<
  ListEventsRequest$Outbound,
  z.ZodTypeDef,
  ListEventsRequest
> = z.object({
  orgId: z.string(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  eventType: z.string().optional(),
  userId: z.string().optional(),
  ticketId: z.string().optional(),
  fromDate: z.string().optional(),
  toDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    perPage: "per_page",
    eventType: "event_type",
    userId: "user_id",
    ticketId: "ticket_id",
    fromDate: "from_date",
    toDate: "to_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEventsRequest$ {
  /** @deprecated use `ListEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEventsRequest$inboundSchema;
  /** @deprecated use `ListEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEventsRequest$outboundSchema;
  /** @deprecated use `ListEventsRequest$Outbound` instead. */
  export type Outbound = ListEventsRequest$Outbound;
}

export function listEventsRequestToJSON(
  listEventsRequest: ListEventsRequest,
): string {
  return JSON.stringify(
    ListEventsRequest$outboundSchema.parse(listEventsRequest),
  );
}

export function listEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEventsRequest' from JSON`,
  );
}
