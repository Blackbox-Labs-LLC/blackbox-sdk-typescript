/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketsRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Filter by ticket status (open, in_progress, resolved, closed)
   */
  status?: string | undefined;
  /**
   * Filter by priority level (low, medium, high, urgent)
   */
  priority?: string | undefined;
  /**
   * Filter by assigned user ID
   */
  assignedTo?: string | undefined;
  /**
   * Filter by creator user ID
   */
  createdBy?: string | undefined;
  /**
   * Filter by tag IDs (comma-separated UUIDs)
   */
  tagIds?: string | undefined;
  /**
   * Page number (default: 1)
   */
  page?: number | undefined;
  /**
   * Items per page (default: 20, max: 100)
   */
  perPage?: number | undefined;
};

/** @internal */
export const ListTicketsRequest$inboundSchema: z.ZodType<
  ListTicketsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  status: z.string().optional(),
  priority: z.string().optional(),
  assigned_to: z.string().optional(),
  created_by: z.string().optional(),
  tag_ids: z.string().optional(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "assigned_to": "assignedTo",
    "created_by": "createdBy",
    "tag_ids": "tagIds",
    "per_page": "perPage",
  });
});

/** @internal */
export type ListTicketsRequest$Outbound = {
  org_id: string;
  status?: string | undefined;
  priority?: string | undefined;
  assigned_to?: string | undefined;
  created_by?: string | undefined;
  tag_ids?: string | undefined;
  page?: number | undefined;
  per_page?: number | undefined;
};

/** @internal */
export const ListTicketsRequest$outboundSchema: z.ZodType<
  ListTicketsRequest$Outbound,
  z.ZodTypeDef,
  ListTicketsRequest
> = z.object({
  orgId: z.string(),
  status: z.string().optional(),
  priority: z.string().optional(),
  assignedTo: z.string().optional(),
  createdBy: z.string().optional(),
  tagIds: z.string().optional(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    assignedTo: "assigned_to",
    createdBy: "created_by",
    tagIds: "tag_ids",
    perPage: "per_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketsRequest$ {
  /** @deprecated use `ListTicketsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketsRequest$inboundSchema;
  /** @deprecated use `ListTicketsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketsRequest$outboundSchema;
  /** @deprecated use `ListTicketsRequest$Outbound` instead. */
  export type Outbound = ListTicketsRequest$Outbound;
}

export function listTicketsRequestToJSON(
  listTicketsRequest: ListTicketsRequest,
): string {
  return JSON.stringify(
    ListTicketsRequest$outboundSchema.parse(listTicketsRequest),
  );
}

export function listTicketsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketsRequest' from JSON`,
  );
}
