/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type InviteUserRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  inviteUserRequest: models.InviteUserRequest;
};

/** @internal */
export const InviteUserRequest$inboundSchema: z.ZodType<
  InviteUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  InviteUserRequest: models.InviteUserRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "InviteUserRequest": "inviteUserRequest",
  });
});

/** @internal */
export type InviteUserRequest$Outbound = {
  org_id: string;
  InviteUserRequest: models.InviteUserRequest$Outbound;
};

/** @internal */
export const InviteUserRequest$outboundSchema: z.ZodType<
  InviteUserRequest$Outbound,
  z.ZodTypeDef,
  InviteUserRequest
> = z.object({
  orgId: z.string(),
  inviteUserRequest: models.InviteUserRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    inviteUserRequest: "InviteUserRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteUserRequest$ {
  /** @deprecated use `InviteUserRequest$inboundSchema` instead. */
  export const inboundSchema = InviteUserRequest$inboundSchema;
  /** @deprecated use `InviteUserRequest$outboundSchema` instead. */
  export const outboundSchema = InviteUserRequest$outboundSchema;
  /** @deprecated use `InviteUserRequest$Outbound` instead. */
  export type Outbound = InviteUserRequest$Outbound;
}

export function inviteUserRequestToJSON(
  inviteUserRequest: InviteUserRequest,
): string {
  return JSON.stringify(
    InviteUserRequest$outboundSchema.parse(inviteUserRequest),
  );
}

export function inviteUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<InviteUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InviteUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InviteUserRequest' from JSON`,
  );
}
