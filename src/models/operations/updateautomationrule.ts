/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateAutomationRuleRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Automation rule ID
   */
  ruleId: string;
  updateAutomationRuleRequest: models.UpdateAutomationRuleRequest;
};

/** @internal */
export const UpdateAutomationRuleRequest$inboundSchema: z.ZodType<
  UpdateAutomationRuleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  rule_id: z.string(),
  UpdateAutomationRuleRequest: models.UpdateAutomationRuleRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "rule_id": "ruleId",
    "UpdateAutomationRuleRequest": "updateAutomationRuleRequest",
  });
});

/** @internal */
export type UpdateAutomationRuleRequest$Outbound = {
  org_id: string;
  rule_id: string;
  UpdateAutomationRuleRequest: models.UpdateAutomationRuleRequest$Outbound;
};

/** @internal */
export const UpdateAutomationRuleRequest$outboundSchema: z.ZodType<
  UpdateAutomationRuleRequest$Outbound,
  z.ZodTypeDef,
  UpdateAutomationRuleRequest
> = z.object({
  orgId: z.string(),
  ruleId: z.string(),
  updateAutomationRuleRequest:
    models.UpdateAutomationRuleRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    ruleId: "rule_id",
    updateAutomationRuleRequest: "UpdateAutomationRuleRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAutomationRuleRequest$ {
  /** @deprecated use `UpdateAutomationRuleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAutomationRuleRequest$inboundSchema;
  /** @deprecated use `UpdateAutomationRuleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAutomationRuleRequest$outboundSchema;
  /** @deprecated use `UpdateAutomationRuleRequest$Outbound` instead. */
  export type Outbound = UpdateAutomationRuleRequest$Outbound;
}

export function updateAutomationRuleRequestToJSON(
  updateAutomationRuleRequest: UpdateAutomationRuleRequest,
): string {
  return JSON.stringify(
    UpdateAutomationRuleRequest$outboundSchema.parse(
      updateAutomationRuleRequest,
    ),
  );
}

export function updateAutomationRuleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAutomationRuleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAutomationRuleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAutomationRuleRequest' from JSON`,
  );
}
