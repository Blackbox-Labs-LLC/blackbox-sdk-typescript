/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTicketRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Ticket ID
   */
  ticketId: string;
};

/** @internal */
export const DeleteTicketRequest$inboundSchema: z.ZodType<
  DeleteTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  ticket_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "ticket_id": "ticketId",
  });
});

/** @internal */
export type DeleteTicketRequest$Outbound = {
  org_id: string;
  ticket_id: string;
};

/** @internal */
export const DeleteTicketRequest$outboundSchema: z.ZodType<
  DeleteTicketRequest$Outbound,
  z.ZodTypeDef,
  DeleteTicketRequest
> = z.object({
  orgId: z.string(),
  ticketId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    ticketId: "ticket_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTicketRequest$ {
  /** @deprecated use `DeleteTicketRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTicketRequest$inboundSchema;
  /** @deprecated use `DeleteTicketRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTicketRequest$outboundSchema;
  /** @deprecated use `DeleteTicketRequest$Outbound` instead. */
  export type Outbound = DeleteTicketRequest$Outbound;
}

export function deleteTicketRequestToJSON(
  deleteTicketRequest: DeleteTicketRequest,
): string {
  return JSON.stringify(
    DeleteTicketRequest$outboundSchema.parse(deleteTicketRequest),
  );
}

export function deleteTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTicketRequest' from JSON`,
  );
}
