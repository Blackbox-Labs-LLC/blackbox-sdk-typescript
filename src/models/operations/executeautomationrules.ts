/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExecuteAutomationRulesRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Trigger type to execute
   */
  trigger: string;
  /**
   * Ticket ID for context
   */
  ticketId?: string | undefined;
  /**
   * User ID for context
   */
  userId?: string | undefined;
  /**
   * CSAT score for context
   */
  csatScore?: number | undefined;
};

/** @internal */
export const ExecuteAutomationRulesRequest$inboundSchema: z.ZodType<
  ExecuteAutomationRulesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  trigger: z.string(),
  ticket_id: z.string().optional(),
  user_id: z.string().optional(),
  csat_score: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "ticket_id": "ticketId",
    "user_id": "userId",
    "csat_score": "csatScore",
  });
});

/** @internal */
export type ExecuteAutomationRulesRequest$Outbound = {
  org_id: string;
  trigger: string;
  ticket_id?: string | undefined;
  user_id?: string | undefined;
  csat_score?: number | undefined;
};

/** @internal */
export const ExecuteAutomationRulesRequest$outboundSchema: z.ZodType<
  ExecuteAutomationRulesRequest$Outbound,
  z.ZodTypeDef,
  ExecuteAutomationRulesRequest
> = z.object({
  orgId: z.string(),
  trigger: z.string(),
  ticketId: z.string().optional(),
  userId: z.string().optional(),
  csatScore: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    ticketId: "ticket_id",
    userId: "user_id",
    csatScore: "csat_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecuteAutomationRulesRequest$ {
  /** @deprecated use `ExecuteAutomationRulesRequest$inboundSchema` instead. */
  export const inboundSchema = ExecuteAutomationRulesRequest$inboundSchema;
  /** @deprecated use `ExecuteAutomationRulesRequest$outboundSchema` instead. */
  export const outboundSchema = ExecuteAutomationRulesRequest$outboundSchema;
  /** @deprecated use `ExecuteAutomationRulesRequest$Outbound` instead. */
  export type Outbound = ExecuteAutomationRulesRequest$Outbound;
}

export function executeAutomationRulesRequestToJSON(
  executeAutomationRulesRequest: ExecuteAutomationRulesRequest,
): string {
  return JSON.stringify(
    ExecuteAutomationRulesRequest$outboundSchema.parse(
      executeAutomationRulesRequest,
    ),
  );
}

export function executeAutomationRulesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExecuteAutomationRulesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExecuteAutomationRulesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecuteAutomationRulesRequest' from JSON`,
  );
}
