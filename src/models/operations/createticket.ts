/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateTicketRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  createTicketRequest: models.CreateTicketRequest;
};

/** @internal */
export const CreateTicketRequest$inboundSchema: z.ZodType<
  CreateTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  CreateTicketRequest: models.CreateTicketRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "CreateTicketRequest": "createTicketRequest",
  });
});

/** @internal */
export type CreateTicketRequest$Outbound = {
  org_id: string;
  CreateTicketRequest: models.CreateTicketRequest$Outbound;
};

/** @internal */
export const CreateTicketRequest$outboundSchema: z.ZodType<
  CreateTicketRequest$Outbound,
  z.ZodTypeDef,
  CreateTicketRequest
> = z.object({
  orgId: z.string(),
  createTicketRequest: models.CreateTicketRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    createTicketRequest: "CreateTicketRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTicketRequest$ {
  /** @deprecated use `CreateTicketRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTicketRequest$inboundSchema;
  /** @deprecated use `CreateTicketRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTicketRequest$outboundSchema;
  /** @deprecated use `CreateTicketRequest$Outbound` instead. */
  export type Outbound = CreateTicketRequest$Outbound;
}

export function createTicketRequestToJSON(
  createTicketRequest: CreateTicketRequest,
): string {
  return JSON.stringify(
    CreateTicketRequest$outboundSchema.parse(createTicketRequest),
  );
}

export function createTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTicketRequest' from JSON`,
  );
}
