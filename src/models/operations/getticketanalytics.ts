/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTicketAnalyticsRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Start date for analytics (ISO 8601)
   */
  fromDate?: string | undefined;
  /**
   * End date for analytics (ISO 8601)
   */
  toDate?: string | undefined;
};

/** @internal */
export const GetTicketAnalyticsRequest$inboundSchema: z.ZodType<
  GetTicketAnalyticsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  from_date: z.string().optional(),
  to_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "from_date": "fromDate",
    "to_date": "toDate",
  });
});

/** @internal */
export type GetTicketAnalyticsRequest$Outbound = {
  org_id: string;
  from_date?: string | undefined;
  to_date?: string | undefined;
};

/** @internal */
export const GetTicketAnalyticsRequest$outboundSchema: z.ZodType<
  GetTicketAnalyticsRequest$Outbound,
  z.ZodTypeDef,
  GetTicketAnalyticsRequest
> = z.object({
  orgId: z.string(),
  fromDate: z.string().optional(),
  toDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    fromDate: "from_date",
    toDate: "to_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTicketAnalyticsRequest$ {
  /** @deprecated use `GetTicketAnalyticsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTicketAnalyticsRequest$inboundSchema;
  /** @deprecated use `GetTicketAnalyticsRequest$outboundSchema` instead. */
  export const outboundSchema = GetTicketAnalyticsRequest$outboundSchema;
  /** @deprecated use `GetTicketAnalyticsRequest$Outbound` instead. */
  export type Outbound = GetTicketAnalyticsRequest$Outbound;
}

export function getTicketAnalyticsRequestToJSON(
  getTicketAnalyticsRequest: GetTicketAnalyticsRequest,
): string {
  return JSON.stringify(
    GetTicketAnalyticsRequest$outboundSchema.parse(getTicketAnalyticsRequest),
  );
}

export function getTicketAnalyticsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTicketAnalyticsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTicketAnalyticsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTicketAnalyticsRequest' from JSON`,
  );
}
