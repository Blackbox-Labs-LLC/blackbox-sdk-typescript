/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSurveyRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Survey ID
   */
  surveyId: string;
};

/** @internal */
export const DeleteSurveyRequest$inboundSchema: z.ZodType<
  DeleteSurveyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  survey_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "survey_id": "surveyId",
  });
});

/** @internal */
export type DeleteSurveyRequest$Outbound = {
  org_id: string;
  survey_id: string;
};

/** @internal */
export const DeleteSurveyRequest$outboundSchema: z.ZodType<
  DeleteSurveyRequest$Outbound,
  z.ZodTypeDef,
  DeleteSurveyRequest
> = z.object({
  orgId: z.string(),
  surveyId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    surveyId: "survey_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSurveyRequest$ {
  /** @deprecated use `DeleteSurveyRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSurveyRequest$inboundSchema;
  /** @deprecated use `DeleteSurveyRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSurveyRequest$outboundSchema;
  /** @deprecated use `DeleteSurveyRequest$Outbound` instead. */
  export type Outbound = DeleteSurveyRequest$Outbound;
}

export function deleteSurveyRequestToJSON(
  deleteSurveyRequest: DeleteSurveyRequest,
): string {
  return JSON.stringify(
    DeleteSurveyRequest$outboundSchema.parse(deleteSurveyRequest),
  );
}

export function deleteSurveyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSurveyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSurveyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSurveyRequest' from JSON`,
  );
}
