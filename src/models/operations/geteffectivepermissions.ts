/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEffectivePermissionsRequest = {
  orgId: string;
};

/** @internal */
export const GetEffectivePermissionsRequest$inboundSchema: z.ZodType<
  GetEffectivePermissionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
  });
});

/** @internal */
export type GetEffectivePermissionsRequest$Outbound = {
  org_id: string;
};

/** @internal */
export const GetEffectivePermissionsRequest$outboundSchema: z.ZodType<
  GetEffectivePermissionsRequest$Outbound,
  z.ZodTypeDef,
  GetEffectivePermissionsRequest
> = z.object({
  orgId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEffectivePermissionsRequest$ {
  /** @deprecated use `GetEffectivePermissionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetEffectivePermissionsRequest$inboundSchema;
  /** @deprecated use `GetEffectivePermissionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetEffectivePermissionsRequest$outboundSchema;
  /** @deprecated use `GetEffectivePermissionsRequest$Outbound` instead. */
  export type Outbound = GetEffectivePermissionsRequest$Outbound;
}

export function getEffectivePermissionsRequestToJSON(
  getEffectivePermissionsRequest: GetEffectivePermissionsRequest,
): string {
  return JSON.stringify(
    GetEffectivePermissionsRequest$outboundSchema.parse(
      getEffectivePermissionsRequest,
    ),
  );
}

export function getEffectivePermissionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEffectivePermissionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEffectivePermissionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEffectivePermissionsRequest' from JSON`,
  );
}
