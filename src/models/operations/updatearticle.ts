/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateArticleRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Article ID
   */
  articleId: string;
  updateArticleRequest: models.UpdateArticleRequest;
};

/** @internal */
export const UpdateArticleRequest$inboundSchema: z.ZodType<
  UpdateArticleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  article_id: z.string(),
  UpdateArticleRequest: models.UpdateArticleRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "article_id": "articleId",
    "UpdateArticleRequest": "updateArticleRequest",
  });
});

/** @internal */
export type UpdateArticleRequest$Outbound = {
  org_id: string;
  article_id: string;
  UpdateArticleRequest: models.UpdateArticleRequest$Outbound;
};

/** @internal */
export const UpdateArticleRequest$outboundSchema: z.ZodType<
  UpdateArticleRequest$Outbound,
  z.ZodTypeDef,
  UpdateArticleRequest
> = z.object({
  orgId: z.string(),
  articleId: z.string(),
  updateArticleRequest: models.UpdateArticleRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    articleId: "article_id",
    updateArticleRequest: "UpdateArticleRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateArticleRequest$ {
  /** @deprecated use `UpdateArticleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateArticleRequest$inboundSchema;
  /** @deprecated use `UpdateArticleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateArticleRequest$outboundSchema;
  /** @deprecated use `UpdateArticleRequest$Outbound` instead. */
  export type Outbound = UpdateArticleRequest$Outbound;
}

export function updateArticleRequestToJSON(
  updateArticleRequest: UpdateArticleRequest,
): string {
  return JSON.stringify(
    UpdateArticleRequest$outboundSchema.parse(updateArticleRequest),
  );
}

export function updateArticleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateArticleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateArticleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateArticleRequest' from JSON`,
  );
}
