/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMacrosRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Page number (default: 1)
   */
  page?: number | undefined;
  /**
   * Items per page (default: 20, max: 100)
   */
  perPage?: number | undefined;
  /**
   * Search in name, description, or content
   */
  search?: string | undefined;
  /**
   * Filter by creator user ID
   */
  createdBy?: string | undefined;
};

/** @internal */
export const ListMacrosRequest$inboundSchema: z.ZodType<
  ListMacrosRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  page: z.number().int().optional(),
  per_page: z.number().int().optional(),
  search: z.string().optional(),
  created_by: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "per_page": "perPage",
    "created_by": "createdBy",
  });
});

/** @internal */
export type ListMacrosRequest$Outbound = {
  org_id: string;
  page?: number | undefined;
  per_page?: number | undefined;
  search?: string | undefined;
  created_by?: string | undefined;
};

/** @internal */
export const ListMacrosRequest$outboundSchema: z.ZodType<
  ListMacrosRequest$Outbound,
  z.ZodTypeDef,
  ListMacrosRequest
> = z.object({
  orgId: z.string(),
  page: z.number().int().optional(),
  perPage: z.number().int().optional(),
  search: z.string().optional(),
  createdBy: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    perPage: "per_page",
    createdBy: "created_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMacrosRequest$ {
  /** @deprecated use `ListMacrosRequest$inboundSchema` instead. */
  export const inboundSchema = ListMacrosRequest$inboundSchema;
  /** @deprecated use `ListMacrosRequest$outboundSchema` instead. */
  export const outboundSchema = ListMacrosRequest$outboundSchema;
  /** @deprecated use `ListMacrosRequest$Outbound` instead. */
  export type Outbound = ListMacrosRequest$Outbound;
}

export function listMacrosRequestToJSON(
  listMacrosRequest: ListMacrosRequest,
): string {
  return JSON.stringify(
    ListMacrosRequest$outboundSchema.parse(listMacrosRequest),
  );
}

export function listMacrosRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMacrosRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMacrosRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMacrosRequest' from JSON`,
  );
}
