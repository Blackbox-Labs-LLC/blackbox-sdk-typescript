/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SendWebhooksRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Event type to trigger
   */
  eventType: string;
  /**
   * Ticket ID for context
   */
  ticketId?: string | undefined;
  /**
   * User ID for context
   */
  userId?: string | undefined;
};

/** @internal */
export const SendWebhooksRequest$inboundSchema: z.ZodType<
  SendWebhooksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  event_type: z.string(),
  ticket_id: z.string().optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "event_type": "eventType",
    "ticket_id": "ticketId",
    "user_id": "userId",
  });
});

/** @internal */
export type SendWebhooksRequest$Outbound = {
  org_id: string;
  event_type: string;
  ticket_id?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const SendWebhooksRequest$outboundSchema: z.ZodType<
  SendWebhooksRequest$Outbound,
  z.ZodTypeDef,
  SendWebhooksRequest
> = z.object({
  orgId: z.string(),
  eventType: z.string(),
  ticketId: z.string().optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    eventType: "event_type",
    ticketId: "ticket_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendWebhooksRequest$ {
  /** @deprecated use `SendWebhooksRequest$inboundSchema` instead. */
  export const inboundSchema = SendWebhooksRequest$inboundSchema;
  /** @deprecated use `SendWebhooksRequest$outboundSchema` instead. */
  export const outboundSchema = SendWebhooksRequest$outboundSchema;
  /** @deprecated use `SendWebhooksRequest$Outbound` instead. */
  export type Outbound = SendWebhooksRequest$Outbound;
}

export function sendWebhooksRequestToJSON(
  sendWebhooksRequest: SendWebhooksRequest,
): string {
  return JSON.stringify(
    SendWebhooksRequest$outboundSchema.parse(sendWebhooksRequest),
  );
}

export function sendWebhooksRequestFromJSON(
  jsonString: string,
): SafeParseResult<SendWebhooksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendWebhooksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendWebhooksRequest' from JSON`,
  );
}
