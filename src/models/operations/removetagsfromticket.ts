/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type RemoveTagsFromTicketRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Ticket ID
   */
  ticketId: string;
  tagManagementRequest: models.TagManagementRequest;
};

/** @internal */
export const RemoveTagsFromTicketRequest$inboundSchema: z.ZodType<
  RemoveTagsFromTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  ticket_id: z.string(),
  TagManagementRequest: models.TagManagementRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "ticket_id": "ticketId",
    "TagManagementRequest": "tagManagementRequest",
  });
});

/** @internal */
export type RemoveTagsFromTicketRequest$Outbound = {
  org_id: string;
  ticket_id: string;
  TagManagementRequest: models.TagManagementRequest$Outbound;
};

/** @internal */
export const RemoveTagsFromTicketRequest$outboundSchema: z.ZodType<
  RemoveTagsFromTicketRequest$Outbound,
  z.ZodTypeDef,
  RemoveTagsFromTicketRequest
> = z.object({
  orgId: z.string(),
  ticketId: z.string(),
  tagManagementRequest: models.TagManagementRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    ticketId: "ticket_id",
    tagManagementRequest: "TagManagementRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveTagsFromTicketRequest$ {
  /** @deprecated use `RemoveTagsFromTicketRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveTagsFromTicketRequest$inboundSchema;
  /** @deprecated use `RemoveTagsFromTicketRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveTagsFromTicketRequest$outboundSchema;
  /** @deprecated use `RemoveTagsFromTicketRequest$Outbound` instead. */
  export type Outbound = RemoveTagsFromTicketRequest$Outbound;
}

export function removeTagsFromTicketRequestToJSON(
  removeTagsFromTicketRequest: RemoveTagsFromTicketRequest,
): string {
  return JSON.stringify(
    RemoveTagsFromTicketRequest$outboundSchema.parse(
      removeTagsFromTicketRequest,
    ),
  );
}

export function removeTagsFromTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveTagsFromTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveTagsFromTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveTagsFromTicketRequest' from JSON`,
  );
}
