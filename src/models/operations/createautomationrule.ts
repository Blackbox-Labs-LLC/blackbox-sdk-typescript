/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateAutomationRuleRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  createAutomationRuleRequest: models.CreateAutomationRuleRequest;
};

/** @internal */
export const CreateAutomationRuleRequest$inboundSchema: z.ZodType<
  CreateAutomationRuleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  CreateAutomationRuleRequest: models.CreateAutomationRuleRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "CreateAutomationRuleRequest": "createAutomationRuleRequest",
  });
});

/** @internal */
export type CreateAutomationRuleRequest$Outbound = {
  org_id: string;
  CreateAutomationRuleRequest: models.CreateAutomationRuleRequest$Outbound;
};

/** @internal */
export const CreateAutomationRuleRequest$outboundSchema: z.ZodType<
  CreateAutomationRuleRequest$Outbound,
  z.ZodTypeDef,
  CreateAutomationRuleRequest
> = z.object({
  orgId: z.string(),
  createAutomationRuleRequest:
    models.CreateAutomationRuleRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    createAutomationRuleRequest: "CreateAutomationRuleRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAutomationRuleRequest$ {
  /** @deprecated use `CreateAutomationRuleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAutomationRuleRequest$inboundSchema;
  /** @deprecated use `CreateAutomationRuleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAutomationRuleRequest$outboundSchema;
  /** @deprecated use `CreateAutomationRuleRequest$Outbound` instead. */
  export type Outbound = CreateAutomationRuleRequest$Outbound;
}

export function createAutomationRuleRequestToJSON(
  createAutomationRuleRequest: CreateAutomationRuleRequest,
): string {
  return JSON.stringify(
    CreateAutomationRuleRequest$outboundSchema.parse(
      createAutomationRuleRequest,
    ),
  );
}

export function createAutomationRuleRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAutomationRuleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAutomationRuleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAutomationRuleRequest' from JSON`,
  );
}
