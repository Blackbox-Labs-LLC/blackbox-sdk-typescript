/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTagRequest = {
  /**
   * Organization ID
   */
  orgId: string;
  /**
   * Tag ID
   */
  tagId: string;
};

/** @internal */
export const DeleteTagRequest$inboundSchema: z.ZodType<
  DeleteTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org_id: z.string(),
  tag_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_id": "orgId",
    "tag_id": "tagId",
  });
});

/** @internal */
export type DeleteTagRequest$Outbound = {
  org_id: string;
  tag_id: string;
};

/** @internal */
export const DeleteTagRequest$outboundSchema: z.ZodType<
  DeleteTagRequest$Outbound,
  z.ZodTypeDef,
  DeleteTagRequest
> = z.object({
  orgId: z.string(),
  tagId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgId: "org_id",
    tagId: "tag_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTagRequest$ {
  /** @deprecated use `DeleteTagRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTagRequest$inboundSchema;
  /** @deprecated use `DeleteTagRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTagRequest$outboundSchema;
  /** @deprecated use `DeleteTagRequest$Outbound` instead. */
  export type Outbound = DeleteTagRequest$Outbound;
}

export function deleteTagRequestToJSON(
  deleteTagRequest: DeleteTagRequest,
): string {
  return JSON.stringify(
    DeleteTagRequest$outboundSchema.parse(deleteTagRequest),
  );
}

export function deleteTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTagRequest' from JSON`,
  );
}
