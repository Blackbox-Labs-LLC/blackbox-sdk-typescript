/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TicketTagResponse,
  TicketTagResponse$inboundSchema,
  TicketTagResponse$Outbound,
  TicketTagResponse$outboundSchema,
} from "./tickettagresponse.js";

export type ApiResponseTicketResponseData = {
  assignedTo?: string | null | undefined;
  assignedToName?: string | null | undefined;
  createdAt: string;
  createdBy: string;
  createdByName: string;
  description: string;
  id: string;
  priority: string;
  status: string;
  subject: string;
  tags: Array<TicketTagResponse>;
  updatedAt: string;
};

export type ApiResponseTicketResponse = {
  data?: ApiResponseTicketResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseTicketResponseData$inboundSchema: z.ZodType<
  ApiResponseTicketResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  assigned_to: z.nullable(z.string()).optional(),
  assigned_to_name: z.nullable(z.string()).optional(),
  created_at: z.string(),
  created_by: z.string(),
  created_by_name: z.string(),
  description: z.string(),
  id: z.string(),
  priority: z.string(),
  status: z.string(),
  subject: z.string(),
  tags: z.array(TicketTagResponse$inboundSchema),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "assigned_to": "assignedTo",
    "assigned_to_name": "assignedToName",
    "created_at": "createdAt",
    "created_by": "createdBy",
    "created_by_name": "createdByName",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseTicketResponseData$Outbound = {
  assigned_to?: string | null | undefined;
  assigned_to_name?: string | null | undefined;
  created_at: string;
  created_by: string;
  created_by_name: string;
  description: string;
  id: string;
  priority: string;
  status: string;
  subject: string;
  tags: Array<TicketTagResponse$Outbound>;
  updated_at: string;
};

/** @internal */
export const ApiResponseTicketResponseData$outboundSchema: z.ZodType<
  ApiResponseTicketResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseTicketResponseData
> = z.object({
  assignedTo: z.nullable(z.string()).optional(),
  assignedToName: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  createdBy: z.string(),
  createdByName: z.string(),
  description: z.string(),
  id: z.string(),
  priority: z.string(),
  status: z.string(),
  subject: z.string(),
  tags: z.array(TicketTagResponse$outboundSchema),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    assignedTo: "assigned_to",
    assignedToName: "assigned_to_name",
    createdAt: "created_at",
    createdBy: "created_by",
    createdByName: "created_by_name",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseTicketResponseData$ {
  /** @deprecated use `ApiResponseTicketResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseTicketResponseData$inboundSchema;
  /** @deprecated use `ApiResponseTicketResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseTicketResponseData$outboundSchema;
  /** @deprecated use `ApiResponseTicketResponseData$Outbound` instead. */
  export type Outbound = ApiResponseTicketResponseData$Outbound;
}

export function apiResponseTicketResponseDataToJSON(
  apiResponseTicketResponseData: ApiResponseTicketResponseData,
): string {
  return JSON.stringify(
    ApiResponseTicketResponseData$outboundSchema.parse(
      apiResponseTicketResponseData,
    ),
  );
}

export function apiResponseTicketResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseTicketResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseTicketResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseTicketResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseTicketResponse$inboundSchema: z.ZodType<
  ApiResponseTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseTicketResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseTicketResponse$Outbound = {
  data?: ApiResponseTicketResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseTicketResponse$outboundSchema: z.ZodType<
  ApiResponseTicketResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseTicketResponse
> = z.object({
  data: z.lazy(() => ApiResponseTicketResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseTicketResponse$ {
  /** @deprecated use `ApiResponseTicketResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseTicketResponse$inboundSchema;
  /** @deprecated use `ApiResponseTicketResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseTicketResponse$outboundSchema;
  /** @deprecated use `ApiResponseTicketResponse$Outbound` instead. */
  export type Outbound = ApiResponseTicketResponse$Outbound;
}

export function apiResponseTicketResponseToJSON(
  apiResponseTicketResponse: ApiResponseTicketResponse,
): string {
  return JSON.stringify(
    ApiResponseTicketResponse$outboundSchema.parse(apiResponseTicketResponse),
  );
}

export function apiResponseTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseTicketResponse' from JSON`,
  );
}
