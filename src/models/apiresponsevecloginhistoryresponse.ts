/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecLoginHistoryResponseData = {
  id: string;
  ipAddress: string;
  loggedInAt: string;
  userAgent: string;
};

export type ApiResponseVecLoginHistoryResponse = {
  data?: Array<ApiResponseVecLoginHistoryResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecLoginHistoryResponseData$inboundSchema: z.ZodType<
  ApiResponseVecLoginHistoryResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ip_address: z.string(),
  logged_in_at: z.string(),
  user_agent: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ip_address": "ipAddress",
    "logged_in_at": "loggedInAt",
    "user_agent": "userAgent",
  });
});

/** @internal */
export type ApiResponseVecLoginHistoryResponseData$Outbound = {
  id: string;
  ip_address: string;
  logged_in_at: string;
  user_agent: string;
};

/** @internal */
export const ApiResponseVecLoginHistoryResponseData$outboundSchema: z.ZodType<
  ApiResponseVecLoginHistoryResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecLoginHistoryResponseData
> = z.object({
  id: z.string(),
  ipAddress: z.string(),
  loggedInAt: z.string(),
  userAgent: z.string(),
}).transform((v) => {
  return remap$(v, {
    ipAddress: "ip_address",
    loggedInAt: "logged_in_at",
    userAgent: "user_agent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecLoginHistoryResponseData$ {
  /** @deprecated use `ApiResponseVecLoginHistoryResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecLoginHistoryResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecLoginHistoryResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecLoginHistoryResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecLoginHistoryResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecLoginHistoryResponseData$Outbound;
}

export function apiResponseVecLoginHistoryResponseDataToJSON(
  apiResponseVecLoginHistoryResponseData:
    ApiResponseVecLoginHistoryResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecLoginHistoryResponseData$outboundSchema.parse(
      apiResponseVecLoginHistoryResponseData,
    ),
  );
}

export function apiResponseVecLoginHistoryResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecLoginHistoryResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecLoginHistoryResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecLoginHistoryResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecLoginHistoryResponse$inboundSchema: z.ZodType<
  ApiResponseVecLoginHistoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecLoginHistoryResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecLoginHistoryResponse$Outbound = {
  data?: Array<ApiResponseVecLoginHistoryResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecLoginHistoryResponse$outboundSchema: z.ZodType<
  ApiResponseVecLoginHistoryResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecLoginHistoryResponse
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecLoginHistoryResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecLoginHistoryResponse$ {
  /** @deprecated use `ApiResponseVecLoginHistoryResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecLoginHistoryResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecLoginHistoryResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecLoginHistoryResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecLoginHistoryResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecLoginHistoryResponse$Outbound;
}

export function apiResponseVecLoginHistoryResponseToJSON(
  apiResponseVecLoginHistoryResponse: ApiResponseVecLoginHistoryResponse,
): string {
  return JSON.stringify(
    ApiResponseVecLoginHistoryResponse$outboundSchema.parse(
      apiResponseVecLoginHistoryResponse,
    ),
  );
}

export function apiResponseVecLoginHistoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecLoginHistoryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecLoginHistoryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecLoginHistoryResponse' from JSON`,
  );
}
