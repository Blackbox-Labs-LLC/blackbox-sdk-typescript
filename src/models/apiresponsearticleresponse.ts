/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseArticleResponseData = {
  authorId: string;
  authorName: string;
  content: string;
  createdAt: string;
  id: string;
  public: boolean;
  title: string;
  updatedAt: string;
};

export type ApiResponseArticleResponse = {
  data?: ApiResponseArticleResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseArticleResponseData$inboundSchema: z.ZodType<
  ApiResponseArticleResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  author_id: z.string(),
  author_name: z.string(),
  content: z.string(),
  created_at: z.string(),
  id: z.string(),
  public: z.boolean(),
  title: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "author_id": "authorId",
    "author_name": "authorName",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseArticleResponseData$Outbound = {
  author_id: string;
  author_name: string;
  content: string;
  created_at: string;
  id: string;
  public: boolean;
  title: string;
  updated_at: string;
};

/** @internal */
export const ApiResponseArticleResponseData$outboundSchema: z.ZodType<
  ApiResponseArticleResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseArticleResponseData
> = z.object({
  authorId: z.string(),
  authorName: z.string(),
  content: z.string(),
  createdAt: z.string(),
  id: z.string(),
  public: z.boolean(),
  title: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    authorId: "author_id",
    authorName: "author_name",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseArticleResponseData$ {
  /** @deprecated use `ApiResponseArticleResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseArticleResponseData$inboundSchema;
  /** @deprecated use `ApiResponseArticleResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseArticleResponseData$outboundSchema;
  /** @deprecated use `ApiResponseArticleResponseData$Outbound` instead. */
  export type Outbound = ApiResponseArticleResponseData$Outbound;
}

export function apiResponseArticleResponseDataToJSON(
  apiResponseArticleResponseData: ApiResponseArticleResponseData,
): string {
  return JSON.stringify(
    ApiResponseArticleResponseData$outboundSchema.parse(
      apiResponseArticleResponseData,
    ),
  );
}

export function apiResponseArticleResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseArticleResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseArticleResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseArticleResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseArticleResponse$inboundSchema: z.ZodType<
  ApiResponseArticleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseArticleResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseArticleResponse$Outbound = {
  data?: ApiResponseArticleResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseArticleResponse$outboundSchema: z.ZodType<
  ApiResponseArticleResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseArticleResponse
> = z.object({
  data: z.lazy(() => ApiResponseArticleResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseArticleResponse$ {
  /** @deprecated use `ApiResponseArticleResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseArticleResponse$inboundSchema;
  /** @deprecated use `ApiResponseArticleResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseArticleResponse$outboundSchema;
  /** @deprecated use `ApiResponseArticleResponse$Outbound` instead. */
  export type Outbound = ApiResponseArticleResponse$Outbound;
}

export function apiResponseArticleResponseToJSON(
  apiResponseArticleResponse: ApiResponseArticleResponse,
): string {
  return JSON.stringify(
    ApiResponseArticleResponse$outboundSchema.parse(apiResponseArticleResponse),
  );
}

export function apiResponseArticleResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseArticleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseArticleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseArticleResponse' from JSON`,
  );
}
