/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseMacroTemplateResponseData = {
  macroId: string;
  macroName: string;
  renderedContent: string;
  variablesUsed: Array<string>;
};

export type ApiResponseMacroTemplateResponse = {
  data?: ApiResponseMacroTemplateResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseMacroTemplateResponseData$inboundSchema: z.ZodType<
  ApiResponseMacroTemplateResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  macro_id: z.string(),
  macro_name: z.string(),
  rendered_content: z.string(),
  variables_used: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "macro_id": "macroId",
    "macro_name": "macroName",
    "rendered_content": "renderedContent",
    "variables_used": "variablesUsed",
  });
});

/** @internal */
export type ApiResponseMacroTemplateResponseData$Outbound = {
  macro_id: string;
  macro_name: string;
  rendered_content: string;
  variables_used: Array<string>;
};

/** @internal */
export const ApiResponseMacroTemplateResponseData$outboundSchema: z.ZodType<
  ApiResponseMacroTemplateResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseMacroTemplateResponseData
> = z.object({
  macroId: z.string(),
  macroName: z.string(),
  renderedContent: z.string(),
  variablesUsed: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    macroId: "macro_id",
    macroName: "macro_name",
    renderedContent: "rendered_content",
    variablesUsed: "variables_used",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseMacroTemplateResponseData$ {
  /** @deprecated use `ApiResponseMacroTemplateResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseMacroTemplateResponseData$inboundSchema;
  /** @deprecated use `ApiResponseMacroTemplateResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseMacroTemplateResponseData$outboundSchema;
  /** @deprecated use `ApiResponseMacroTemplateResponseData$Outbound` instead. */
  export type Outbound = ApiResponseMacroTemplateResponseData$Outbound;
}

export function apiResponseMacroTemplateResponseDataToJSON(
  apiResponseMacroTemplateResponseData: ApiResponseMacroTemplateResponseData,
): string {
  return JSON.stringify(
    ApiResponseMacroTemplateResponseData$outboundSchema.parse(
      apiResponseMacroTemplateResponseData,
    ),
  );
}

export function apiResponseMacroTemplateResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseMacroTemplateResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseMacroTemplateResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseMacroTemplateResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseMacroTemplateResponse$inboundSchema: z.ZodType<
  ApiResponseMacroTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseMacroTemplateResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseMacroTemplateResponse$Outbound = {
  data?: ApiResponseMacroTemplateResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseMacroTemplateResponse$outboundSchema: z.ZodType<
  ApiResponseMacroTemplateResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseMacroTemplateResponse
> = z.object({
  data: z.lazy(() => ApiResponseMacroTemplateResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseMacroTemplateResponse$ {
  /** @deprecated use `ApiResponseMacroTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseMacroTemplateResponse$inboundSchema;
  /** @deprecated use `ApiResponseMacroTemplateResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseMacroTemplateResponse$outboundSchema;
  /** @deprecated use `ApiResponseMacroTemplateResponse$Outbound` instead. */
  export type Outbound = ApiResponseMacroTemplateResponse$Outbound;
}

export function apiResponseMacroTemplateResponseToJSON(
  apiResponseMacroTemplateResponse: ApiResponseMacroTemplateResponse,
): string {
  return JSON.stringify(
    ApiResponseMacroTemplateResponse$outboundSchema.parse(
      apiResponseMacroTemplateResponse,
    ),
  );
}

export function apiResponseMacroTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseMacroTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseMacroTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseMacroTemplateResponse' from JSON`,
  );
}
