/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WebhookActivity = {
  deliveryCount: number;
  successRate: number;
  webhookId: string;
  webhookName: string;
};

/** @internal */
export const WebhookActivity$inboundSchema: z.ZodType<
  WebhookActivity,
  z.ZodTypeDef,
  unknown
> = z.object({
  delivery_count: z.number().int(),
  success_rate: z.number(),
  webhook_id: z.string(),
  webhook_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "delivery_count": "deliveryCount",
    "success_rate": "successRate",
    "webhook_id": "webhookId",
    "webhook_name": "webhookName",
  });
});

/** @internal */
export type WebhookActivity$Outbound = {
  delivery_count: number;
  success_rate: number;
  webhook_id: string;
  webhook_name: string;
};

/** @internal */
export const WebhookActivity$outboundSchema: z.ZodType<
  WebhookActivity$Outbound,
  z.ZodTypeDef,
  WebhookActivity
> = z.object({
  deliveryCount: z.number().int(),
  successRate: z.number(),
  webhookId: z.string(),
  webhookName: z.string(),
}).transform((v) => {
  return remap$(v, {
    deliveryCount: "delivery_count",
    successRate: "success_rate",
    webhookId: "webhook_id",
    webhookName: "webhook_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookActivity$ {
  /** @deprecated use `WebhookActivity$inboundSchema` instead. */
  export const inboundSchema = WebhookActivity$inboundSchema;
  /** @deprecated use `WebhookActivity$outboundSchema` instead. */
  export const outboundSchema = WebhookActivity$outboundSchema;
  /** @deprecated use `WebhookActivity$Outbound` instead. */
  export type Outbound = WebhookActivity$Outbound;
}

export function webhookActivityToJSON(
  webhookActivity: WebhookActivity,
): string {
  return JSON.stringify(WebhookActivity$outboundSchema.parse(webhookActivity));
}

export function webhookActivityFromJSON(
  jsonString: string,
): SafeParseResult<WebhookActivity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookActivity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookActivity' from JSON`,
  );
}
