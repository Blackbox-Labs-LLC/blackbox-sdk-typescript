/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AutomationCondition = {
  field: string;
  operator: string;
  value?: any | undefined;
};

/** @internal */
export const AutomationCondition$inboundSchema: z.ZodType<
  AutomationCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  operator: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type AutomationCondition$Outbound = {
  field: string;
  operator: string;
  value?: any | undefined;
};

/** @internal */
export const AutomationCondition$outboundSchema: z.ZodType<
  AutomationCondition$Outbound,
  z.ZodTypeDef,
  AutomationCondition
> = z.object({
  field: z.string(),
  operator: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationCondition$ {
  /** @deprecated use `AutomationCondition$inboundSchema` instead. */
  export const inboundSchema = AutomationCondition$inboundSchema;
  /** @deprecated use `AutomationCondition$outboundSchema` instead. */
  export const outboundSchema = AutomationCondition$outboundSchema;
  /** @deprecated use `AutomationCondition$Outbound` instead. */
  export type Outbound = AutomationCondition$Outbound;
}

export function automationConditionToJSON(
  automationCondition: AutomationCondition,
): string {
  return JSON.stringify(
    AutomationCondition$outboundSchema.parse(automationCondition),
  );
}

export function automationConditionFromJSON(
  jsonString: string,
): SafeParseResult<AutomationCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationCondition' from JSON`,
  );
}
