/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseSessionInfoData = {
  createdAt: string;
  expiresAt: string;
  id: string;
  ipAddress: string;
  isCurrent: boolean;
  token: string;
  userAgent: string;
  userId: string;
};

export type ApiResponseSessionInfo = {
  data?: ApiResponseSessionInfoData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSessionInfoData$inboundSchema: z.ZodType<
  ApiResponseSessionInfoData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  expires_at: z.string(),
  id: z.string(),
  ip_address: z.string(),
  is_current: z.boolean(),
  token: z.string(),
  user_agent: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "expires_at": "expiresAt",
    "ip_address": "ipAddress",
    "is_current": "isCurrent",
    "user_agent": "userAgent",
    "user_id": "userId",
  });
});

/** @internal */
export type ApiResponseSessionInfoData$Outbound = {
  created_at: string;
  expires_at: string;
  id: string;
  ip_address: string;
  is_current: boolean;
  token: string;
  user_agent: string;
  user_id: string;
};

/** @internal */
export const ApiResponseSessionInfoData$outboundSchema: z.ZodType<
  ApiResponseSessionInfoData$Outbound,
  z.ZodTypeDef,
  ApiResponseSessionInfoData
> = z.object({
  createdAt: z.string(),
  expiresAt: z.string(),
  id: z.string(),
  ipAddress: z.string(),
  isCurrent: z.boolean(),
  token: z.string(),
  userAgent: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    expiresAt: "expires_at",
    ipAddress: "ip_address",
    isCurrent: "is_current",
    userAgent: "user_agent",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSessionInfoData$ {
  /** @deprecated use `ApiResponseSessionInfoData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSessionInfoData$inboundSchema;
  /** @deprecated use `ApiResponseSessionInfoData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSessionInfoData$outboundSchema;
  /** @deprecated use `ApiResponseSessionInfoData$Outbound` instead. */
  export type Outbound = ApiResponseSessionInfoData$Outbound;
}

export function apiResponseSessionInfoDataToJSON(
  apiResponseSessionInfoData: ApiResponseSessionInfoData,
): string {
  return JSON.stringify(
    ApiResponseSessionInfoData$outboundSchema.parse(apiResponseSessionInfoData),
  );
}

export function apiResponseSessionInfoDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSessionInfoData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSessionInfoData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSessionInfoData' from JSON`,
  );
}

/** @internal */
export const ApiResponseSessionInfo$inboundSchema: z.ZodType<
  ApiResponseSessionInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseSessionInfoData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseSessionInfo$Outbound = {
  data?: ApiResponseSessionInfoData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSessionInfo$outboundSchema: z.ZodType<
  ApiResponseSessionInfo$Outbound,
  z.ZodTypeDef,
  ApiResponseSessionInfo
> = z.object({
  data: z.lazy(() => ApiResponseSessionInfoData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSessionInfo$ {
  /** @deprecated use `ApiResponseSessionInfo$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSessionInfo$inboundSchema;
  /** @deprecated use `ApiResponseSessionInfo$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSessionInfo$outboundSchema;
  /** @deprecated use `ApiResponseSessionInfo$Outbound` instead. */
  export type Outbound = ApiResponseSessionInfo$Outbound;
}

export function apiResponseSessionInfoToJSON(
  apiResponseSessionInfo: ApiResponseSessionInfo,
): string {
  return JSON.stringify(
    ApiResponseSessionInfo$outboundSchema.parse(apiResponseSessionInfo),
  );
}

export function apiResponseSessionInfoFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSessionInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSessionInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSessionInfo' from JSON`,
  );
}
