/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UserOrgInfo = {
  domain: string;
  id: string;
  name: string;
  role: string;
};

/** @internal */
export const UserOrgInfo$inboundSchema: z.ZodType<
  UserOrgInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  id: z.string(),
  name: z.string(),
  role: z.string(),
});

/** @internal */
export type UserOrgInfo$Outbound = {
  domain: string;
  id: string;
  name: string;
  role: string;
};

/** @internal */
export const UserOrgInfo$outboundSchema: z.ZodType<
  UserOrgInfo$Outbound,
  z.ZodTypeDef,
  UserOrgInfo
> = z.object({
  domain: z.string(),
  id: z.string(),
  name: z.string(),
  role: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOrgInfo$ {
  /** @deprecated use `UserOrgInfo$inboundSchema` instead. */
  export const inboundSchema = UserOrgInfo$inboundSchema;
  /** @deprecated use `UserOrgInfo$outboundSchema` instead. */
  export const outboundSchema = UserOrgInfo$outboundSchema;
  /** @deprecated use `UserOrgInfo$Outbound` instead. */
  export type Outbound = UserOrgInfo$Outbound;
}

export function userOrgInfoToJSON(userOrgInfo: UserOrgInfo): string {
  return JSON.stringify(UserOrgInfo$outboundSchema.parse(userOrgInfo));
}

export function userOrgInfoFromJSON(
  jsonString: string,
): SafeParseResult<UserOrgInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOrgInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOrgInfo' from JSON`,
  );
}
