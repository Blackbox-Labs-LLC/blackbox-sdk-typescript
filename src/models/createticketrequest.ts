/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateTicketRequest = {
  assignedTo?: string | null | undefined;
  description: string;
  priority: string;
  subject: string;
  tagIds?: Array<string> | null | undefined;
};

/** @internal */
export const CreateTicketRequest$inboundSchema: z.ZodType<
  CreateTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assigned_to: z.nullable(z.string()).optional(),
  description: z.string(),
  priority: z.string(),
  subject: z.string(),
  tag_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "assigned_to": "assignedTo",
    "tag_ids": "tagIds",
  });
});

/** @internal */
export type CreateTicketRequest$Outbound = {
  assigned_to?: string | null | undefined;
  description: string;
  priority: string;
  subject: string;
  tag_ids?: Array<string> | null | undefined;
};

/** @internal */
export const CreateTicketRequest$outboundSchema: z.ZodType<
  CreateTicketRequest$Outbound,
  z.ZodTypeDef,
  CreateTicketRequest
> = z.object({
  assignedTo: z.nullable(z.string()).optional(),
  description: z.string(),
  priority: z.string(),
  subject: z.string(),
  tagIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    assignedTo: "assigned_to",
    tagIds: "tag_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTicketRequest$ {
  /** @deprecated use `CreateTicketRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTicketRequest$inboundSchema;
  /** @deprecated use `CreateTicketRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTicketRequest$outboundSchema;
  /** @deprecated use `CreateTicketRequest$Outbound` instead. */
  export type Outbound = CreateTicketRequest$Outbound;
}

export function createTicketRequestToJSON(
  createTicketRequest: CreateTicketRequest,
): string {
  return JSON.stringify(
    CreateTicketRequest$outboundSchema.parse(createTicketRequest),
  );
}

export function createTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTicketRequest' from JSON`,
  );
}
