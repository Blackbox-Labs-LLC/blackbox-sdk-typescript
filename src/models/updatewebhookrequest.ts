/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpdateWebhookRequest = {
  description?: string | null | undefined;
  enabled?: boolean | null | undefined;
  events?: Array<string> | null | undefined;
  headers?: { [k: string]: string } | null | undefined;
  name?: string | null | undefined;
  secret?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const UpdateWebhookRequest$inboundSchema: z.ZodType<
  UpdateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  events: z.nullable(z.array(z.string())).optional(),
  headers: z.nullable(z.record(z.string())).optional(),
  name: z.nullable(z.string()).optional(),
  secret: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateWebhookRequest$Outbound = {
  description?: string | null | undefined;
  enabled?: boolean | null | undefined;
  events?: Array<string> | null | undefined;
  headers?: { [k: string]: string } | null | undefined;
  name?: string | null | undefined;
  secret?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const UpdateWebhookRequest$outboundSchema: z.ZodType<
  UpdateWebhookRequest$Outbound,
  z.ZodTypeDef,
  UpdateWebhookRequest
> = z.object({
  description: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  events: z.nullable(z.array(z.string())).optional(),
  headers: z.nullable(z.record(z.string())).optional(),
  name: z.nullable(z.string()).optional(),
  secret: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequest$ {
  /** @deprecated use `UpdateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookRequest$inboundSchema;
  /** @deprecated use `UpdateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookRequest$outboundSchema;
  /** @deprecated use `UpdateWebhookRequest$Outbound` instead. */
  export type Outbound = UpdateWebhookRequest$Outbound;
}

export function updateWebhookRequestToJSON(
  updateWebhookRequest: UpdateWebhookRequest,
): string {
  return JSON.stringify(
    UpdateWebhookRequest$outboundSchema.parse(updateWebhookRequest),
  );
}

export function updateWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookRequest' from JSON`,
  );
}
