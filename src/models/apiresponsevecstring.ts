/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecString = {
  data?: Array<string> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecString$inboundSchema: z.ZodType<
  ApiResponseVecString,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecString$Outbound = {
  data?: Array<string> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecString$outboundSchema: z.ZodType<
  ApiResponseVecString$Outbound,
  z.ZodTypeDef,
  ApiResponseVecString
> = z.object({
  data: z.array(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecString$ {
  /** @deprecated use `ApiResponseVecString$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecString$inboundSchema;
  /** @deprecated use `ApiResponseVecString$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecString$outboundSchema;
  /** @deprecated use `ApiResponseVecString$Outbound` instead. */
  export type Outbound = ApiResponseVecString$Outbound;
}

export function apiResponseVecStringToJSON(
  apiResponseVecString: ApiResponseVecString,
): string {
  return JSON.stringify(
    ApiResponseVecString$outboundSchema.parse(apiResponseVecString),
  );
}

export function apiResponseVecStringFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecString, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecString$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecString' from JSON`,
  );
}
