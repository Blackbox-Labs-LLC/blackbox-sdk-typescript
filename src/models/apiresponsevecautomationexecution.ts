/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecAutomationExecutionData = {
  actionsPerformed: Array<string>;
  context?: any | undefined;
  errorMessage?: string | null | undefined;
  executedAt: string;
  ruleId: string;
  ruleName: string;
  success: boolean;
  trigger: string;
};

export type ApiResponseVecAutomationExecution = {
  data?: Array<ApiResponseVecAutomationExecutionData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecAutomationExecutionData$inboundSchema: z.ZodType<
  ApiResponseVecAutomationExecutionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  actions_performed: z.array(z.string()),
  context: z.any().optional(),
  error_message: z.nullable(z.string()).optional(),
  executed_at: z.string(),
  rule_id: z.string(),
  rule_name: z.string(),
  success: z.boolean(),
  trigger: z.string(),
}).transform((v) => {
  return remap$(v, {
    "actions_performed": "actionsPerformed",
    "error_message": "errorMessage",
    "executed_at": "executedAt",
    "rule_id": "ruleId",
    "rule_name": "ruleName",
  });
});

/** @internal */
export type ApiResponseVecAutomationExecutionData$Outbound = {
  actions_performed: Array<string>;
  context?: any | undefined;
  error_message?: string | null | undefined;
  executed_at: string;
  rule_id: string;
  rule_name: string;
  success: boolean;
  trigger: string;
};

/** @internal */
export const ApiResponseVecAutomationExecutionData$outboundSchema: z.ZodType<
  ApiResponseVecAutomationExecutionData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecAutomationExecutionData
> = z.object({
  actionsPerformed: z.array(z.string()),
  context: z.any().optional(),
  errorMessage: z.nullable(z.string()).optional(),
  executedAt: z.string(),
  ruleId: z.string(),
  ruleName: z.string(),
  success: z.boolean(),
  trigger: z.string(),
}).transform((v) => {
  return remap$(v, {
    actionsPerformed: "actions_performed",
    errorMessage: "error_message",
    executedAt: "executed_at",
    ruleId: "rule_id",
    ruleName: "rule_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecAutomationExecutionData$ {
  /** @deprecated use `ApiResponseVecAutomationExecutionData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecAutomationExecutionData$inboundSchema;
  /** @deprecated use `ApiResponseVecAutomationExecutionData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecAutomationExecutionData$outboundSchema;
  /** @deprecated use `ApiResponseVecAutomationExecutionData$Outbound` instead. */
  export type Outbound = ApiResponseVecAutomationExecutionData$Outbound;
}

export function apiResponseVecAutomationExecutionDataToJSON(
  apiResponseVecAutomationExecutionData: ApiResponseVecAutomationExecutionData,
): string {
  return JSON.stringify(
    ApiResponseVecAutomationExecutionData$outboundSchema.parse(
      apiResponseVecAutomationExecutionData,
    ),
  );
}

export function apiResponseVecAutomationExecutionDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecAutomationExecutionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecAutomationExecutionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecAutomationExecutionData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecAutomationExecution$inboundSchema: z.ZodType<
  ApiResponseVecAutomationExecution,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecAutomationExecutionData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecAutomationExecution$Outbound = {
  data?: Array<ApiResponseVecAutomationExecutionData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecAutomationExecution$outboundSchema: z.ZodType<
  ApiResponseVecAutomationExecution$Outbound,
  z.ZodTypeDef,
  ApiResponseVecAutomationExecution
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecAutomationExecutionData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecAutomationExecution$ {
  /** @deprecated use `ApiResponseVecAutomationExecution$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecAutomationExecution$inboundSchema;
  /** @deprecated use `ApiResponseVecAutomationExecution$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecAutomationExecution$outboundSchema;
  /** @deprecated use `ApiResponseVecAutomationExecution$Outbound` instead. */
  export type Outbound = ApiResponseVecAutomationExecution$Outbound;
}

export function apiResponseVecAutomationExecutionToJSON(
  apiResponseVecAutomationExecution: ApiResponseVecAutomationExecution,
): string {
  return JSON.stringify(
    ApiResponseVecAutomationExecution$outboundSchema.parse(
      apiResponseVecAutomationExecution,
    ),
  );
}

export function apiResponseVecAutomationExecutionFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecAutomationExecution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecAutomationExecution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecAutomationExecution' from JSON`,
  );
}
