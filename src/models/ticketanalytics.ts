/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DailyCount,
  DailyCount$inboundSchema,
  DailyCount$Outbound,
  DailyCount$outboundSchema,
} from "./dailycount.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PriorityCount,
  PriorityCount$inboundSchema,
  PriorityCount$Outbound,
  PriorityCount$outboundSchema,
} from "./prioritycount.js";
import {
  StatusCount,
  StatusCount$inboundSchema,
  StatusCount$Outbound,
  StatusCount$outboundSchema,
} from "./statuscount.js";

export type TicketAnalytics = {
  averageFirstResponseTimeHours?: number | null | undefined;
  averageResolutionTimeHours?: number | null | undefined;
  closedTickets: number;
  dailyTicketTrends: Array<DailyCount>;
  inProgressTickets: number;
  openTickets: number;
  priorityDistribution: Array<PriorityCount>;
  resolvedTickets: number;
  statusDistribution: Array<StatusCount>;
  ticketsCreatedThisMonth: number;
  ticketsCreatedThisWeek: number;
  ticketsCreatedToday: number;
  totalTickets: number;
};

/** @internal */
export const TicketAnalytics$inboundSchema: z.ZodType<
  TicketAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  average_first_response_time_hours: z.nullable(z.number()).optional(),
  average_resolution_time_hours: z.nullable(z.number()).optional(),
  closed_tickets: z.number().int(),
  daily_ticket_trends: z.array(DailyCount$inboundSchema),
  in_progress_tickets: z.number().int(),
  open_tickets: z.number().int(),
  priority_distribution: z.array(PriorityCount$inboundSchema),
  resolved_tickets: z.number().int(),
  status_distribution: z.array(StatusCount$inboundSchema),
  tickets_created_this_month: z.number().int(),
  tickets_created_this_week: z.number().int(),
  tickets_created_today: z.number().int(),
  total_tickets: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "average_first_response_time_hours": "averageFirstResponseTimeHours",
    "average_resolution_time_hours": "averageResolutionTimeHours",
    "closed_tickets": "closedTickets",
    "daily_ticket_trends": "dailyTicketTrends",
    "in_progress_tickets": "inProgressTickets",
    "open_tickets": "openTickets",
    "priority_distribution": "priorityDistribution",
    "resolved_tickets": "resolvedTickets",
    "status_distribution": "statusDistribution",
    "tickets_created_this_month": "ticketsCreatedThisMonth",
    "tickets_created_this_week": "ticketsCreatedThisWeek",
    "tickets_created_today": "ticketsCreatedToday",
    "total_tickets": "totalTickets",
  });
});

/** @internal */
export type TicketAnalytics$Outbound = {
  average_first_response_time_hours?: number | null | undefined;
  average_resolution_time_hours?: number | null | undefined;
  closed_tickets: number;
  daily_ticket_trends: Array<DailyCount$Outbound>;
  in_progress_tickets: number;
  open_tickets: number;
  priority_distribution: Array<PriorityCount$Outbound>;
  resolved_tickets: number;
  status_distribution: Array<StatusCount$Outbound>;
  tickets_created_this_month: number;
  tickets_created_this_week: number;
  tickets_created_today: number;
  total_tickets: number;
};

/** @internal */
export const TicketAnalytics$outboundSchema: z.ZodType<
  TicketAnalytics$Outbound,
  z.ZodTypeDef,
  TicketAnalytics
> = z.object({
  averageFirstResponseTimeHours: z.nullable(z.number()).optional(),
  averageResolutionTimeHours: z.nullable(z.number()).optional(),
  closedTickets: z.number().int(),
  dailyTicketTrends: z.array(DailyCount$outboundSchema),
  inProgressTickets: z.number().int(),
  openTickets: z.number().int(),
  priorityDistribution: z.array(PriorityCount$outboundSchema),
  resolvedTickets: z.number().int(),
  statusDistribution: z.array(StatusCount$outboundSchema),
  ticketsCreatedThisMonth: z.number().int(),
  ticketsCreatedThisWeek: z.number().int(),
  ticketsCreatedToday: z.number().int(),
  totalTickets: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    averageFirstResponseTimeHours: "average_first_response_time_hours",
    averageResolutionTimeHours: "average_resolution_time_hours",
    closedTickets: "closed_tickets",
    dailyTicketTrends: "daily_ticket_trends",
    inProgressTickets: "in_progress_tickets",
    openTickets: "open_tickets",
    priorityDistribution: "priority_distribution",
    resolvedTickets: "resolved_tickets",
    statusDistribution: "status_distribution",
    ticketsCreatedThisMonth: "tickets_created_this_month",
    ticketsCreatedThisWeek: "tickets_created_this_week",
    ticketsCreatedToday: "tickets_created_today",
    totalTickets: "total_tickets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketAnalytics$ {
  /** @deprecated use `TicketAnalytics$inboundSchema` instead. */
  export const inboundSchema = TicketAnalytics$inboundSchema;
  /** @deprecated use `TicketAnalytics$outboundSchema` instead. */
  export const outboundSchema = TicketAnalytics$outboundSchema;
  /** @deprecated use `TicketAnalytics$Outbound` instead. */
  export type Outbound = TicketAnalytics$Outbound;
}

export function ticketAnalyticsToJSON(
  ticketAnalytics: TicketAnalytics,
): string {
  return JSON.stringify(TicketAnalytics$outboundSchema.parse(ticketAnalytics));
}

export function ticketAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<TicketAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketAnalytics' from JSON`,
  );
}
