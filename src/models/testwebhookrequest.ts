/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TestWebhookRequest = {
  eventType: string;
  testData?: any | undefined;
};

/** @internal */
export const TestWebhookRequest$inboundSchema: z.ZodType<
  TestWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_type: z.string(),
  test_data: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
    "test_data": "testData",
  });
});

/** @internal */
export type TestWebhookRequest$Outbound = {
  event_type: string;
  test_data?: any | undefined;
};

/** @internal */
export const TestWebhookRequest$outboundSchema: z.ZodType<
  TestWebhookRequest$Outbound,
  z.ZodTypeDef,
  TestWebhookRequest
> = z.object({
  eventType: z.string(),
  testData: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
    testData: "test_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestWebhookRequest$ {
  /** @deprecated use `TestWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = TestWebhookRequest$inboundSchema;
  /** @deprecated use `TestWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = TestWebhookRequest$outboundSchema;
  /** @deprecated use `TestWebhookRequest$Outbound` instead. */
  export type Outbound = TestWebhookRequest$Outbound;
}

export function testWebhookRequestToJSON(
  testWebhookRequest: TestWebhookRequest,
): string {
  return JSON.stringify(
    TestWebhookRequest$outboundSchema.parse(testWebhookRequest),
  );
}

export function testWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestWebhookRequest' from JSON`,
  );
}
