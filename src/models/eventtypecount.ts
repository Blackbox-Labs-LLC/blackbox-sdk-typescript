/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EventTypeCount = {
  count: number;
  eventType: string;
};

/** @internal */
export const EventTypeCount$inboundSchema: z.ZodType<
  EventTypeCount,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  event_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
  });
});

/** @internal */
export type EventTypeCount$Outbound = {
  count: number;
  event_type: string;
};

/** @internal */
export const EventTypeCount$outboundSchema: z.ZodType<
  EventTypeCount$Outbound,
  z.ZodTypeDef,
  EventTypeCount
> = z.object({
  count: z.number().int(),
  eventType: z.string(),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventTypeCount$ {
  /** @deprecated use `EventTypeCount$inboundSchema` instead. */
  export const inboundSchema = EventTypeCount$inboundSchema;
  /** @deprecated use `EventTypeCount$outboundSchema` instead. */
  export const outboundSchema = EventTypeCount$outboundSchema;
  /** @deprecated use `EventTypeCount$Outbound` instead. */
  export type Outbound = EventTypeCount$Outbound;
}

export function eventTypeCountToJSON(eventTypeCount: EventTypeCount): string {
  return JSON.stringify(EventTypeCount$outboundSchema.parse(eventTypeCount));
}

export function eventTypeCountFromJSON(
  jsonString: string,
): SafeParseResult<EventTypeCount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventTypeCount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventTypeCount' from JSON`,
  );
}
