/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseOrganizationResponseData = {
  createdAt: string;
  domain: string;
  id: string;
  name: string;
};

export type ApiResponseOrganizationResponse = {
  data?: ApiResponseOrganizationResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOrganizationResponseData$inboundSchema: z.ZodType<
  ApiResponseOrganizationResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  domain: z.string(),
  id: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type ApiResponseOrganizationResponseData$Outbound = {
  created_at: string;
  domain: string;
  id: string;
  name: string;
};

/** @internal */
export const ApiResponseOrganizationResponseData$outboundSchema: z.ZodType<
  ApiResponseOrganizationResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseOrganizationResponseData
> = z.object({
  createdAt: z.string(),
  domain: z.string(),
  id: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOrganizationResponseData$ {
  /** @deprecated use `ApiResponseOrganizationResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseOrganizationResponseData$inboundSchema;
  /** @deprecated use `ApiResponseOrganizationResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseOrganizationResponseData$outboundSchema;
  /** @deprecated use `ApiResponseOrganizationResponseData$Outbound` instead. */
  export type Outbound = ApiResponseOrganizationResponseData$Outbound;
}

export function apiResponseOrganizationResponseDataToJSON(
  apiResponseOrganizationResponseData: ApiResponseOrganizationResponseData,
): string {
  return JSON.stringify(
    ApiResponseOrganizationResponseData$outboundSchema.parse(
      apiResponseOrganizationResponseData,
    ),
  );
}

export function apiResponseOrganizationResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseOrganizationResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseOrganizationResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseOrganizationResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseOrganizationResponse$inboundSchema: z.ZodType<
  ApiResponseOrganizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseOrganizationResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseOrganizationResponse$Outbound = {
  data?: ApiResponseOrganizationResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOrganizationResponse$outboundSchema: z.ZodType<
  ApiResponseOrganizationResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseOrganizationResponse
> = z.object({
  data: z.lazy(() => ApiResponseOrganizationResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOrganizationResponse$ {
  /** @deprecated use `ApiResponseOrganizationResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseOrganizationResponse$inboundSchema;
  /** @deprecated use `ApiResponseOrganizationResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseOrganizationResponse$outboundSchema;
  /** @deprecated use `ApiResponseOrganizationResponse$Outbound` instead. */
  export type Outbound = ApiResponseOrganizationResponse$Outbound;
}

export function apiResponseOrganizationResponseToJSON(
  apiResponseOrganizationResponse: ApiResponseOrganizationResponse,
): string {
  return JSON.stringify(
    ApiResponseOrganizationResponse$outboundSchema.parse(
      apiResponseOrganizationResponse,
    ),
  );
}

export function apiResponseOrganizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseOrganizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseOrganizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseOrganizationResponse' from JSON`,
  );
}
