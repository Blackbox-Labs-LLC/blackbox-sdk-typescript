/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateWebhookRequest = {
  description?: string | null | undefined;
  enabled: boolean;
  events: Array<string>;
  headers?: { [k: string]: string } | null | undefined;
  name: string;
  secret?: string | null | undefined;
  url: string;
};

/** @internal */
export const CreateWebhookRequest$inboundSchema: z.ZodType<
  CreateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  enabled: z.boolean(),
  events: z.array(z.string()),
  headers: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
  secret: z.nullable(z.string()).optional(),
  url: z.string(),
});

/** @internal */
export type CreateWebhookRequest$Outbound = {
  description?: string | null | undefined;
  enabled: boolean;
  events: Array<string>;
  headers?: { [k: string]: string } | null | undefined;
  name: string;
  secret?: string | null | undefined;
  url: string;
};

/** @internal */
export const CreateWebhookRequest$outboundSchema: z.ZodType<
  CreateWebhookRequest$Outbound,
  z.ZodTypeDef,
  CreateWebhookRequest
> = z.object({
  description: z.nullable(z.string()).optional(),
  enabled: z.boolean(),
  events: z.array(z.string()),
  headers: z.nullable(z.record(z.string())).optional(),
  name: z.string(),
  secret: z.nullable(z.string()).optional(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookRequest$ {
  /** @deprecated use `CreateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookRequest$inboundSchema;
  /** @deprecated use `CreateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookRequest$outboundSchema;
  /** @deprecated use `CreateWebhookRequest$Outbound` instead. */
  export type Outbound = CreateWebhookRequest$Outbound;
}

export function createWebhookRequestToJSON(
  createWebhookRequest: CreateWebhookRequest,
): string {
  return JSON.stringify(
    CreateWebhookRequest$outboundSchema.parse(createWebhookRequest),
  );
}

export function createWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookRequest' from JSON`,
  );
}
