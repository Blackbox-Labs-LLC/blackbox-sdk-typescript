/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseOrganizationSettingResponseData = {
  createdAt: string;
  id: string;
  key: string;
  updatedAt: string;
  value?: any | undefined;
};

export type ApiResponseOrganizationSettingResponse = {
  data?: ApiResponseOrganizationSettingResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOrganizationSettingResponseData$inboundSchema:
  z.ZodType<ApiResponseOrganizationSettingResponseData, z.ZodTypeDef, unknown> =
    z.object({
      created_at: z.string(),
      id: z.string(),
      key: z.string(),
      updated_at: z.string(),
      value: z.any().optional(),
    }).transform((v) => {
      return remap$(v, {
        "created_at": "createdAt",
        "updated_at": "updatedAt",
      });
    });

/** @internal */
export type ApiResponseOrganizationSettingResponseData$Outbound = {
  created_at: string;
  id: string;
  key: string;
  updated_at: string;
  value?: any | undefined;
};

/** @internal */
export const ApiResponseOrganizationSettingResponseData$outboundSchema:
  z.ZodType<
    ApiResponseOrganizationSettingResponseData$Outbound,
    z.ZodTypeDef,
    ApiResponseOrganizationSettingResponseData
  > = z.object({
    createdAt: z.string(),
    id: z.string(),
    key: z.string(),
    updatedAt: z.string(),
    value: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOrganizationSettingResponseData$ {
  /** @deprecated use `ApiResponseOrganizationSettingResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseOrganizationSettingResponseData$inboundSchema;
  /** @deprecated use `ApiResponseOrganizationSettingResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseOrganizationSettingResponseData$outboundSchema;
  /** @deprecated use `ApiResponseOrganizationSettingResponseData$Outbound` instead. */
  export type Outbound = ApiResponseOrganizationSettingResponseData$Outbound;
}

export function apiResponseOrganizationSettingResponseDataToJSON(
  apiResponseOrganizationSettingResponseData:
    ApiResponseOrganizationSettingResponseData,
): string {
  return JSON.stringify(
    ApiResponseOrganizationSettingResponseData$outboundSchema.parse(
      apiResponseOrganizationSettingResponseData,
    ),
  );
}

export function apiResponseOrganizationSettingResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseOrganizationSettingResponseData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseOrganizationSettingResponseData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseOrganizationSettingResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseOrganizationSettingResponse$inboundSchema: z.ZodType<
  ApiResponseOrganizationSettingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseOrganizationSettingResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseOrganizationSettingResponse$Outbound = {
  data?: ApiResponseOrganizationSettingResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOrganizationSettingResponse$outboundSchema: z.ZodType<
  ApiResponseOrganizationSettingResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseOrganizationSettingResponse
> = z.object({
  data: z.lazy(() => ApiResponseOrganizationSettingResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOrganizationSettingResponse$ {
  /** @deprecated use `ApiResponseOrganizationSettingResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseOrganizationSettingResponse$inboundSchema;
  /** @deprecated use `ApiResponseOrganizationSettingResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseOrganizationSettingResponse$outboundSchema;
  /** @deprecated use `ApiResponseOrganizationSettingResponse$Outbound` instead. */
  export type Outbound = ApiResponseOrganizationSettingResponse$Outbound;
}

export function apiResponseOrganizationSettingResponseToJSON(
  apiResponseOrganizationSettingResponse:
    ApiResponseOrganizationSettingResponse,
): string {
  return JSON.stringify(
    ApiResponseOrganizationSettingResponse$outboundSchema.parse(
      apiResponseOrganizationSettingResponse,
    ),
  );
}

export function apiResponseOrganizationSettingResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseOrganizationSettingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseOrganizationSettingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseOrganizationSettingResponse' from JSON`,
  );
}
