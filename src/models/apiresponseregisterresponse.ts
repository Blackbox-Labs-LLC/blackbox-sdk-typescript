/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseRegisterResponseData = {
  emailVerified: boolean;
  sessionToken: string;
  twoFaEnabled: boolean;
  userId: string;
};

export type ApiResponseRegisterResponse = {
  data?: ApiResponseRegisterResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseRegisterResponseData$inboundSchema: z.ZodType<
  ApiResponseRegisterResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_verified: z.boolean(),
  session_token: z.string(),
  two_fa_enabled: z.boolean(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "email_verified": "emailVerified",
    "session_token": "sessionToken",
    "two_fa_enabled": "twoFaEnabled",
    "user_id": "userId",
  });
});

/** @internal */
export type ApiResponseRegisterResponseData$Outbound = {
  email_verified: boolean;
  session_token: string;
  two_fa_enabled: boolean;
  user_id: string;
};

/** @internal */
export const ApiResponseRegisterResponseData$outboundSchema: z.ZodType<
  ApiResponseRegisterResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseRegisterResponseData
> = z.object({
  emailVerified: z.boolean(),
  sessionToken: z.string(),
  twoFaEnabled: z.boolean(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    emailVerified: "email_verified",
    sessionToken: "session_token",
    twoFaEnabled: "two_fa_enabled",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseRegisterResponseData$ {
  /** @deprecated use `ApiResponseRegisterResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseRegisterResponseData$inboundSchema;
  /** @deprecated use `ApiResponseRegisterResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseRegisterResponseData$outboundSchema;
  /** @deprecated use `ApiResponseRegisterResponseData$Outbound` instead. */
  export type Outbound = ApiResponseRegisterResponseData$Outbound;
}

export function apiResponseRegisterResponseDataToJSON(
  apiResponseRegisterResponseData: ApiResponseRegisterResponseData,
): string {
  return JSON.stringify(
    ApiResponseRegisterResponseData$outboundSchema.parse(
      apiResponseRegisterResponseData,
    ),
  );
}

export function apiResponseRegisterResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseRegisterResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseRegisterResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseRegisterResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseRegisterResponse$inboundSchema: z.ZodType<
  ApiResponseRegisterResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseRegisterResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseRegisterResponse$Outbound = {
  data?: ApiResponseRegisterResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseRegisterResponse$outboundSchema: z.ZodType<
  ApiResponseRegisterResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseRegisterResponse
> = z.object({
  data: z.lazy(() => ApiResponseRegisterResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseRegisterResponse$ {
  /** @deprecated use `ApiResponseRegisterResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseRegisterResponse$inboundSchema;
  /** @deprecated use `ApiResponseRegisterResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseRegisterResponse$outboundSchema;
  /** @deprecated use `ApiResponseRegisterResponse$Outbound` instead. */
  export type Outbound = ApiResponseRegisterResponse$Outbound;
}

export function apiResponseRegisterResponseToJSON(
  apiResponseRegisterResponse: ApiResponseRegisterResponse,
): string {
  return JSON.stringify(
    ApiResponseRegisterResponse$outboundSchema.parse(
      apiResponseRegisterResponse,
    ),
  );
}

export function apiResponseRegisterResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseRegisterResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseRegisterResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseRegisterResponse' from JSON`,
  );
}
