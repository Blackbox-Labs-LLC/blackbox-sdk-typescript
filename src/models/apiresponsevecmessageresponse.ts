/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecMessageResponseData = {
  attachments?: any | undefined;
  channel: string;
  content: string;
  id: string;
  senderId: string;
  senderName: string;
  sentAt: string;
  ticketId: string;
};

export type ApiResponseVecMessageResponse = {
  data?: Array<ApiResponseVecMessageResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecMessageResponseData$inboundSchema: z.ZodType<
  ApiResponseVecMessageResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.any().optional(),
  channel: z.string(),
  content: z.string(),
  id: z.string(),
  sender_id: z.string(),
  sender_name: z.string(),
  sent_at: z.string(),
  ticket_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "sender_id": "senderId",
    "sender_name": "senderName",
    "sent_at": "sentAt",
    "ticket_id": "ticketId",
  });
});

/** @internal */
export type ApiResponseVecMessageResponseData$Outbound = {
  attachments?: any | undefined;
  channel: string;
  content: string;
  id: string;
  sender_id: string;
  sender_name: string;
  sent_at: string;
  ticket_id: string;
};

/** @internal */
export const ApiResponseVecMessageResponseData$outboundSchema: z.ZodType<
  ApiResponseVecMessageResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecMessageResponseData
> = z.object({
  attachments: z.any().optional(),
  channel: z.string(),
  content: z.string(),
  id: z.string(),
  senderId: z.string(),
  senderName: z.string(),
  sentAt: z.string(),
  ticketId: z.string(),
}).transform((v) => {
  return remap$(v, {
    senderId: "sender_id",
    senderName: "sender_name",
    sentAt: "sent_at",
    ticketId: "ticket_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecMessageResponseData$ {
  /** @deprecated use `ApiResponseVecMessageResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecMessageResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecMessageResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecMessageResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecMessageResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecMessageResponseData$Outbound;
}

export function apiResponseVecMessageResponseDataToJSON(
  apiResponseVecMessageResponseData: ApiResponseVecMessageResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecMessageResponseData$outboundSchema.parse(
      apiResponseVecMessageResponseData,
    ),
  );
}

export function apiResponseVecMessageResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecMessageResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecMessageResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecMessageResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecMessageResponse$inboundSchema: z.ZodType<
  ApiResponseVecMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecMessageResponseData$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecMessageResponse$Outbound = {
  data?: Array<ApiResponseVecMessageResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecMessageResponse$outboundSchema: z.ZodType<
  ApiResponseVecMessageResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecMessageResponse
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecMessageResponseData$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecMessageResponse$ {
  /** @deprecated use `ApiResponseVecMessageResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecMessageResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecMessageResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecMessageResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecMessageResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecMessageResponse$Outbound;
}

export function apiResponseVecMessageResponseToJSON(
  apiResponseVecMessageResponse: ApiResponseVecMessageResponse,
): string {
  return JSON.stringify(
    ApiResponseVecMessageResponse$outboundSchema.parse(
      apiResponseVecMessageResponse,
    ),
  );
}

export function apiResponseVecMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecMessageResponse' from JSON`,
  );
}
