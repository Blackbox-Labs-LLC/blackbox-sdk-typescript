/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SurveyResponse = {
  comment?: string | null | undefined;
  createdAt: string;
  id: string;
  organizationId: string;
  score: number;
  ticketId: string;
  ticketSubject?: string | null | undefined;
  userId: string;
  userName: string;
};

/** @internal */
export const SurveyResponse$inboundSchema: z.ZodType<
  SurveyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
  created_at: z.string(),
  id: z.string(),
  organization_id: z.string(),
  score: z.number().int(),
  ticket_id: z.string(),
  ticket_subject: z.nullable(z.string()).optional(),
  user_id: z.string(),
  user_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "ticket_id": "ticketId",
    "ticket_subject": "ticketSubject",
    "user_id": "userId",
    "user_name": "userName",
  });
});

/** @internal */
export type SurveyResponse$Outbound = {
  comment?: string | null | undefined;
  created_at: string;
  id: string;
  organization_id: string;
  score: number;
  ticket_id: string;
  ticket_subject?: string | null | undefined;
  user_id: string;
  user_name: string;
};

/** @internal */
export const SurveyResponse$outboundSchema: z.ZodType<
  SurveyResponse$Outbound,
  z.ZodTypeDef,
  SurveyResponse
> = z.object({
  comment: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  id: z.string(),
  organizationId: z.string(),
  score: z.number().int(),
  ticketId: z.string(),
  ticketSubject: z.nullable(z.string()).optional(),
  userId: z.string(),
  userName: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    ticketId: "ticket_id",
    ticketSubject: "ticket_subject",
    userId: "user_id",
    userName: "user_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SurveyResponse$ {
  /** @deprecated use `SurveyResponse$inboundSchema` instead. */
  export const inboundSchema = SurveyResponse$inboundSchema;
  /** @deprecated use `SurveyResponse$outboundSchema` instead. */
  export const outboundSchema = SurveyResponse$outboundSchema;
  /** @deprecated use `SurveyResponse$Outbound` instead. */
  export type Outbound = SurveyResponse$Outbound;
}

export function surveyResponseToJSON(surveyResponse: SurveyResponse): string {
  return JSON.stringify(SurveyResponse$outboundSchema.parse(surveyResponse));
}

export function surveyResponseFromJSON(
  jsonString: string,
): SafeParseResult<SurveyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SurveyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SurveyResponse' from JSON`,
  );
}
