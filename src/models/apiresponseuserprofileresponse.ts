/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  UserOrgMembership,
  UserOrgMembership$inboundSchema,
  UserOrgMembership$Outbound,
  UserOrgMembership$outboundSchema,
} from "./userorgmembership.js";

export type ApiResponseUserProfileResponseData = {
  createdAt: string;
  email: string;
  emailVerified: boolean;
  id: string;
  name: string;
  organizations: Array<UserOrgMembership>;
  twoFaEnabled: boolean;
};

export type ApiResponseUserProfileResponse = {
  data?: ApiResponseUserProfileResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseUserProfileResponseData$inboundSchema: z.ZodType<
  ApiResponseUserProfileResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  email: z.string(),
  email_verified: z.boolean(),
  id: z.string(),
  name: z.string(),
  organizations: z.array(UserOrgMembership$inboundSchema),
  two_fa_enabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "email_verified": "emailVerified",
    "two_fa_enabled": "twoFaEnabled",
  });
});

/** @internal */
export type ApiResponseUserProfileResponseData$Outbound = {
  created_at: string;
  email: string;
  email_verified: boolean;
  id: string;
  name: string;
  organizations: Array<UserOrgMembership$Outbound>;
  two_fa_enabled: boolean;
};

/** @internal */
export const ApiResponseUserProfileResponseData$outboundSchema: z.ZodType<
  ApiResponseUserProfileResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseUserProfileResponseData
> = z.object({
  createdAt: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  id: z.string(),
  name: z.string(),
  organizations: z.array(UserOrgMembership$outboundSchema),
  twoFaEnabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    emailVerified: "email_verified",
    twoFaEnabled: "two_fa_enabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseUserProfileResponseData$ {
  /** @deprecated use `ApiResponseUserProfileResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseUserProfileResponseData$inboundSchema;
  /** @deprecated use `ApiResponseUserProfileResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseUserProfileResponseData$outboundSchema;
  /** @deprecated use `ApiResponseUserProfileResponseData$Outbound` instead. */
  export type Outbound = ApiResponseUserProfileResponseData$Outbound;
}

export function apiResponseUserProfileResponseDataToJSON(
  apiResponseUserProfileResponseData: ApiResponseUserProfileResponseData,
): string {
  return JSON.stringify(
    ApiResponseUserProfileResponseData$outboundSchema.parse(
      apiResponseUserProfileResponseData,
    ),
  );
}

export function apiResponseUserProfileResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseUserProfileResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseUserProfileResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseUserProfileResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseUserProfileResponse$inboundSchema: z.ZodType<
  ApiResponseUserProfileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseUserProfileResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseUserProfileResponse$Outbound = {
  data?: ApiResponseUserProfileResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseUserProfileResponse$outboundSchema: z.ZodType<
  ApiResponseUserProfileResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseUserProfileResponse
> = z.object({
  data: z.lazy(() => ApiResponseUserProfileResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseUserProfileResponse$ {
  /** @deprecated use `ApiResponseUserProfileResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseUserProfileResponse$inboundSchema;
  /** @deprecated use `ApiResponseUserProfileResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseUserProfileResponse$outboundSchema;
  /** @deprecated use `ApiResponseUserProfileResponse$Outbound` instead. */
  export type Outbound = ApiResponseUserProfileResponse$Outbound;
}

export function apiResponseUserProfileResponseToJSON(
  apiResponseUserProfileResponse: ApiResponseUserProfileResponse,
): string {
  return JSON.stringify(
    ApiResponseUserProfileResponse$outboundSchema.parse(
      apiResponseUserProfileResponse,
    ),
  );
}

export function apiResponseUserProfileResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseUserProfileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseUserProfileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseUserProfileResponse' from JSON`,
  );
}
