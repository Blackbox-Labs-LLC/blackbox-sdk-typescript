/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AgentPerformance = {
  agentId: string;
  agentName: string;
  averageResolutionTimeHours?: number | null | undefined;
  averageResponseTimeHours?: number | null | undefined;
  messagesSent: number;
  resolutionRate: number;
  ticketsHandled: number;
  ticketsResolved: number;
};

/** @internal */
export const AgentPerformance$inboundSchema: z.ZodType<
  AgentPerformance,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.string(),
  agent_name: z.string(),
  average_resolution_time_hours: z.nullable(z.number()).optional(),
  average_response_time_hours: z.nullable(z.number()).optional(),
  messages_sent: z.number().int(),
  resolution_rate: z.number(),
  tickets_handled: z.number().int(),
  tickets_resolved: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
    "agent_name": "agentName",
    "average_resolution_time_hours": "averageResolutionTimeHours",
    "average_response_time_hours": "averageResponseTimeHours",
    "messages_sent": "messagesSent",
    "resolution_rate": "resolutionRate",
    "tickets_handled": "ticketsHandled",
    "tickets_resolved": "ticketsResolved",
  });
});

/** @internal */
export type AgentPerformance$Outbound = {
  agent_id: string;
  agent_name: string;
  average_resolution_time_hours?: number | null | undefined;
  average_response_time_hours?: number | null | undefined;
  messages_sent: number;
  resolution_rate: number;
  tickets_handled: number;
  tickets_resolved: number;
};

/** @internal */
export const AgentPerformance$outboundSchema: z.ZodType<
  AgentPerformance$Outbound,
  z.ZodTypeDef,
  AgentPerformance
> = z.object({
  agentId: z.string(),
  agentName: z.string(),
  averageResolutionTimeHours: z.nullable(z.number()).optional(),
  averageResponseTimeHours: z.nullable(z.number()).optional(),
  messagesSent: z.number().int(),
  resolutionRate: z.number(),
  ticketsHandled: z.number().int(),
  ticketsResolved: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
    agentName: "agent_name",
    averageResolutionTimeHours: "average_resolution_time_hours",
    averageResponseTimeHours: "average_response_time_hours",
    messagesSent: "messages_sent",
    resolutionRate: "resolution_rate",
    ticketsHandled: "tickets_handled",
    ticketsResolved: "tickets_resolved",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentPerformance$ {
  /** @deprecated use `AgentPerformance$inboundSchema` instead. */
  export const inboundSchema = AgentPerformance$inboundSchema;
  /** @deprecated use `AgentPerformance$outboundSchema` instead. */
  export const outboundSchema = AgentPerformance$outboundSchema;
  /** @deprecated use `AgentPerformance$Outbound` instead. */
  export type Outbound = AgentPerformance$Outbound;
}

export function agentPerformanceToJSON(
  agentPerformance: AgentPerformance,
): string {
  return JSON.stringify(
    AgentPerformance$outboundSchema.parse(agentPerformance),
  );
}

export function agentPerformanceFromJSON(
  jsonString: string,
): SafeParseResult<AgentPerformance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentPerformance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentPerformance' from JSON`,
  );
}
