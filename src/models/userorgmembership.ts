/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UserOrgMembership = {
  joinedAt: string;
  organizationDomain: string;
  organizationId: string;
  organizationName: string;
  status: string;
};

/** @internal */
export const UserOrgMembership$inboundSchema: z.ZodType<
  UserOrgMembership,
  z.ZodTypeDef,
  unknown
> = z.object({
  joined_at: z.string(),
  organization_domain: z.string(),
  organization_id: z.string(),
  organization_name: z.string(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "joined_at": "joinedAt",
    "organization_domain": "organizationDomain",
    "organization_id": "organizationId",
    "organization_name": "organizationName",
  });
});

/** @internal */
export type UserOrgMembership$Outbound = {
  joined_at: string;
  organization_domain: string;
  organization_id: string;
  organization_name: string;
  status: string;
};

/** @internal */
export const UserOrgMembership$outboundSchema: z.ZodType<
  UserOrgMembership$Outbound,
  z.ZodTypeDef,
  UserOrgMembership
> = z.object({
  joinedAt: z.string(),
  organizationDomain: z.string(),
  organizationId: z.string(),
  organizationName: z.string(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    joinedAt: "joined_at",
    organizationDomain: "organization_domain",
    organizationId: "organization_id",
    organizationName: "organization_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOrgMembership$ {
  /** @deprecated use `UserOrgMembership$inboundSchema` instead. */
  export const inboundSchema = UserOrgMembership$inboundSchema;
  /** @deprecated use `UserOrgMembership$outboundSchema` instead. */
  export const outboundSchema = UserOrgMembership$outboundSchema;
  /** @deprecated use `UserOrgMembership$Outbound` instead. */
  export type Outbound = UserOrgMembership$Outbound;
}

export function userOrgMembershipToJSON(
  userOrgMembership: UserOrgMembership,
): string {
  return JSON.stringify(
    UserOrgMembership$outboundSchema.parse(userOrgMembership),
  );
}

export function userOrgMembershipFromJSON(
  jsonString: string,
): SafeParseResult<UserOrgMembership, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOrgMembership$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOrgMembership' from JSON`,
  );
}
