/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AttachmentResponse = {
  contentType: string;
  downloadUrl: string;
  fileSize: number;
  filename: string;
  id: string;
  originalFilename: string;
  uploadedAt: string;
};

/** @internal */
export const AttachmentResponse$inboundSchema: z.ZodType<
  AttachmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  content_type: z.string(),
  download_url: z.string(),
  file_size: z.number().int(),
  filename: z.string(),
  id: z.string(),
  original_filename: z.string(),
  uploaded_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "content_type": "contentType",
    "download_url": "downloadUrl",
    "file_size": "fileSize",
    "original_filename": "originalFilename",
    "uploaded_at": "uploadedAt",
  });
});

/** @internal */
export type AttachmentResponse$Outbound = {
  content_type: string;
  download_url: string;
  file_size: number;
  filename: string;
  id: string;
  original_filename: string;
  uploaded_at: string;
};

/** @internal */
export const AttachmentResponse$outboundSchema: z.ZodType<
  AttachmentResponse$Outbound,
  z.ZodTypeDef,
  AttachmentResponse
> = z.object({
  contentType: z.string(),
  downloadUrl: z.string(),
  fileSize: z.number().int(),
  filename: z.string(),
  id: z.string(),
  originalFilename: z.string(),
  uploadedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    contentType: "content_type",
    downloadUrl: "download_url",
    fileSize: "file_size",
    originalFilename: "original_filename",
    uploadedAt: "uploaded_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentResponse$ {
  /** @deprecated use `AttachmentResponse$inboundSchema` instead. */
  export const inboundSchema = AttachmentResponse$inboundSchema;
  /** @deprecated use `AttachmentResponse$outboundSchema` instead. */
  export const outboundSchema = AttachmentResponse$outboundSchema;
  /** @deprecated use `AttachmentResponse$Outbound` instead. */
  export type Outbound = AttachmentResponse$Outbound;
}

export function attachmentResponseToJSON(
  attachmentResponse: AttachmentResponse,
): string {
  return JSON.stringify(
    AttachmentResponse$outboundSchema.parse(attachmentResponse),
  );
}

export function attachmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentResponse' from JSON`,
  );
}
