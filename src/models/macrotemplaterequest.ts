/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MacroTemplateRequest = {
  macroId: string;
  variables: { [k: string]: string };
};

/** @internal */
export const MacroTemplateRequest$inboundSchema: z.ZodType<
  MacroTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  macro_id: z.string(),
  variables: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    "macro_id": "macroId",
  });
});

/** @internal */
export type MacroTemplateRequest$Outbound = {
  macro_id: string;
  variables: { [k: string]: string };
};

/** @internal */
export const MacroTemplateRequest$outboundSchema: z.ZodType<
  MacroTemplateRequest$Outbound,
  z.ZodTypeDef,
  MacroTemplateRequest
> = z.object({
  macroId: z.string(),
  variables: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    macroId: "macro_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MacroTemplateRequest$ {
  /** @deprecated use `MacroTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = MacroTemplateRequest$inboundSchema;
  /** @deprecated use `MacroTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = MacroTemplateRequest$outboundSchema;
  /** @deprecated use `MacroTemplateRequest$Outbound` instead. */
  export type Outbound = MacroTemplateRequest$Outbound;
}

export function macroTemplateRequestToJSON(
  macroTemplateRequest: MacroTemplateRequest,
): string {
  return JSON.stringify(
    MacroTemplateRequest$outboundSchema.parse(macroTemplateRequest),
  );
}

export function macroTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<MacroTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MacroTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MacroTemplateRequest' from JSON`,
  );
}
