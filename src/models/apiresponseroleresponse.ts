/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseRoleResponseData = {
  color: string;
  createdAt: string;
  id: string;
  managed: boolean;
  name: string;
  organizationId: string;
  permissions: number;
  position: number;
  updatedAt: string;
};

export type ApiResponseRoleResponse = {
  data?: ApiResponseRoleResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseRoleResponseData$inboundSchema: z.ZodType<
  ApiResponseRoleResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: z.string(),
  created_at: z.string(),
  id: z.string(),
  managed: z.boolean(),
  name: z.string(),
  organization_id: z.string(),
  permissions: z.number().int(),
  position: z.number().int(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseRoleResponseData$Outbound = {
  color: string;
  created_at: string;
  id: string;
  managed: boolean;
  name: string;
  organization_id: string;
  permissions: number;
  position: number;
  updated_at: string;
};

/** @internal */
export const ApiResponseRoleResponseData$outboundSchema: z.ZodType<
  ApiResponseRoleResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseRoleResponseData
> = z.object({
  color: z.string(),
  createdAt: z.string(),
  id: z.string(),
  managed: z.boolean(),
  name: z.string(),
  organizationId: z.string(),
  permissions: z.number().int(),
  position: z.number().int(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseRoleResponseData$ {
  /** @deprecated use `ApiResponseRoleResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseRoleResponseData$inboundSchema;
  /** @deprecated use `ApiResponseRoleResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseRoleResponseData$outboundSchema;
  /** @deprecated use `ApiResponseRoleResponseData$Outbound` instead. */
  export type Outbound = ApiResponseRoleResponseData$Outbound;
}

export function apiResponseRoleResponseDataToJSON(
  apiResponseRoleResponseData: ApiResponseRoleResponseData,
): string {
  return JSON.stringify(
    ApiResponseRoleResponseData$outboundSchema.parse(
      apiResponseRoleResponseData,
    ),
  );
}

export function apiResponseRoleResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseRoleResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseRoleResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseRoleResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseRoleResponse$inboundSchema: z.ZodType<
  ApiResponseRoleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseRoleResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseRoleResponse$Outbound = {
  data?: ApiResponseRoleResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseRoleResponse$outboundSchema: z.ZodType<
  ApiResponseRoleResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseRoleResponse
> = z.object({
  data: z.lazy(() => ApiResponseRoleResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseRoleResponse$ {
  /** @deprecated use `ApiResponseRoleResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseRoleResponse$inboundSchema;
  /** @deprecated use `ApiResponseRoleResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseRoleResponse$outboundSchema;
  /** @deprecated use `ApiResponseRoleResponse$Outbound` instead. */
  export type Outbound = ApiResponseRoleResponse$Outbound;
}

export function apiResponseRoleResponseToJSON(
  apiResponseRoleResponse: ApiResponseRoleResponse,
): string {
  return JSON.stringify(
    ApiResponseRoleResponse$outboundSchema.parse(apiResponseRoleResponse),
  );
}

export function apiResponseRoleResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseRoleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseRoleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseRoleResponse' from JSON`,
  );
}
