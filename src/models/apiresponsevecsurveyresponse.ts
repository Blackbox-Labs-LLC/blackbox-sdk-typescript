/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecSurveyResponseData = {
  comment?: string | null | undefined;
  createdAt: string;
  id: string;
  organizationId: string;
  score: number;
  ticketId: string;
  ticketSubject?: string | null | undefined;
  userId: string;
  userName: string;
};

export type ApiResponseVecSurveyResponse = {
  data?: Array<ApiResponseVecSurveyResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecSurveyResponseData$inboundSchema: z.ZodType<
  ApiResponseVecSurveyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
  created_at: z.string(),
  id: z.string(),
  organization_id: z.string(),
  score: z.number().int(),
  ticket_id: z.string(),
  ticket_subject: z.nullable(z.string()).optional(),
  user_id: z.string(),
  user_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "ticket_id": "ticketId",
    "ticket_subject": "ticketSubject",
    "user_id": "userId",
    "user_name": "userName",
  });
});

/** @internal */
export type ApiResponseVecSurveyResponseData$Outbound = {
  comment?: string | null | undefined;
  created_at: string;
  id: string;
  organization_id: string;
  score: number;
  ticket_id: string;
  ticket_subject?: string | null | undefined;
  user_id: string;
  user_name: string;
};

/** @internal */
export const ApiResponseVecSurveyResponseData$outboundSchema: z.ZodType<
  ApiResponseVecSurveyResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecSurveyResponseData
> = z.object({
  comment: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  id: z.string(),
  organizationId: z.string(),
  score: z.number().int(),
  ticketId: z.string(),
  ticketSubject: z.nullable(z.string()).optional(),
  userId: z.string(),
  userName: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    ticketId: "ticket_id",
    ticketSubject: "ticket_subject",
    userId: "user_id",
    userName: "user_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecSurveyResponseData$ {
  /** @deprecated use `ApiResponseVecSurveyResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecSurveyResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecSurveyResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecSurveyResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecSurveyResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecSurveyResponseData$Outbound;
}

export function apiResponseVecSurveyResponseDataToJSON(
  apiResponseVecSurveyResponseData: ApiResponseVecSurveyResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecSurveyResponseData$outboundSchema.parse(
      apiResponseVecSurveyResponseData,
    ),
  );
}

export function apiResponseVecSurveyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecSurveyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecSurveyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecSurveyResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecSurveyResponse$inboundSchema: z.ZodType<
  ApiResponseVecSurveyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecSurveyResponseData$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecSurveyResponse$Outbound = {
  data?: Array<ApiResponseVecSurveyResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecSurveyResponse$outboundSchema: z.ZodType<
  ApiResponseVecSurveyResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecSurveyResponse
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecSurveyResponseData$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecSurveyResponse$ {
  /** @deprecated use `ApiResponseVecSurveyResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecSurveyResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecSurveyResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecSurveyResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecSurveyResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecSurveyResponse$Outbound;
}

export function apiResponseVecSurveyResponseToJSON(
  apiResponseVecSurveyResponse: ApiResponseVecSurveyResponse,
): string {
  return JSON.stringify(
    ApiResponseVecSurveyResponse$outboundSchema.parse(
      apiResponseVecSurveyResponse,
    ),
  );
}

export function apiResponseVecSurveyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecSurveyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecSurveyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecSurveyResponse' from JSON`,
  );
}
