/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AutomationAction,
  AutomationAction$inboundSchema,
  AutomationAction$Outbound,
  AutomationAction$outboundSchema,
} from "./automationaction.js";
import {
  AutomationConditions,
  AutomationConditions$inboundSchema,
  AutomationConditions$Outbound,
  AutomationConditions$outboundSchema,
} from "./automationconditions.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecAutomationRuleResponseData = {
  actions: Array<AutomationAction>;
  conditions: AutomationConditions;
  createdAt: string;
  description: string;
  enabled: boolean;
  executionCount: number;
  id: string;
  lastExecuted?: string | null | undefined;
  name: string;
  organizationId: string;
  trigger: string;
  updatedAt: string;
};

export type ApiResponseVecAutomationRuleResponse = {
  data?: Array<ApiResponseVecAutomationRuleResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecAutomationRuleResponseData$inboundSchema: z.ZodType<
  ApiResponseVecAutomationRuleResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  actions: z.array(AutomationAction$inboundSchema),
  conditions: AutomationConditions$inboundSchema,
  created_at: z.string(),
  description: z.string(),
  enabled: z.boolean(),
  execution_count: z.number().int(),
  id: z.string(),
  last_executed: z.nullable(z.string()).optional(),
  name: z.string(),
  organization_id: z.string(),
  trigger: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "execution_count": "executionCount",
    "last_executed": "lastExecuted",
    "organization_id": "organizationId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseVecAutomationRuleResponseData$Outbound = {
  actions: Array<AutomationAction$Outbound>;
  conditions: AutomationConditions$Outbound;
  created_at: string;
  description: string;
  enabled: boolean;
  execution_count: number;
  id: string;
  last_executed?: string | null | undefined;
  name: string;
  organization_id: string;
  trigger: string;
  updated_at: string;
};

/** @internal */
export const ApiResponseVecAutomationRuleResponseData$outboundSchema: z.ZodType<
  ApiResponseVecAutomationRuleResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecAutomationRuleResponseData
> = z.object({
  actions: z.array(AutomationAction$outboundSchema),
  conditions: AutomationConditions$outboundSchema,
  createdAt: z.string(),
  description: z.string(),
  enabled: z.boolean(),
  executionCount: z.number().int(),
  id: z.string(),
  lastExecuted: z.nullable(z.string()).optional(),
  name: z.string(),
  organizationId: z.string(),
  trigger: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    executionCount: "execution_count",
    lastExecuted: "last_executed",
    organizationId: "organization_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecAutomationRuleResponseData$ {
  /** @deprecated use `ApiResponseVecAutomationRuleResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecAutomationRuleResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecAutomationRuleResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecAutomationRuleResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecAutomationRuleResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecAutomationRuleResponseData$Outbound;
}

export function apiResponseVecAutomationRuleResponseDataToJSON(
  apiResponseVecAutomationRuleResponseData:
    ApiResponseVecAutomationRuleResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecAutomationRuleResponseData$outboundSchema.parse(
      apiResponseVecAutomationRuleResponseData,
    ),
  );
}

export function apiResponseVecAutomationRuleResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseVecAutomationRuleResponseData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecAutomationRuleResponseData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseVecAutomationRuleResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecAutomationRuleResponse$inboundSchema: z.ZodType<
  ApiResponseVecAutomationRuleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecAutomationRuleResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecAutomationRuleResponse$Outbound = {
  data?: Array<ApiResponseVecAutomationRuleResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecAutomationRuleResponse$outboundSchema: z.ZodType<
  ApiResponseVecAutomationRuleResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecAutomationRuleResponse
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecAutomationRuleResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecAutomationRuleResponse$ {
  /** @deprecated use `ApiResponseVecAutomationRuleResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecAutomationRuleResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecAutomationRuleResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecAutomationRuleResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecAutomationRuleResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecAutomationRuleResponse$Outbound;
}

export function apiResponseVecAutomationRuleResponseToJSON(
  apiResponseVecAutomationRuleResponse: ApiResponseVecAutomationRuleResponse,
): string {
  return JSON.stringify(
    ApiResponseVecAutomationRuleResponse$outboundSchema.parse(
      apiResponseVecAutomationRuleResponse,
    ),
  );
}

export function apiResponseVecAutomationRuleResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecAutomationRuleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecAutomationRuleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecAutomationRuleResponse' from JSON`,
  );
}
