/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type IssueCategory = {
  averageScore: number;
  category: string;
  count: number;
};

/** @internal */
export const IssueCategory$inboundSchema: z.ZodType<
  IssueCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  average_score: z.number(),
  category: z.string(),
  count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "average_score": "averageScore",
  });
});

/** @internal */
export type IssueCategory$Outbound = {
  average_score: number;
  category: string;
  count: number;
};

/** @internal */
export const IssueCategory$outboundSchema: z.ZodType<
  IssueCategory$Outbound,
  z.ZodTypeDef,
  IssueCategory
> = z.object({
  averageScore: z.number(),
  category: z.string(),
  count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    averageScore: "average_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueCategory$ {
  /** @deprecated use `IssueCategory$inboundSchema` instead. */
  export const inboundSchema = IssueCategory$inboundSchema;
  /** @deprecated use `IssueCategory$outboundSchema` instead. */
  export const outboundSchema = IssueCategory$outboundSchema;
  /** @deprecated use `IssueCategory$Outbound` instead. */
  export type Outbound = IssueCategory$Outbound;
}

export function issueCategoryToJSON(issueCategory: IssueCategory): string {
  return JSON.stringify(IssueCategory$outboundSchema.parse(issueCategory));
}

export function issueCategoryFromJSON(
  jsonString: string,
): SafeParseResult<IssueCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IssueCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IssueCategory' from JSON`,
  );
}
