/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UserEventCount = {
  count: number;
  userId: string;
  userName: string;
};

/** @internal */
export const UserEventCount$inboundSchema: z.ZodType<
  UserEventCount,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  user_id: z.string(),
  user_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "user_name": "userName",
  });
});

/** @internal */
export type UserEventCount$Outbound = {
  count: number;
  user_id: string;
  user_name: string;
};

/** @internal */
export const UserEventCount$outboundSchema: z.ZodType<
  UserEventCount$Outbound,
  z.ZodTypeDef,
  UserEventCount
> = z.object({
  count: z.number().int(),
  userId: z.string(),
  userName: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    userName: "user_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserEventCount$ {
  /** @deprecated use `UserEventCount$inboundSchema` instead. */
  export const inboundSchema = UserEventCount$inboundSchema;
  /** @deprecated use `UserEventCount$outboundSchema` instead. */
  export const outboundSchema = UserEventCount$outboundSchema;
  /** @deprecated use `UserEventCount$Outbound` instead. */
  export type Outbound = UserEventCount$Outbound;
}

export function userEventCountToJSON(userEventCount: UserEventCount): string {
  return JSON.stringify(UserEventCount$outboundSchema.parse(userEventCount));
}

export function userEventCountFromJSON(
  jsonString: string,
): SafeParseResult<UserEventCount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserEventCount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserEventCount' from JSON`,
  );
}
