/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecApiKeyResponseData = {
  createdAt: string;
  expiresAt?: string | null | undefined;
  id: string;
  lastUsed?: string | null | undefined;
  name: string;
  revoked: boolean;
  scopes: Array<string>;
};

export type ApiResponseVecApiKeyResponse = {
  data?: Array<ApiResponseVecApiKeyResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecApiKeyResponseData$inboundSchema: z.ZodType<
  ApiResponseVecApiKeyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  expires_at: z.nullable(z.string()).optional(),
  id: z.string(),
  last_used: z.nullable(z.string()).optional(),
  name: z.string(),
  revoked: z.boolean(),
  scopes: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "expires_at": "expiresAt",
    "last_used": "lastUsed",
  });
});

/** @internal */
export type ApiResponseVecApiKeyResponseData$Outbound = {
  created_at: string;
  expires_at?: string | null | undefined;
  id: string;
  last_used?: string | null | undefined;
  name: string;
  revoked: boolean;
  scopes: Array<string>;
};

/** @internal */
export const ApiResponseVecApiKeyResponseData$outboundSchema: z.ZodType<
  ApiResponseVecApiKeyResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecApiKeyResponseData
> = z.object({
  createdAt: z.string(),
  expiresAt: z.nullable(z.string()).optional(),
  id: z.string(),
  lastUsed: z.nullable(z.string()).optional(),
  name: z.string(),
  revoked: z.boolean(),
  scopes: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    expiresAt: "expires_at",
    lastUsed: "last_used",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecApiKeyResponseData$ {
  /** @deprecated use `ApiResponseVecApiKeyResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecApiKeyResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecApiKeyResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecApiKeyResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecApiKeyResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecApiKeyResponseData$Outbound;
}

export function apiResponseVecApiKeyResponseDataToJSON(
  apiResponseVecApiKeyResponseData: ApiResponseVecApiKeyResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecApiKeyResponseData$outboundSchema.parse(
      apiResponseVecApiKeyResponseData,
    ),
  );
}

export function apiResponseVecApiKeyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecApiKeyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecApiKeyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecApiKeyResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecApiKeyResponse$inboundSchema: z.ZodType<
  ApiResponseVecApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecApiKeyResponseData$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecApiKeyResponse$Outbound = {
  data?: Array<ApiResponseVecApiKeyResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecApiKeyResponse$outboundSchema: z.ZodType<
  ApiResponseVecApiKeyResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecApiKeyResponse
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecApiKeyResponseData$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecApiKeyResponse$ {
  /** @deprecated use `ApiResponseVecApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecApiKeyResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecApiKeyResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecApiKeyResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecApiKeyResponse$Outbound;
}

export function apiResponseVecApiKeyResponseToJSON(
  apiResponseVecApiKeyResponse: ApiResponseVecApiKeyResponse,
): string {
  return JSON.stringify(
    ApiResponseVecApiKeyResponse$outboundSchema.parse(
      apiResponseVecApiKeyResponse,
    ),
  );
}

export function apiResponseVecApiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecApiKeyResponse' from JSON`,
  );
}
