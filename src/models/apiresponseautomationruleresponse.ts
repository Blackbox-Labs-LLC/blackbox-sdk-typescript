/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AutomationAction,
  AutomationAction$inboundSchema,
  AutomationAction$Outbound,
  AutomationAction$outboundSchema,
} from "./automationaction.js";
import {
  AutomationConditions,
  AutomationConditions$inboundSchema,
  AutomationConditions$Outbound,
  AutomationConditions$outboundSchema,
} from "./automationconditions.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseAutomationRuleResponseData = {
  actions: Array<AutomationAction>;
  conditions: AutomationConditions;
  createdAt: string;
  description: string;
  enabled: boolean;
  executionCount: number;
  id: string;
  lastExecuted?: string | null | undefined;
  name: string;
  organizationId: string;
  trigger: string;
  updatedAt: string;
};

export type ApiResponseAutomationRuleResponse = {
  data?: ApiResponseAutomationRuleResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAutomationRuleResponseData$inboundSchema: z.ZodType<
  ApiResponseAutomationRuleResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  actions: z.array(AutomationAction$inboundSchema),
  conditions: AutomationConditions$inboundSchema,
  created_at: z.string(),
  description: z.string(),
  enabled: z.boolean(),
  execution_count: z.number().int(),
  id: z.string(),
  last_executed: z.nullable(z.string()).optional(),
  name: z.string(),
  organization_id: z.string(),
  trigger: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "execution_count": "executionCount",
    "last_executed": "lastExecuted",
    "organization_id": "organizationId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseAutomationRuleResponseData$Outbound = {
  actions: Array<AutomationAction$Outbound>;
  conditions: AutomationConditions$Outbound;
  created_at: string;
  description: string;
  enabled: boolean;
  execution_count: number;
  id: string;
  last_executed?: string | null | undefined;
  name: string;
  organization_id: string;
  trigger: string;
  updated_at: string;
};

/** @internal */
export const ApiResponseAutomationRuleResponseData$outboundSchema: z.ZodType<
  ApiResponseAutomationRuleResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseAutomationRuleResponseData
> = z.object({
  actions: z.array(AutomationAction$outboundSchema),
  conditions: AutomationConditions$outboundSchema,
  createdAt: z.string(),
  description: z.string(),
  enabled: z.boolean(),
  executionCount: z.number().int(),
  id: z.string(),
  lastExecuted: z.nullable(z.string()).optional(),
  name: z.string(),
  organizationId: z.string(),
  trigger: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    executionCount: "execution_count",
    lastExecuted: "last_executed",
    organizationId: "organization_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAutomationRuleResponseData$ {
  /** @deprecated use `ApiResponseAutomationRuleResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseAutomationRuleResponseData$inboundSchema;
  /** @deprecated use `ApiResponseAutomationRuleResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseAutomationRuleResponseData$outboundSchema;
  /** @deprecated use `ApiResponseAutomationRuleResponseData$Outbound` instead. */
  export type Outbound = ApiResponseAutomationRuleResponseData$Outbound;
}

export function apiResponseAutomationRuleResponseDataToJSON(
  apiResponseAutomationRuleResponseData: ApiResponseAutomationRuleResponseData,
): string {
  return JSON.stringify(
    ApiResponseAutomationRuleResponseData$outboundSchema.parse(
      apiResponseAutomationRuleResponseData,
    ),
  );
}

export function apiResponseAutomationRuleResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAutomationRuleResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseAutomationRuleResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAutomationRuleResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseAutomationRuleResponse$inboundSchema: z.ZodType<
  ApiResponseAutomationRuleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseAutomationRuleResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseAutomationRuleResponse$Outbound = {
  data?: ApiResponseAutomationRuleResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAutomationRuleResponse$outboundSchema: z.ZodType<
  ApiResponseAutomationRuleResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseAutomationRuleResponse
> = z.object({
  data: z.lazy(() => ApiResponseAutomationRuleResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAutomationRuleResponse$ {
  /** @deprecated use `ApiResponseAutomationRuleResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseAutomationRuleResponse$inboundSchema;
  /** @deprecated use `ApiResponseAutomationRuleResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseAutomationRuleResponse$outboundSchema;
  /** @deprecated use `ApiResponseAutomationRuleResponse$Outbound` instead. */
  export type Outbound = ApiResponseAutomationRuleResponse$Outbound;
}

export function apiResponseAutomationRuleResponseToJSON(
  apiResponseAutomationRuleResponse: ApiResponseAutomationRuleResponse,
): string {
  return JSON.stringify(
    ApiResponseAutomationRuleResponse$outboundSchema.parse(
      apiResponseAutomationRuleResponse,
    ),
  );
}

export function apiResponseAutomationRuleResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAutomationRuleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseAutomationRuleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAutomationRuleResponse' from JSON`,
  );
}
