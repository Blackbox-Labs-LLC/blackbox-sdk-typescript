/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AgentSatisfactionScore = {
  agentId: string;
  agentName: string;
  averageScore: number;
  satisfactionRate: number;
  totalSurveys: number;
};

/** @internal */
export const AgentSatisfactionScore$inboundSchema: z.ZodType<
  AgentSatisfactionScore,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.string(),
  agent_name: z.string(),
  average_score: z.number(),
  satisfaction_rate: z.number(),
  total_surveys: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
    "agent_name": "agentName",
    "average_score": "averageScore",
    "satisfaction_rate": "satisfactionRate",
    "total_surveys": "totalSurveys",
  });
});

/** @internal */
export type AgentSatisfactionScore$Outbound = {
  agent_id: string;
  agent_name: string;
  average_score: number;
  satisfaction_rate: number;
  total_surveys: number;
};

/** @internal */
export const AgentSatisfactionScore$outboundSchema: z.ZodType<
  AgentSatisfactionScore$Outbound,
  z.ZodTypeDef,
  AgentSatisfactionScore
> = z.object({
  agentId: z.string(),
  agentName: z.string(),
  averageScore: z.number(),
  satisfactionRate: z.number(),
  totalSurveys: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
    agentName: "agent_name",
    averageScore: "average_score",
    satisfactionRate: "satisfaction_rate",
    totalSurveys: "total_surveys",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentSatisfactionScore$ {
  /** @deprecated use `AgentSatisfactionScore$inboundSchema` instead. */
  export const inboundSchema = AgentSatisfactionScore$inboundSchema;
  /** @deprecated use `AgentSatisfactionScore$outboundSchema` instead. */
  export const outboundSchema = AgentSatisfactionScore$outboundSchema;
  /** @deprecated use `AgentSatisfactionScore$Outbound` instead. */
  export type Outbound = AgentSatisfactionScore$Outbound;
}

export function agentSatisfactionScoreToJSON(
  agentSatisfactionScore: AgentSatisfactionScore,
): string {
  return JSON.stringify(
    AgentSatisfactionScore$outboundSchema.parse(agentSatisfactionScore),
  );
}

export function agentSatisfactionScoreFromJSON(
  jsonString: string,
): SafeParseResult<AgentSatisfactionScore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentSatisfactionScore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentSatisfactionScore' from JSON`,
  );
}
