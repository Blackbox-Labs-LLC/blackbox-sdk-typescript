/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecOrganizationSettingResponseData = {
  createdAt: string;
  id: string;
  key: string;
  updatedAt: string;
  value?: any | undefined;
};

export type ApiResponseVecOrganizationSettingResponse = {
  data?: Array<ApiResponseVecOrganizationSettingResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecOrganizationSettingResponseData$inboundSchema:
  z.ZodType<
    ApiResponseVecOrganizationSettingResponseData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    created_at: z.string(),
    id: z.string(),
    key: z.string(),
    updated_at: z.string(),
    value: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type ApiResponseVecOrganizationSettingResponseData$Outbound = {
  created_at: string;
  id: string;
  key: string;
  updated_at: string;
  value?: any | undefined;
};

/** @internal */
export const ApiResponseVecOrganizationSettingResponseData$outboundSchema:
  z.ZodType<
    ApiResponseVecOrganizationSettingResponseData$Outbound,
    z.ZodTypeDef,
    ApiResponseVecOrganizationSettingResponseData
  > = z.object({
    createdAt: z.string(),
    id: z.string(),
    key: z.string(),
    updatedAt: z.string(),
    value: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecOrganizationSettingResponseData$ {
  /** @deprecated use `ApiResponseVecOrganizationSettingResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecOrganizationSettingResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationSettingResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecOrganizationSettingResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationSettingResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecOrganizationSettingResponseData$Outbound;
}

export function apiResponseVecOrganizationSettingResponseDataToJSON(
  apiResponseVecOrganizationSettingResponseData:
    ApiResponseVecOrganizationSettingResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecOrganizationSettingResponseData$outboundSchema.parse(
      apiResponseVecOrganizationSettingResponseData,
    ),
  );
}

export function apiResponseVecOrganizationSettingResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseVecOrganizationSettingResponseData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecOrganizationSettingResponseData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseVecOrganizationSettingResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecOrganizationSettingResponse$inboundSchema: z.ZodType<
  ApiResponseVecOrganizationSettingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecOrganizationSettingResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecOrganizationSettingResponse$Outbound = {
  data?:
    | Array<ApiResponseVecOrganizationSettingResponseData$Outbound>
    | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecOrganizationSettingResponse$outboundSchema:
  z.ZodType<
    ApiResponseVecOrganizationSettingResponse$Outbound,
    z.ZodTypeDef,
    ApiResponseVecOrganizationSettingResponse
  > = z.object({
    data: z.array(
      z.lazy(() =>
        ApiResponseVecOrganizationSettingResponseData$outboundSchema
      ),
    ).optional(),
    message: z.nullable(z.string()).optional(),
    success: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecOrganizationSettingResponse$ {
  /** @deprecated use `ApiResponseVecOrganizationSettingResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecOrganizationSettingResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationSettingResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecOrganizationSettingResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationSettingResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecOrganizationSettingResponse$Outbound;
}

export function apiResponseVecOrganizationSettingResponseToJSON(
  apiResponseVecOrganizationSettingResponse:
    ApiResponseVecOrganizationSettingResponse,
): string {
  return JSON.stringify(
    ApiResponseVecOrganizationSettingResponse$outboundSchema.parse(
      apiResponseVecOrganizationSettingResponse,
    ),
  );
}

export function apiResponseVecOrganizationSettingResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseVecOrganizationSettingResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecOrganizationSettingResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseVecOrganizationSettingResponse' from JSON`,
  );
}
