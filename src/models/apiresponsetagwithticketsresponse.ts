/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TagTicketResponse,
  TagTicketResponse$inboundSchema,
  TagTicketResponse$Outbound,
  TagTicketResponse$outboundSchema,
} from "./tagticketresponse.js";

export type ApiResponseTagWithTicketsResponseData = {
  color: string;
  id: string;
  name: string;
  tickets: Array<TagTicketResponse>;
};

export type ApiResponseTagWithTicketsResponse = {
  data?: ApiResponseTagWithTicketsResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseTagWithTicketsResponseData$inboundSchema: z.ZodType<
  ApiResponseTagWithTicketsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: z.string(),
  id: z.string(),
  name: z.string(),
  tickets: z.array(TagTicketResponse$inboundSchema),
});

/** @internal */
export type ApiResponseTagWithTicketsResponseData$Outbound = {
  color: string;
  id: string;
  name: string;
  tickets: Array<TagTicketResponse$Outbound>;
};

/** @internal */
export const ApiResponseTagWithTicketsResponseData$outboundSchema: z.ZodType<
  ApiResponseTagWithTicketsResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseTagWithTicketsResponseData
> = z.object({
  color: z.string(),
  id: z.string(),
  name: z.string(),
  tickets: z.array(TagTicketResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseTagWithTicketsResponseData$ {
  /** @deprecated use `ApiResponseTagWithTicketsResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseTagWithTicketsResponseData$inboundSchema;
  /** @deprecated use `ApiResponseTagWithTicketsResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseTagWithTicketsResponseData$outboundSchema;
  /** @deprecated use `ApiResponseTagWithTicketsResponseData$Outbound` instead. */
  export type Outbound = ApiResponseTagWithTicketsResponseData$Outbound;
}

export function apiResponseTagWithTicketsResponseDataToJSON(
  apiResponseTagWithTicketsResponseData: ApiResponseTagWithTicketsResponseData,
): string {
  return JSON.stringify(
    ApiResponseTagWithTicketsResponseData$outboundSchema.parse(
      apiResponseTagWithTicketsResponseData,
    ),
  );
}

export function apiResponseTagWithTicketsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseTagWithTicketsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseTagWithTicketsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseTagWithTicketsResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseTagWithTicketsResponse$inboundSchema: z.ZodType<
  ApiResponseTagWithTicketsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseTagWithTicketsResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseTagWithTicketsResponse$Outbound = {
  data?: ApiResponseTagWithTicketsResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseTagWithTicketsResponse$outboundSchema: z.ZodType<
  ApiResponseTagWithTicketsResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseTagWithTicketsResponse
> = z.object({
  data: z.lazy(() => ApiResponseTagWithTicketsResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseTagWithTicketsResponse$ {
  /** @deprecated use `ApiResponseTagWithTicketsResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseTagWithTicketsResponse$inboundSchema;
  /** @deprecated use `ApiResponseTagWithTicketsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseTagWithTicketsResponse$outboundSchema;
  /** @deprecated use `ApiResponseTagWithTicketsResponse$Outbound` instead. */
  export type Outbound = ApiResponseTagWithTicketsResponse$Outbound;
}

export function apiResponseTagWithTicketsResponseToJSON(
  apiResponseTagWithTicketsResponse: ApiResponseTagWithTicketsResponse,
): string {
  return JSON.stringify(
    ApiResponseTagWithTicketsResponse$outboundSchema.parse(
      apiResponseTagWithTicketsResponse,
    ),
  );
}

export function apiResponseTagWithTicketsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseTagWithTicketsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseTagWithTicketsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseTagWithTicketsResponse' from JSON`,
  );
}
