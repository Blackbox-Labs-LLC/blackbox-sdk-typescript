/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecMembershipResponseData = {
  createdAt: string;
  id: string;
  invitedBy?: string | null | undefined;
  status: string;
  userEmail: string;
  userId: string;
  userName: string;
};

export type ApiResponseVecMembershipResponse = {
  data?: Array<ApiResponseVecMembershipResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecMembershipResponseData$inboundSchema: z.ZodType<
  ApiResponseVecMembershipResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  id: z.string(),
  invited_by: z.nullable(z.string()).optional(),
  status: z.string(),
  user_email: z.string(),
  user_id: z.string(),
  user_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "invited_by": "invitedBy",
    "user_email": "userEmail",
    "user_id": "userId",
    "user_name": "userName",
  });
});

/** @internal */
export type ApiResponseVecMembershipResponseData$Outbound = {
  created_at: string;
  id: string;
  invited_by?: string | null | undefined;
  status: string;
  user_email: string;
  user_id: string;
  user_name: string;
};

/** @internal */
export const ApiResponseVecMembershipResponseData$outboundSchema: z.ZodType<
  ApiResponseVecMembershipResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecMembershipResponseData
> = z.object({
  createdAt: z.string(),
  id: z.string(),
  invitedBy: z.nullable(z.string()).optional(),
  status: z.string(),
  userEmail: z.string(),
  userId: z.string(),
  userName: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    invitedBy: "invited_by",
    userEmail: "user_email",
    userId: "user_id",
    userName: "user_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecMembershipResponseData$ {
  /** @deprecated use `ApiResponseVecMembershipResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecMembershipResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecMembershipResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecMembershipResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecMembershipResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecMembershipResponseData$Outbound;
}

export function apiResponseVecMembershipResponseDataToJSON(
  apiResponseVecMembershipResponseData: ApiResponseVecMembershipResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecMembershipResponseData$outboundSchema.parse(
      apiResponseVecMembershipResponseData,
    ),
  );
}

export function apiResponseVecMembershipResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecMembershipResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecMembershipResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecMembershipResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecMembershipResponse$inboundSchema: z.ZodType<
  ApiResponseVecMembershipResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecMembershipResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecMembershipResponse$Outbound = {
  data?: Array<ApiResponseVecMembershipResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecMembershipResponse$outboundSchema: z.ZodType<
  ApiResponseVecMembershipResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecMembershipResponse
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecMembershipResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecMembershipResponse$ {
  /** @deprecated use `ApiResponseVecMembershipResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecMembershipResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecMembershipResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecMembershipResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecMembershipResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecMembershipResponse$Outbound;
}

export function apiResponseVecMembershipResponseToJSON(
  apiResponseVecMembershipResponse: ApiResponseVecMembershipResponse,
): string {
  return JSON.stringify(
    ApiResponseVecMembershipResponse$outboundSchema.parse(
      apiResponseVecMembershipResponse,
    ),
  );
}

export function apiResponseVecMembershipResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecMembershipResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecMembershipResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecMembershipResponse' from JSON`,
  );
}
