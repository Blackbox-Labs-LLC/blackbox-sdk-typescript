/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RuleActivity = {
  executionCount: number;
  ruleId: string;
  ruleName: string;
  successRate: number;
};

/** @internal */
export const RuleActivity$inboundSchema: z.ZodType<
  RuleActivity,
  z.ZodTypeDef,
  unknown
> = z.object({
  execution_count: z.number().int(),
  rule_id: z.string(),
  rule_name: z.string(),
  success_rate: z.number(),
}).transform((v) => {
  return remap$(v, {
    "execution_count": "executionCount",
    "rule_id": "ruleId",
    "rule_name": "ruleName",
    "success_rate": "successRate",
  });
});

/** @internal */
export type RuleActivity$Outbound = {
  execution_count: number;
  rule_id: string;
  rule_name: string;
  success_rate: number;
};

/** @internal */
export const RuleActivity$outboundSchema: z.ZodType<
  RuleActivity$Outbound,
  z.ZodTypeDef,
  RuleActivity
> = z.object({
  executionCount: z.number().int(),
  ruleId: z.string(),
  ruleName: z.string(),
  successRate: z.number(),
}).transform((v) => {
  return remap$(v, {
    executionCount: "execution_count",
    ruleId: "rule_id",
    ruleName: "rule_name",
    successRate: "success_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RuleActivity$ {
  /** @deprecated use `RuleActivity$inboundSchema` instead. */
  export const inboundSchema = RuleActivity$inboundSchema;
  /** @deprecated use `RuleActivity$outboundSchema` instead. */
  export const outboundSchema = RuleActivity$outboundSchema;
  /** @deprecated use `RuleActivity$Outbound` instead. */
  export type Outbound = RuleActivity$Outbound;
}

export function ruleActivityToJSON(ruleActivity: RuleActivity): string {
  return JSON.stringify(RuleActivity$outboundSchema.parse(ruleActivity));
}

export function ruleActivityFromJSON(
  jsonString: string,
): SafeParseResult<RuleActivity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RuleActivity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RuleActivity' from JSON`,
  );
}
