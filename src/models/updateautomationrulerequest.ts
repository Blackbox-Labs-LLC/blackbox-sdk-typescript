/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AutomationAction,
  AutomationAction$inboundSchema,
  AutomationAction$Outbound,
  AutomationAction$outboundSchema,
} from "./automationaction.js";
import {
  AutomationConditions,
  AutomationConditions$inboundSchema,
  AutomationConditions$Outbound,
  AutomationConditions$outboundSchema,
} from "./automationconditions.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpdateAutomationRuleRequest = {
  actions?: Array<AutomationAction> | null | undefined;
  conditions?: AutomationConditions | null | undefined;
  description?: string | null | undefined;
  enabled?: boolean | null | undefined;
  name?: string | null | undefined;
  trigger?: string | null | undefined;
};

/** @internal */
export const UpdateAutomationRuleRequest$inboundSchema: z.ZodType<
  UpdateAutomationRuleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  actions: z.nullable(z.array(AutomationAction$inboundSchema)).optional(),
  conditions: z.nullable(AutomationConditions$inboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  name: z.nullable(z.string()).optional(),
  trigger: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateAutomationRuleRequest$Outbound = {
  actions?: Array<AutomationAction$Outbound> | null | undefined;
  conditions?: AutomationConditions$Outbound | null | undefined;
  description?: string | null | undefined;
  enabled?: boolean | null | undefined;
  name?: string | null | undefined;
  trigger?: string | null | undefined;
};

/** @internal */
export const UpdateAutomationRuleRequest$outboundSchema: z.ZodType<
  UpdateAutomationRuleRequest$Outbound,
  z.ZodTypeDef,
  UpdateAutomationRuleRequest
> = z.object({
  actions: z.nullable(z.array(AutomationAction$outboundSchema)).optional(),
  conditions: z.nullable(AutomationConditions$outboundSchema).optional(),
  description: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  name: z.nullable(z.string()).optional(),
  trigger: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAutomationRuleRequest$ {
  /** @deprecated use `UpdateAutomationRuleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAutomationRuleRequest$inboundSchema;
  /** @deprecated use `UpdateAutomationRuleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAutomationRuleRequest$outboundSchema;
  /** @deprecated use `UpdateAutomationRuleRequest$Outbound` instead. */
  export type Outbound = UpdateAutomationRuleRequest$Outbound;
}

export function updateAutomationRuleRequestToJSON(
  updateAutomationRuleRequest: UpdateAutomationRuleRequest,
): string {
  return JSON.stringify(
    UpdateAutomationRuleRequest$outboundSchema.parse(
      updateAutomationRuleRequest,
    ),
  );
}

export function updateAutomationRuleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAutomationRuleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAutomationRuleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAutomationRuleRequest' from JSON`,
  );
}
