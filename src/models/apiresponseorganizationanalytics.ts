/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AgentAnalytics,
  AgentAnalytics$inboundSchema,
  AgentAnalytics$Outbound,
  AgentAnalytics$outboundSchema,
} from "./agentanalytics.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  KnowledgeBaseStats,
  KnowledgeBaseStats$inboundSchema,
  KnowledgeBaseStats$Outbound,
  KnowledgeBaseStats$outboundSchema,
} from "./knowledgebasestats.js";
import {
  MacroUsageStats,
  MacroUsageStats$inboundSchema,
  MacroUsageStats$Outbound,
  MacroUsageStats$outboundSchema,
} from "./macrousagestats.js";
import {
  SystemUsage,
  SystemUsage$inboundSchema,
  SystemUsage$Outbound,
  SystemUsage$outboundSchema,
} from "./systemusage.js";
import {
  TicketAnalytics,
  TicketAnalytics$inboundSchema,
  TicketAnalytics$Outbound,
  TicketAnalytics$outboundSchema,
} from "./ticketanalytics.js";

export type ApiResponseOrganizationAnalyticsData = {
  agentAnalytics: AgentAnalytics;
  knowledgeBaseStats: KnowledgeBaseStats;
  macroUsageStats: MacroUsageStats;
  systemUsage: SystemUsage;
  ticketAnalytics: TicketAnalytics;
};

export type ApiResponseOrganizationAnalytics = {
  data?: ApiResponseOrganizationAnalyticsData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOrganizationAnalyticsData$inboundSchema: z.ZodType<
  ApiResponseOrganizationAnalyticsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_analytics: AgentAnalytics$inboundSchema,
  knowledge_base_stats: KnowledgeBaseStats$inboundSchema,
  macro_usage_stats: MacroUsageStats$inboundSchema,
  system_usage: SystemUsage$inboundSchema,
  ticket_analytics: TicketAnalytics$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "agent_analytics": "agentAnalytics",
    "knowledge_base_stats": "knowledgeBaseStats",
    "macro_usage_stats": "macroUsageStats",
    "system_usage": "systemUsage",
    "ticket_analytics": "ticketAnalytics",
  });
});

/** @internal */
export type ApiResponseOrganizationAnalyticsData$Outbound = {
  agent_analytics: AgentAnalytics$Outbound;
  knowledge_base_stats: KnowledgeBaseStats$Outbound;
  macro_usage_stats: MacroUsageStats$Outbound;
  system_usage: SystemUsage$Outbound;
  ticket_analytics: TicketAnalytics$Outbound;
};

/** @internal */
export const ApiResponseOrganizationAnalyticsData$outboundSchema: z.ZodType<
  ApiResponseOrganizationAnalyticsData$Outbound,
  z.ZodTypeDef,
  ApiResponseOrganizationAnalyticsData
> = z.object({
  agentAnalytics: AgentAnalytics$outboundSchema,
  knowledgeBaseStats: KnowledgeBaseStats$outboundSchema,
  macroUsageStats: MacroUsageStats$outboundSchema,
  systemUsage: SystemUsage$outboundSchema,
  ticketAnalytics: TicketAnalytics$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    agentAnalytics: "agent_analytics",
    knowledgeBaseStats: "knowledge_base_stats",
    macroUsageStats: "macro_usage_stats",
    systemUsage: "system_usage",
    ticketAnalytics: "ticket_analytics",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOrganizationAnalyticsData$ {
  /** @deprecated use `ApiResponseOrganizationAnalyticsData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseOrganizationAnalyticsData$inboundSchema;
  /** @deprecated use `ApiResponseOrganizationAnalyticsData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseOrganizationAnalyticsData$outboundSchema;
  /** @deprecated use `ApiResponseOrganizationAnalyticsData$Outbound` instead. */
  export type Outbound = ApiResponseOrganizationAnalyticsData$Outbound;
}

export function apiResponseOrganizationAnalyticsDataToJSON(
  apiResponseOrganizationAnalyticsData: ApiResponseOrganizationAnalyticsData,
): string {
  return JSON.stringify(
    ApiResponseOrganizationAnalyticsData$outboundSchema.parse(
      apiResponseOrganizationAnalyticsData,
    ),
  );
}

export function apiResponseOrganizationAnalyticsDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseOrganizationAnalyticsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseOrganizationAnalyticsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseOrganizationAnalyticsData' from JSON`,
  );
}

/** @internal */
export const ApiResponseOrganizationAnalytics$inboundSchema: z.ZodType<
  ApiResponseOrganizationAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseOrganizationAnalyticsData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseOrganizationAnalytics$Outbound = {
  data?: ApiResponseOrganizationAnalyticsData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOrganizationAnalytics$outboundSchema: z.ZodType<
  ApiResponseOrganizationAnalytics$Outbound,
  z.ZodTypeDef,
  ApiResponseOrganizationAnalytics
> = z.object({
  data: z.lazy(() => ApiResponseOrganizationAnalyticsData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOrganizationAnalytics$ {
  /** @deprecated use `ApiResponseOrganizationAnalytics$inboundSchema` instead. */
  export const inboundSchema = ApiResponseOrganizationAnalytics$inboundSchema;
  /** @deprecated use `ApiResponseOrganizationAnalytics$outboundSchema` instead. */
  export const outboundSchema = ApiResponseOrganizationAnalytics$outboundSchema;
  /** @deprecated use `ApiResponseOrganizationAnalytics$Outbound` instead. */
  export type Outbound = ApiResponseOrganizationAnalytics$Outbound;
}

export function apiResponseOrganizationAnalyticsToJSON(
  apiResponseOrganizationAnalytics: ApiResponseOrganizationAnalytics,
): string {
  return JSON.stringify(
    ApiResponseOrganizationAnalytics$outboundSchema.parse(
      apiResponseOrganizationAnalytics,
    ),
  );
}

export function apiResponseOrganizationAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseOrganizationAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseOrganizationAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseOrganizationAnalytics' from JSON`,
  );
}
