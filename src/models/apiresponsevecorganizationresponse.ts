/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecOrganizationResponseData = {
  createdAt: string;
  domain: string;
  id: string;
  name: string;
};

export type ApiResponseVecOrganizationResponse = {
  data?: Array<ApiResponseVecOrganizationResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecOrganizationResponseData$inboundSchema: z.ZodType<
  ApiResponseVecOrganizationResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  domain: z.string(),
  id: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type ApiResponseVecOrganizationResponseData$Outbound = {
  created_at: string;
  domain: string;
  id: string;
  name: string;
};

/** @internal */
export const ApiResponseVecOrganizationResponseData$outboundSchema: z.ZodType<
  ApiResponseVecOrganizationResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecOrganizationResponseData
> = z.object({
  createdAt: z.string(),
  domain: z.string(),
  id: z.string(),
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecOrganizationResponseData$ {
  /** @deprecated use `ApiResponseVecOrganizationResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecOrganizationResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecOrganizationResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecOrganizationResponseData$Outbound;
}

export function apiResponseVecOrganizationResponseDataToJSON(
  apiResponseVecOrganizationResponseData:
    ApiResponseVecOrganizationResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecOrganizationResponseData$outboundSchema.parse(
      apiResponseVecOrganizationResponseData,
    ),
  );
}

export function apiResponseVecOrganizationResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecOrganizationResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecOrganizationResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecOrganizationResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecOrganizationResponse$inboundSchema: z.ZodType<
  ApiResponseVecOrganizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecOrganizationResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecOrganizationResponse$Outbound = {
  data?: Array<ApiResponseVecOrganizationResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecOrganizationResponse$outboundSchema: z.ZodType<
  ApiResponseVecOrganizationResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecOrganizationResponse
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecOrganizationResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecOrganizationResponse$ {
  /** @deprecated use `ApiResponseVecOrganizationResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecOrganizationResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecOrganizationResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecOrganizationResponse$Outbound;
}

export function apiResponseVecOrganizationResponseToJSON(
  apiResponseVecOrganizationResponse: ApiResponseVecOrganizationResponse,
): string {
  return JSON.stringify(
    ApiResponseVecOrganizationResponse$outboundSchema.parse(
      apiResponseVecOrganizationResponse,
    ),
  );
}

export function apiResponseVecOrganizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecOrganizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecOrganizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecOrganizationResponse' from JSON`,
  );
}
