/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseOptionMessageResponseData = {
  attachments?: any | undefined;
  channel: string;
  content: string;
  id: string;
  senderId: string;
  senderName: string;
  sentAt: string;
  ticketId: string;
};

export type ApiResponseOptionMessageResponse = {
  data?: ApiResponseOptionMessageResponseData | null | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOptionMessageResponseData$inboundSchema: z.ZodType<
  ApiResponseOptionMessageResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.any().optional(),
  channel: z.string(),
  content: z.string(),
  id: z.string(),
  sender_id: z.string(),
  sender_name: z.string(),
  sent_at: z.string(),
  ticket_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "sender_id": "senderId",
    "sender_name": "senderName",
    "sent_at": "sentAt",
    "ticket_id": "ticketId",
  });
});

/** @internal */
export type ApiResponseOptionMessageResponseData$Outbound = {
  attachments?: any | undefined;
  channel: string;
  content: string;
  id: string;
  sender_id: string;
  sender_name: string;
  sent_at: string;
  ticket_id: string;
};

/** @internal */
export const ApiResponseOptionMessageResponseData$outboundSchema: z.ZodType<
  ApiResponseOptionMessageResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseOptionMessageResponseData
> = z.object({
  attachments: z.any().optional(),
  channel: z.string(),
  content: z.string(),
  id: z.string(),
  senderId: z.string(),
  senderName: z.string(),
  sentAt: z.string(),
  ticketId: z.string(),
}).transform((v) => {
  return remap$(v, {
    senderId: "sender_id",
    senderName: "sender_name",
    sentAt: "sent_at",
    ticketId: "ticket_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOptionMessageResponseData$ {
  /** @deprecated use `ApiResponseOptionMessageResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseOptionMessageResponseData$inboundSchema;
  /** @deprecated use `ApiResponseOptionMessageResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseOptionMessageResponseData$outboundSchema;
  /** @deprecated use `ApiResponseOptionMessageResponseData$Outbound` instead. */
  export type Outbound = ApiResponseOptionMessageResponseData$Outbound;
}

export function apiResponseOptionMessageResponseDataToJSON(
  apiResponseOptionMessageResponseData: ApiResponseOptionMessageResponseData,
): string {
  return JSON.stringify(
    ApiResponseOptionMessageResponseData$outboundSchema.parse(
      apiResponseOptionMessageResponseData,
    ),
  );
}

export function apiResponseOptionMessageResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseOptionMessageResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseOptionMessageResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseOptionMessageResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseOptionMessageResponse$inboundSchema: z.ZodType<
  ApiResponseOptionMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(
    z.lazy(() => ApiResponseOptionMessageResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseOptionMessageResponse$Outbound = {
  data?: ApiResponseOptionMessageResponseData$Outbound | null | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOptionMessageResponse$outboundSchema: z.ZodType<
  ApiResponseOptionMessageResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseOptionMessageResponse
> = z.object({
  data: z.nullable(
    z.lazy(() => ApiResponseOptionMessageResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOptionMessageResponse$ {
  /** @deprecated use `ApiResponseOptionMessageResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseOptionMessageResponse$inboundSchema;
  /** @deprecated use `ApiResponseOptionMessageResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseOptionMessageResponse$outboundSchema;
  /** @deprecated use `ApiResponseOptionMessageResponse$Outbound` instead. */
  export type Outbound = ApiResponseOptionMessageResponse$Outbound;
}

export function apiResponseOptionMessageResponseToJSON(
  apiResponseOptionMessageResponse: ApiResponseOptionMessageResponse,
): string {
  return JSON.stringify(
    ApiResponseOptionMessageResponse$outboundSchema.parse(
      apiResponseOptionMessageResponse,
    ),
  );
}

export function apiResponseOptionMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseOptionMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseOptionMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseOptionMessageResponse' from JSON`,
  );
}
