/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpdateMacroRequest = {
  content?: string | null | undefined;
  description?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const UpdateMacroRequest$inboundSchema: z.ZodType<
  UpdateMacroRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateMacroRequest$Outbound = {
  content?: string | null | undefined;
  description?: string | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const UpdateMacroRequest$outboundSchema: z.ZodType<
  UpdateMacroRequest$Outbound,
  z.ZodTypeDef,
  UpdateMacroRequest
> = z.object({
  content: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMacroRequest$ {
  /** @deprecated use `UpdateMacroRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMacroRequest$inboundSchema;
  /** @deprecated use `UpdateMacroRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateMacroRequest$outboundSchema;
  /** @deprecated use `UpdateMacroRequest$Outbound` instead. */
  export type Outbound = UpdateMacroRequest$Outbound;
}

export function updateMacroRequestToJSON(
  updateMacroRequest: UpdateMacroRequest,
): string {
  return JSON.stringify(
    UpdateMacroRequest$outboundSchema.parse(updateMacroRequest),
  );
}

export function updateMacroRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMacroRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMacroRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMacroRequest' from JSON`,
  );
}
