/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseApiKeyResponseData = {
  createdAt: string;
  expiresAt?: string | null | undefined;
  id: string;
  lastUsed?: string | null | undefined;
  name: string;
  revoked: boolean;
  scopes: Array<string>;
};

export type ApiResponseApiKeyResponse = {
  data?: ApiResponseApiKeyResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseApiKeyResponseData$inboundSchema: z.ZodType<
  ApiResponseApiKeyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  expires_at: z.nullable(z.string()).optional(),
  id: z.string(),
  last_used: z.nullable(z.string()).optional(),
  name: z.string(),
  revoked: z.boolean(),
  scopes: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "expires_at": "expiresAt",
    "last_used": "lastUsed",
  });
});

/** @internal */
export type ApiResponseApiKeyResponseData$Outbound = {
  created_at: string;
  expires_at?: string | null | undefined;
  id: string;
  last_used?: string | null | undefined;
  name: string;
  revoked: boolean;
  scopes: Array<string>;
};

/** @internal */
export const ApiResponseApiKeyResponseData$outboundSchema: z.ZodType<
  ApiResponseApiKeyResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseApiKeyResponseData
> = z.object({
  createdAt: z.string(),
  expiresAt: z.nullable(z.string()).optional(),
  id: z.string(),
  lastUsed: z.nullable(z.string()).optional(),
  name: z.string(),
  revoked: z.boolean(),
  scopes: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    expiresAt: "expires_at",
    lastUsed: "last_used",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseApiKeyResponseData$ {
  /** @deprecated use `ApiResponseApiKeyResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseApiKeyResponseData$inboundSchema;
  /** @deprecated use `ApiResponseApiKeyResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseApiKeyResponseData$outboundSchema;
  /** @deprecated use `ApiResponseApiKeyResponseData$Outbound` instead. */
  export type Outbound = ApiResponseApiKeyResponseData$Outbound;
}

export function apiResponseApiKeyResponseDataToJSON(
  apiResponseApiKeyResponseData: ApiResponseApiKeyResponseData,
): string {
  return JSON.stringify(
    ApiResponseApiKeyResponseData$outboundSchema.parse(
      apiResponseApiKeyResponseData,
    ),
  );
}

export function apiResponseApiKeyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseApiKeyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseApiKeyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseApiKeyResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseApiKeyResponse$inboundSchema: z.ZodType<
  ApiResponseApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseApiKeyResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseApiKeyResponse$Outbound = {
  data?: ApiResponseApiKeyResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseApiKeyResponse$outboundSchema: z.ZodType<
  ApiResponseApiKeyResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseApiKeyResponse
> = z.object({
  data: z.lazy(() => ApiResponseApiKeyResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseApiKeyResponse$ {
  /** @deprecated use `ApiResponseApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseApiKeyResponse$inboundSchema;
  /** @deprecated use `ApiResponseApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseApiKeyResponse$outboundSchema;
  /** @deprecated use `ApiResponseApiKeyResponse$Outbound` instead. */
  export type Outbound = ApiResponseApiKeyResponse$Outbound;
}

export function apiResponseApiKeyResponseToJSON(
  apiResponseApiKeyResponse: ApiResponseApiKeyResponse,
): string {
  return JSON.stringify(
    ApiResponseApiKeyResponse$outboundSchema.parse(apiResponseApiKeyResponse),
  );
}

export function apiResponseApiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseApiKeyResponse' from JSON`,
  );
}
