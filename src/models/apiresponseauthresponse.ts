/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  UserOrgInfo,
  UserOrgInfo$inboundSchema,
  UserOrgInfo$Outbound,
  UserOrgInfo$outboundSchema,
} from "./userorginfo.js";

export type ApiResponseAuthResponseData = {
  emailVerified: boolean;
  organizations: Array<UserOrgInfo>;
  sessionToken: string;
  twoFaEnabled: boolean;
  userId: string;
};

export type ApiResponseAuthResponse = {
  data?: ApiResponseAuthResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAuthResponseData$inboundSchema: z.ZodType<
  ApiResponseAuthResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  email_verified: z.boolean(),
  organizations: z.array(UserOrgInfo$inboundSchema),
  session_token: z.string(),
  two_fa_enabled: z.boolean(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "email_verified": "emailVerified",
    "session_token": "sessionToken",
    "two_fa_enabled": "twoFaEnabled",
    "user_id": "userId",
  });
});

/** @internal */
export type ApiResponseAuthResponseData$Outbound = {
  email_verified: boolean;
  organizations: Array<UserOrgInfo$Outbound>;
  session_token: string;
  two_fa_enabled: boolean;
  user_id: string;
};

/** @internal */
export const ApiResponseAuthResponseData$outboundSchema: z.ZodType<
  ApiResponseAuthResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseAuthResponseData
> = z.object({
  emailVerified: z.boolean(),
  organizations: z.array(UserOrgInfo$outboundSchema),
  sessionToken: z.string(),
  twoFaEnabled: z.boolean(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    emailVerified: "email_verified",
    sessionToken: "session_token",
    twoFaEnabled: "two_fa_enabled",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAuthResponseData$ {
  /** @deprecated use `ApiResponseAuthResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseAuthResponseData$inboundSchema;
  /** @deprecated use `ApiResponseAuthResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseAuthResponseData$outboundSchema;
  /** @deprecated use `ApiResponseAuthResponseData$Outbound` instead. */
  export type Outbound = ApiResponseAuthResponseData$Outbound;
}

export function apiResponseAuthResponseDataToJSON(
  apiResponseAuthResponseData: ApiResponseAuthResponseData,
): string {
  return JSON.stringify(
    ApiResponseAuthResponseData$outboundSchema.parse(
      apiResponseAuthResponseData,
    ),
  );
}

export function apiResponseAuthResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAuthResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseAuthResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAuthResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseAuthResponse$inboundSchema: z.ZodType<
  ApiResponseAuthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseAuthResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseAuthResponse$Outbound = {
  data?: ApiResponseAuthResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAuthResponse$outboundSchema: z.ZodType<
  ApiResponseAuthResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseAuthResponse
> = z.object({
  data: z.lazy(() => ApiResponseAuthResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAuthResponse$ {
  /** @deprecated use `ApiResponseAuthResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseAuthResponse$inboundSchema;
  /** @deprecated use `ApiResponseAuthResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseAuthResponse$outboundSchema;
  /** @deprecated use `ApiResponseAuthResponse$Outbound` instead. */
  export type Outbound = ApiResponseAuthResponse$Outbound;
}

export function apiResponseAuthResponseToJSON(
  apiResponseAuthResponse: ApiResponseAuthResponse,
): string {
  return JSON.stringify(
    ApiResponseAuthResponse$outboundSchema.parse(apiResponseAuthResponse),
  );
}

export function apiResponseAuthResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAuthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseAuthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAuthResponse' from JSON`,
  );
}
