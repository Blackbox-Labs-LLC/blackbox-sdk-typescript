/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseMessageResponseData = {
  attachments?: any | undefined;
  channel: string;
  content: string;
  id: string;
  senderId: string;
  senderName: string;
  sentAt: string;
  ticketId: string;
};

export type ApiResponseMessageResponse = {
  data?: ApiResponseMessageResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseMessageResponseData$inboundSchema: z.ZodType<
  ApiResponseMessageResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.any().optional(),
  channel: z.string(),
  content: z.string(),
  id: z.string(),
  sender_id: z.string(),
  sender_name: z.string(),
  sent_at: z.string(),
  ticket_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "sender_id": "senderId",
    "sender_name": "senderName",
    "sent_at": "sentAt",
    "ticket_id": "ticketId",
  });
});

/** @internal */
export type ApiResponseMessageResponseData$Outbound = {
  attachments?: any | undefined;
  channel: string;
  content: string;
  id: string;
  sender_id: string;
  sender_name: string;
  sent_at: string;
  ticket_id: string;
};

/** @internal */
export const ApiResponseMessageResponseData$outboundSchema: z.ZodType<
  ApiResponseMessageResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseMessageResponseData
> = z.object({
  attachments: z.any().optional(),
  channel: z.string(),
  content: z.string(),
  id: z.string(),
  senderId: z.string(),
  senderName: z.string(),
  sentAt: z.string(),
  ticketId: z.string(),
}).transform((v) => {
  return remap$(v, {
    senderId: "sender_id",
    senderName: "sender_name",
    sentAt: "sent_at",
    ticketId: "ticket_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseMessageResponseData$ {
  /** @deprecated use `ApiResponseMessageResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseMessageResponseData$inboundSchema;
  /** @deprecated use `ApiResponseMessageResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseMessageResponseData$outboundSchema;
  /** @deprecated use `ApiResponseMessageResponseData$Outbound` instead. */
  export type Outbound = ApiResponseMessageResponseData$Outbound;
}

export function apiResponseMessageResponseDataToJSON(
  apiResponseMessageResponseData: ApiResponseMessageResponseData,
): string {
  return JSON.stringify(
    ApiResponseMessageResponseData$outboundSchema.parse(
      apiResponseMessageResponseData,
    ),
  );
}

export function apiResponseMessageResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseMessageResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseMessageResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseMessageResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseMessageResponse$inboundSchema: z.ZodType<
  ApiResponseMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseMessageResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseMessageResponse$Outbound = {
  data?: ApiResponseMessageResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseMessageResponse$outboundSchema: z.ZodType<
  ApiResponseMessageResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseMessageResponse
> = z.object({
  data: z.lazy(() => ApiResponseMessageResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseMessageResponse$ {
  /** @deprecated use `ApiResponseMessageResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseMessageResponse$inboundSchema;
  /** @deprecated use `ApiResponseMessageResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseMessageResponse$outboundSchema;
  /** @deprecated use `ApiResponseMessageResponse$Outbound` instead. */
  export type Outbound = ApiResponseMessageResponse$Outbound;
}

export function apiResponseMessageResponseToJSON(
  apiResponseMessageResponse: ApiResponseMessageResponse,
): string {
  return JSON.stringify(
    ApiResponseMessageResponse$outboundSchema.parse(apiResponseMessageResponse),
  );
}

export function apiResponseMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseMessageResponse' from JSON`,
  );
}
