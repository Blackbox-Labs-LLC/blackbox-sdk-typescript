/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SessionInfo = {
  createdAt: string;
  expiresAt: string;
  id: string;
  ipAddress: string;
  isCurrent: boolean;
  token: string;
  userAgent: string;
  userId: string;
};

/** @internal */
export const SessionInfo$inboundSchema: z.ZodType<
  SessionInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  expires_at: z.string(),
  id: z.string(),
  ip_address: z.string(),
  is_current: z.boolean(),
  token: z.string(),
  user_agent: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "expires_at": "expiresAt",
    "ip_address": "ipAddress",
    "is_current": "isCurrent",
    "user_agent": "userAgent",
    "user_id": "userId",
  });
});

/** @internal */
export type SessionInfo$Outbound = {
  created_at: string;
  expires_at: string;
  id: string;
  ip_address: string;
  is_current: boolean;
  token: string;
  user_agent: string;
  user_id: string;
};

/** @internal */
export const SessionInfo$outboundSchema: z.ZodType<
  SessionInfo$Outbound,
  z.ZodTypeDef,
  SessionInfo
> = z.object({
  createdAt: z.string(),
  expiresAt: z.string(),
  id: z.string(),
  ipAddress: z.string(),
  isCurrent: z.boolean(),
  token: z.string(),
  userAgent: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    expiresAt: "expires_at",
    ipAddress: "ip_address",
    isCurrent: "is_current",
    userAgent: "user_agent",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionInfo$ {
  /** @deprecated use `SessionInfo$inboundSchema` instead. */
  export const inboundSchema = SessionInfo$inboundSchema;
  /** @deprecated use `SessionInfo$outboundSchema` instead. */
  export const outboundSchema = SessionInfo$outboundSchema;
  /** @deprecated use `SessionInfo$Outbound` instead. */
  export type Outbound = SessionInfo$Outbound;
}

export function sessionInfoToJSON(sessionInfo: SessionInfo): string {
  return JSON.stringify(SessionInfo$outboundSchema.parse(sessionInfo));
}

export function sessionInfoFromJSON(
  jsonString: string,
): SafeParseResult<SessionInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionInfo' from JSON`,
  );
}
