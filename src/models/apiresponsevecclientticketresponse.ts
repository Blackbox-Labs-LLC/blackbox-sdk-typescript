/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecClientTicketResponseData = {
  createdAt: string;
  status: string;
  ticketId: string;
};

export type ApiResponseVecClientTicketResponse = {
  data?: Array<ApiResponseVecClientTicketResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecClientTicketResponseData$inboundSchema: z.ZodType<
  ApiResponseVecClientTicketResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  status: z.string(),
  ticket_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "ticket_id": "ticketId",
  });
});

/** @internal */
export type ApiResponseVecClientTicketResponseData$Outbound = {
  created_at: string;
  status: string;
  ticket_id: string;
};

/** @internal */
export const ApiResponseVecClientTicketResponseData$outboundSchema: z.ZodType<
  ApiResponseVecClientTicketResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecClientTicketResponseData
> = z.object({
  createdAt: z.string(),
  status: z.string(),
  ticketId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    ticketId: "ticket_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecClientTicketResponseData$ {
  /** @deprecated use `ApiResponseVecClientTicketResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecClientTicketResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecClientTicketResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecClientTicketResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecClientTicketResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecClientTicketResponseData$Outbound;
}

export function apiResponseVecClientTicketResponseDataToJSON(
  apiResponseVecClientTicketResponseData:
    ApiResponseVecClientTicketResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecClientTicketResponseData$outboundSchema.parse(
      apiResponseVecClientTicketResponseData,
    ),
  );
}

export function apiResponseVecClientTicketResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecClientTicketResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecClientTicketResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecClientTicketResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecClientTicketResponse$inboundSchema: z.ZodType<
  ApiResponseVecClientTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecClientTicketResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecClientTicketResponse$Outbound = {
  data?: Array<ApiResponseVecClientTicketResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecClientTicketResponse$outboundSchema: z.ZodType<
  ApiResponseVecClientTicketResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecClientTicketResponse
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecClientTicketResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecClientTicketResponse$ {
  /** @deprecated use `ApiResponseVecClientTicketResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecClientTicketResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecClientTicketResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecClientTicketResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecClientTicketResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecClientTicketResponse$Outbound;
}

export function apiResponseVecClientTicketResponseToJSON(
  apiResponseVecClientTicketResponse: ApiResponseVecClientTicketResponse,
): string {
  return JSON.stringify(
    ApiResponseVecClientTicketResponse$outboundSchema.parse(
      apiResponseVecClientTicketResponse,
    ),
  );
}

export function apiResponseVecClientTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecClientTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecClientTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecClientTicketResponse' from JSON`,
  );
}
