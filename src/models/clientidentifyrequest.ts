/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientIdentifyRequest = {
  anonymousId?: string | null | undefined;
  email?: string | null | undefined;
  name?: string | null | undefined;
  orgDomain: string;
  userId?: string | null | undefined;
};

/** @internal */
export const ClientIdentifyRequest$inboundSchema: z.ZodType<
  ClientIdentifyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  anonymous_id: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  org_domain: z.string(),
  user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "anonymous_id": "anonymousId",
    "org_domain": "orgDomain",
    "user_id": "userId",
  });
});

/** @internal */
export type ClientIdentifyRequest$Outbound = {
  anonymous_id?: string | null | undefined;
  email?: string | null | undefined;
  name?: string | null | undefined;
  org_domain: string;
  user_id?: string | null | undefined;
};

/** @internal */
export const ClientIdentifyRequest$outboundSchema: z.ZodType<
  ClientIdentifyRequest$Outbound,
  z.ZodTypeDef,
  ClientIdentifyRequest
> = z.object({
  anonymousId: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  orgDomain: z.string(),
  userId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    anonymousId: "anonymous_id",
    orgDomain: "org_domain",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientIdentifyRequest$ {
  /** @deprecated use `ClientIdentifyRequest$inboundSchema` instead. */
  export const inboundSchema = ClientIdentifyRequest$inboundSchema;
  /** @deprecated use `ClientIdentifyRequest$outboundSchema` instead. */
  export const outboundSchema = ClientIdentifyRequest$outboundSchema;
  /** @deprecated use `ClientIdentifyRequest$Outbound` instead. */
  export type Outbound = ClientIdentifyRequest$Outbound;
}

export function clientIdentifyRequestToJSON(
  clientIdentifyRequest: ClientIdentifyRequest,
): string {
  return JSON.stringify(
    ClientIdentifyRequest$outboundSchema.parse(clientIdentifyRequest),
  );
}

export function clientIdentifyRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientIdentifyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientIdentifyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientIdentifyRequest' from JSON`,
  );
}
