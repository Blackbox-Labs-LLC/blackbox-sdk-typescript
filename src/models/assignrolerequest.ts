/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AssignRoleRequest = {
  userId: string;
};

/** @internal */
export const AssignRoleRequest$inboundSchema: z.ZodType<
  AssignRoleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type AssignRoleRequest$Outbound = {
  user_id: string;
};

/** @internal */
export const AssignRoleRequest$outboundSchema: z.ZodType<
  AssignRoleRequest$Outbound,
  z.ZodTypeDef,
  AssignRoleRequest
> = z.object({
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignRoleRequest$ {
  /** @deprecated use `AssignRoleRequest$inboundSchema` instead. */
  export const inboundSchema = AssignRoleRequest$inboundSchema;
  /** @deprecated use `AssignRoleRequest$outboundSchema` instead. */
  export const outboundSchema = AssignRoleRequest$outboundSchema;
  /** @deprecated use `AssignRoleRequest$Outbound` instead. */
  export type Outbound = AssignRoleRequest$Outbound;
}

export function assignRoleRequestToJSON(
  assignRoleRequest: AssignRoleRequest,
): string {
  return JSON.stringify(
    AssignRoleRequest$outboundSchema.parse(assignRoleRequest),
  );
}

export function assignRoleRequestFromJSON(
  jsonString: string,
): SafeParseResult<AssignRoleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignRoleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignRoleRequest' from JSON`,
  );
}
