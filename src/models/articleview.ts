/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ArticleView = {
  articleId: string;
  title: string;
  views: number;
};

/** @internal */
export const ArticleView$inboundSchema: z.ZodType<
  ArticleView,
  z.ZodTypeDef,
  unknown
> = z.object({
  article_id: z.string(),
  title: z.string(),
  views: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "article_id": "articleId",
  });
});

/** @internal */
export type ArticleView$Outbound = {
  article_id: string;
  title: string;
  views: number;
};

/** @internal */
export const ArticleView$outboundSchema: z.ZodType<
  ArticleView$Outbound,
  z.ZodTypeDef,
  ArticleView
> = z.object({
  articleId: z.string(),
  title: z.string(),
  views: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    articleId: "article_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleView$ {
  /** @deprecated use `ArticleView$inboundSchema` instead. */
  export const inboundSchema = ArticleView$inboundSchema;
  /** @deprecated use `ArticleView$outboundSchema` instead. */
  export const outboundSchema = ArticleView$outboundSchema;
  /** @deprecated use `ArticleView$Outbound` instead. */
  export type Outbound = ArticleView$Outbound;
}

export function articleViewToJSON(articleView: ArticleView): string {
  return JSON.stringify(ArticleView$outboundSchema.parse(articleView));
}

export function articleViewFromJSON(
  jsonString: string,
): SafeParseResult<ArticleView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleView' from JSON`,
  );
}
