/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AutomationCondition,
  AutomationCondition$inboundSchema,
  AutomationCondition$Outbound,
  AutomationCondition$outboundSchema,
} from "./automationcondition.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AutomationConditions = {
  conditions: Array<AutomationCondition>;
  logic: string;
};

/** @internal */
export const AutomationConditions$inboundSchema: z.ZodType<
  AutomationConditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  conditions: z.array(AutomationCondition$inboundSchema),
  logic: z.string(),
});

/** @internal */
export type AutomationConditions$Outbound = {
  conditions: Array<AutomationCondition$Outbound>;
  logic: string;
};

/** @internal */
export const AutomationConditions$outboundSchema: z.ZodType<
  AutomationConditions$Outbound,
  z.ZodTypeDef,
  AutomationConditions
> = z.object({
  conditions: z.array(AutomationCondition$outboundSchema),
  logic: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationConditions$ {
  /** @deprecated use `AutomationConditions$inboundSchema` instead. */
  export const inboundSchema = AutomationConditions$inboundSchema;
  /** @deprecated use `AutomationConditions$outboundSchema` instead. */
  export const outboundSchema = AutomationConditions$outboundSchema;
  /** @deprecated use `AutomationConditions$Outbound` instead. */
  export type Outbound = AutomationConditions$Outbound;
}

export function automationConditionsToJSON(
  automationConditions: AutomationConditions,
): string {
  return JSON.stringify(
    AutomationConditions$outboundSchema.parse(automationConditions),
  );
}

export function automationConditionsFromJSON(
  jsonString: string,
): SafeParseResult<AutomationConditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationConditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationConditions' from JSON`,
  );
}
