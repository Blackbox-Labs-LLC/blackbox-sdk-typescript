/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseMacroResponseData = {
  content: string;
  createdAt: string;
  createdBy: string;
  createdByName: string;
  description: string;
  id: string;
  name: string;
  organizationId: string;
  updatedAt: string;
};

export type ApiResponseMacroResponse = {
  data?: ApiResponseMacroResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseMacroResponseData$inboundSchema: z.ZodType<
  ApiResponseMacroResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  created_at: z.string(),
  created_by: z.string(),
  created_by_name: z.string(),
  description: z.string(),
  id: z.string(),
  name: z.string(),
  organization_id: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "created_by": "createdBy",
    "created_by_name": "createdByName",
    "organization_id": "organizationId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseMacroResponseData$Outbound = {
  content: string;
  created_at: string;
  created_by: string;
  created_by_name: string;
  description: string;
  id: string;
  name: string;
  organization_id: string;
  updated_at: string;
};

/** @internal */
export const ApiResponseMacroResponseData$outboundSchema: z.ZodType<
  ApiResponseMacroResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseMacroResponseData
> = z.object({
  content: z.string(),
  createdAt: z.string(),
  createdBy: z.string(),
  createdByName: z.string(),
  description: z.string(),
  id: z.string(),
  name: z.string(),
  organizationId: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    createdBy: "created_by",
    createdByName: "created_by_name",
    organizationId: "organization_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseMacroResponseData$ {
  /** @deprecated use `ApiResponseMacroResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseMacroResponseData$inboundSchema;
  /** @deprecated use `ApiResponseMacroResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseMacroResponseData$outboundSchema;
  /** @deprecated use `ApiResponseMacroResponseData$Outbound` instead. */
  export type Outbound = ApiResponseMacroResponseData$Outbound;
}

export function apiResponseMacroResponseDataToJSON(
  apiResponseMacroResponseData: ApiResponseMacroResponseData,
): string {
  return JSON.stringify(
    ApiResponseMacroResponseData$outboundSchema.parse(
      apiResponseMacroResponseData,
    ),
  );
}

export function apiResponseMacroResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseMacroResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseMacroResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseMacroResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseMacroResponse$inboundSchema: z.ZodType<
  ApiResponseMacroResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseMacroResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseMacroResponse$Outbound = {
  data?: ApiResponseMacroResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseMacroResponse$outboundSchema: z.ZodType<
  ApiResponseMacroResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseMacroResponse
> = z.object({
  data: z.lazy(() => ApiResponseMacroResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseMacroResponse$ {
  /** @deprecated use `ApiResponseMacroResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseMacroResponse$inboundSchema;
  /** @deprecated use `ApiResponseMacroResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseMacroResponse$outboundSchema;
  /** @deprecated use `ApiResponseMacroResponse$Outbound` instead. */
  export type Outbound = ApiResponseMacroResponse$Outbound;
}

export function apiResponseMacroResponseToJSON(
  apiResponseMacroResponse: ApiResponseMacroResponse,
): string {
  return JSON.stringify(
    ApiResponseMacroResponse$outboundSchema.parse(apiResponseMacroResponse),
  );
}

export function apiResponseMacroResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseMacroResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseMacroResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseMacroResponse' from JSON`,
  );
}
