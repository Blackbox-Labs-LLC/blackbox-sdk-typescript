/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MonthlySurveyData = {
  averageScore: number;
  month: string;
  satisfactionRate: number;
  totalSurveys: number;
};

/** @internal */
export const MonthlySurveyData$inboundSchema: z.ZodType<
  MonthlySurveyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  average_score: z.number(),
  month: z.string(),
  satisfaction_rate: z.number(),
  total_surveys: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "average_score": "averageScore",
    "satisfaction_rate": "satisfactionRate",
    "total_surveys": "totalSurveys",
  });
});

/** @internal */
export type MonthlySurveyData$Outbound = {
  average_score: number;
  month: string;
  satisfaction_rate: number;
  total_surveys: number;
};

/** @internal */
export const MonthlySurveyData$outboundSchema: z.ZodType<
  MonthlySurveyData$Outbound,
  z.ZodTypeDef,
  MonthlySurveyData
> = z.object({
  averageScore: z.number(),
  month: z.string(),
  satisfactionRate: z.number(),
  totalSurveys: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    averageScore: "average_score",
    satisfactionRate: "satisfaction_rate",
    totalSurveys: "total_surveys",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MonthlySurveyData$ {
  /** @deprecated use `MonthlySurveyData$inboundSchema` instead. */
  export const inboundSchema = MonthlySurveyData$inboundSchema;
  /** @deprecated use `MonthlySurveyData$outboundSchema` instead. */
  export const outboundSchema = MonthlySurveyData$outboundSchema;
  /** @deprecated use `MonthlySurveyData$Outbound` instead. */
  export type Outbound = MonthlySurveyData$Outbound;
}

export function monthlySurveyDataToJSON(
  monthlySurveyData: MonthlySurveyData,
): string {
  return JSON.stringify(
    MonthlySurveyData$outboundSchema.parse(monthlySurveyData),
  );
}

export function monthlySurveyDataFromJSON(
  jsonString: string,
): SafeParseResult<MonthlySurveyData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MonthlySurveyData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MonthlySurveyData' from JSON`,
  );
}
