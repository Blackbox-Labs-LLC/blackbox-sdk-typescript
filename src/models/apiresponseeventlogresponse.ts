/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseEventLogResponseData = {
  createdAt: string;
  eventType: string;
  id: string;
  metadata?: any | undefined;
  organizationId: string;
  ticketId?: string | null | undefined;
  ticketSubject?: string | null | undefined;
  userId?: string | null | undefined;
  userName?: string | null | undefined;
};

export type ApiResponseEventLogResponse = {
  data?: ApiResponseEventLogResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseEventLogResponseData$inboundSchema: z.ZodType<
  ApiResponseEventLogResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  event_type: z.string(),
  id: z.string(),
  metadata: z.any().optional(),
  organization_id: z.string(),
  ticket_id: z.nullable(z.string()).optional(),
  ticket_subject: z.nullable(z.string()).optional(),
  user_id: z.nullable(z.string()).optional(),
  user_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "event_type": "eventType",
    "organization_id": "organizationId",
    "ticket_id": "ticketId",
    "ticket_subject": "ticketSubject",
    "user_id": "userId",
    "user_name": "userName",
  });
});

/** @internal */
export type ApiResponseEventLogResponseData$Outbound = {
  created_at: string;
  event_type: string;
  id: string;
  metadata?: any | undefined;
  organization_id: string;
  ticket_id?: string | null | undefined;
  ticket_subject?: string | null | undefined;
  user_id?: string | null | undefined;
  user_name?: string | null | undefined;
};

/** @internal */
export const ApiResponseEventLogResponseData$outboundSchema: z.ZodType<
  ApiResponseEventLogResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseEventLogResponseData
> = z.object({
  createdAt: z.string(),
  eventType: z.string(),
  id: z.string(),
  metadata: z.any().optional(),
  organizationId: z.string(),
  ticketId: z.nullable(z.string()).optional(),
  ticketSubject: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
  userName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    eventType: "event_type",
    organizationId: "organization_id",
    ticketId: "ticket_id",
    ticketSubject: "ticket_subject",
    userId: "user_id",
    userName: "user_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseEventLogResponseData$ {
  /** @deprecated use `ApiResponseEventLogResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseEventLogResponseData$inboundSchema;
  /** @deprecated use `ApiResponseEventLogResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseEventLogResponseData$outboundSchema;
  /** @deprecated use `ApiResponseEventLogResponseData$Outbound` instead. */
  export type Outbound = ApiResponseEventLogResponseData$Outbound;
}

export function apiResponseEventLogResponseDataToJSON(
  apiResponseEventLogResponseData: ApiResponseEventLogResponseData,
): string {
  return JSON.stringify(
    ApiResponseEventLogResponseData$outboundSchema.parse(
      apiResponseEventLogResponseData,
    ),
  );
}

export function apiResponseEventLogResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseEventLogResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseEventLogResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseEventLogResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseEventLogResponse$inboundSchema: z.ZodType<
  ApiResponseEventLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseEventLogResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseEventLogResponse$Outbound = {
  data?: ApiResponseEventLogResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseEventLogResponse$outboundSchema: z.ZodType<
  ApiResponseEventLogResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseEventLogResponse
> = z.object({
  data: z.lazy(() => ApiResponseEventLogResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseEventLogResponse$ {
  /** @deprecated use `ApiResponseEventLogResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseEventLogResponse$inboundSchema;
  /** @deprecated use `ApiResponseEventLogResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseEventLogResponse$outboundSchema;
  /** @deprecated use `ApiResponseEventLogResponse$Outbound` instead. */
  export type Outbound = ApiResponseEventLogResponse$Outbound;
}

export function apiResponseEventLogResponseToJSON(
  apiResponseEventLogResponse: ApiResponseEventLogResponse,
): string {
  return JSON.stringify(
    ApiResponseEventLogResponse$outboundSchema.parse(
      apiResponseEventLogResponse,
    ),
  );
}

export function apiResponseEventLogResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseEventLogResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseEventLogResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseEventLogResponse' from JSON`,
  );
}
