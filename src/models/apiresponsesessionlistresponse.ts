/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SessionInfo,
  SessionInfo$inboundSchema,
  SessionInfo$Outbound,
  SessionInfo$outboundSchema,
} from "./sessioninfo.js";

export type ApiResponseSessionListResponseData = {
  sessions: Array<SessionInfo>;
  total: number;
};

export type ApiResponseSessionListResponse = {
  data?: ApiResponseSessionListResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSessionListResponseData$inboundSchema: z.ZodType<
  ApiResponseSessionListResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  sessions: z.array(SessionInfo$inboundSchema),
  total: z.number().int(),
});

/** @internal */
export type ApiResponseSessionListResponseData$Outbound = {
  sessions: Array<SessionInfo$Outbound>;
  total: number;
};

/** @internal */
export const ApiResponseSessionListResponseData$outboundSchema: z.ZodType<
  ApiResponseSessionListResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseSessionListResponseData
> = z.object({
  sessions: z.array(SessionInfo$outboundSchema),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSessionListResponseData$ {
  /** @deprecated use `ApiResponseSessionListResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSessionListResponseData$inboundSchema;
  /** @deprecated use `ApiResponseSessionListResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseSessionListResponseData$outboundSchema;
  /** @deprecated use `ApiResponseSessionListResponseData$Outbound` instead. */
  export type Outbound = ApiResponseSessionListResponseData$Outbound;
}

export function apiResponseSessionListResponseDataToJSON(
  apiResponseSessionListResponseData: ApiResponseSessionListResponseData,
): string {
  return JSON.stringify(
    ApiResponseSessionListResponseData$outboundSchema.parse(
      apiResponseSessionListResponseData,
    ),
  );
}

export function apiResponseSessionListResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSessionListResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseSessionListResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSessionListResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseSessionListResponse$inboundSchema: z.ZodType<
  ApiResponseSessionListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseSessionListResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseSessionListResponse$Outbound = {
  data?: ApiResponseSessionListResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSessionListResponse$outboundSchema: z.ZodType<
  ApiResponseSessionListResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseSessionListResponse
> = z.object({
  data: z.lazy(() => ApiResponseSessionListResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSessionListResponse$ {
  /** @deprecated use `ApiResponseSessionListResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSessionListResponse$inboundSchema;
  /** @deprecated use `ApiResponseSessionListResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSessionListResponse$outboundSchema;
  /** @deprecated use `ApiResponseSessionListResponse$Outbound` instead. */
  export type Outbound = ApiResponseSessionListResponse$Outbound;
}

export function apiResponseSessionListResponseToJSON(
  apiResponseSessionListResponse: ApiResponseSessionListResponse,
): string {
  return JSON.stringify(
    ApiResponseSessionListResponse$outboundSchema.parse(
      apiResponseSessionListResponse,
    ),
  );
}

export function apiResponseSessionListResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSessionListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSessionListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSessionListResponse' from JSON`,
  );
}
