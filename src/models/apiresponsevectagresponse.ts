/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecTagResponseData = {
  color: string;
  id: string;
  name: string;
  ticketCount: number;
};

export type ApiResponseVecTagResponse = {
  data?: Array<ApiResponseVecTagResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecTagResponseData$inboundSchema: z.ZodType<
  ApiResponseVecTagResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: z.string(),
  id: z.string(),
  name: z.string(),
  ticket_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "ticket_count": "ticketCount",
  });
});

/** @internal */
export type ApiResponseVecTagResponseData$Outbound = {
  color: string;
  id: string;
  name: string;
  ticket_count: number;
};

/** @internal */
export const ApiResponseVecTagResponseData$outboundSchema: z.ZodType<
  ApiResponseVecTagResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecTagResponseData
> = z.object({
  color: z.string(),
  id: z.string(),
  name: z.string(),
  ticketCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    ticketCount: "ticket_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecTagResponseData$ {
  /** @deprecated use `ApiResponseVecTagResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecTagResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecTagResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecTagResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecTagResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecTagResponseData$Outbound;
}

export function apiResponseVecTagResponseDataToJSON(
  apiResponseVecTagResponseData: ApiResponseVecTagResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecTagResponseData$outboundSchema.parse(
      apiResponseVecTagResponseData,
    ),
  );
}

export function apiResponseVecTagResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecTagResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecTagResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecTagResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecTagResponse$inboundSchema: z.ZodType<
  ApiResponseVecTagResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecTagResponseData$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecTagResponse$Outbound = {
  data?: Array<ApiResponseVecTagResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecTagResponse$outboundSchema: z.ZodType<
  ApiResponseVecTagResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecTagResponse
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecTagResponseData$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecTagResponse$ {
  /** @deprecated use `ApiResponseVecTagResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecTagResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecTagResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecTagResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecTagResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecTagResponse$Outbound;
}

export function apiResponseVecTagResponseToJSON(
  apiResponseVecTagResponse: ApiResponseVecTagResponse,
): string {
  return JSON.stringify(
    ApiResponseVecTagResponse$outboundSchema.parse(apiResponseVecTagResponse),
  );
}

export function apiResponseVecTagResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecTagResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecTagResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecTagResponse' from JSON`,
  );
}
