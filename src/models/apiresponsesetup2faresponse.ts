/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseSetup2FAResponseData = {
  backupCodes: Array<string>;
  qrCodeSvg: string;
  qrCodeUrl: string;
  secret: string;
};

export type ApiResponseSetup2FAResponse = {
  data?: ApiResponseSetup2FAResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSetup2FAResponseData$inboundSchema: z.ZodType<
  ApiResponseSetup2FAResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  backup_codes: z.array(z.string()),
  qr_code_svg: z.string(),
  qr_code_url: z.string(),
  secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    "backup_codes": "backupCodes",
    "qr_code_svg": "qrCodeSvg",
    "qr_code_url": "qrCodeUrl",
  });
});

/** @internal */
export type ApiResponseSetup2FAResponseData$Outbound = {
  backup_codes: Array<string>;
  qr_code_svg: string;
  qr_code_url: string;
  secret: string;
};

/** @internal */
export const ApiResponseSetup2FAResponseData$outboundSchema: z.ZodType<
  ApiResponseSetup2FAResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseSetup2FAResponseData
> = z.object({
  backupCodes: z.array(z.string()),
  qrCodeSvg: z.string(),
  qrCodeUrl: z.string(),
  secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    backupCodes: "backup_codes",
    qrCodeSvg: "qr_code_svg",
    qrCodeUrl: "qr_code_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSetup2FAResponseData$ {
  /** @deprecated use `ApiResponseSetup2FAResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSetup2FAResponseData$inboundSchema;
  /** @deprecated use `ApiResponseSetup2FAResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSetup2FAResponseData$outboundSchema;
  /** @deprecated use `ApiResponseSetup2FAResponseData$Outbound` instead. */
  export type Outbound = ApiResponseSetup2FAResponseData$Outbound;
}

export function apiResponseSetup2FAResponseDataToJSON(
  apiResponseSetup2FAResponseData: ApiResponseSetup2FAResponseData,
): string {
  return JSON.stringify(
    ApiResponseSetup2FAResponseData$outboundSchema.parse(
      apiResponseSetup2FAResponseData,
    ),
  );
}

export function apiResponseSetup2FAResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSetup2FAResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSetup2FAResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSetup2FAResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseSetup2FAResponse$inboundSchema: z.ZodType<
  ApiResponseSetup2FAResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseSetup2FAResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseSetup2FAResponse$Outbound = {
  data?: ApiResponseSetup2FAResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSetup2FAResponse$outboundSchema: z.ZodType<
  ApiResponseSetup2FAResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseSetup2FAResponse
> = z.object({
  data: z.lazy(() => ApiResponseSetup2FAResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSetup2FAResponse$ {
  /** @deprecated use `ApiResponseSetup2FAResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSetup2FAResponse$inboundSchema;
  /** @deprecated use `ApiResponseSetup2FAResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSetup2FAResponse$outboundSchema;
  /** @deprecated use `ApiResponseSetup2FAResponse$Outbound` instead. */
  export type Outbound = ApiResponseSetup2FAResponse$Outbound;
}

export function apiResponseSetup2FAResponseToJSON(
  apiResponseSetup2FAResponse: ApiResponseSetup2FAResponse,
): string {
  return JSON.stringify(
    ApiResponseSetup2FAResponse$outboundSchema.parse(
      apiResponseSetup2FAResponse,
    ),
  );
}

export function apiResponseSetup2FAResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSetup2FAResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSetup2FAResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSetup2FAResponse' from JSON`,
  );
}
