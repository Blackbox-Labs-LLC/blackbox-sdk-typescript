/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PasswordResetRequest = {
  email: string;
};

/** @internal */
export const PasswordResetRequest$inboundSchema: z.ZodType<
  PasswordResetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
});

/** @internal */
export type PasswordResetRequest$Outbound = {
  email: string;
};

/** @internal */
export const PasswordResetRequest$outboundSchema: z.ZodType<
  PasswordResetRequest$Outbound,
  z.ZodTypeDef,
  PasswordResetRequest
> = z.object({
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PasswordResetRequest$ {
  /** @deprecated use `PasswordResetRequest$inboundSchema` instead. */
  export const inboundSchema = PasswordResetRequest$inboundSchema;
  /** @deprecated use `PasswordResetRequest$outboundSchema` instead. */
  export const outboundSchema = PasswordResetRequest$outboundSchema;
  /** @deprecated use `PasswordResetRequest$Outbound` instead. */
  export type Outbound = PasswordResetRequest$Outbound;
}

export function passwordResetRequestToJSON(
  passwordResetRequest: PasswordResetRequest,
): string {
  return JSON.stringify(
    PasswordResetRequest$outboundSchema.parse(passwordResetRequest),
  );
}

export function passwordResetRequestFromJSON(
  jsonString: string,
): SafeParseResult<PasswordResetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PasswordResetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PasswordResetRequest' from JSON`,
  );
}
