/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AgentActivity,
  AgentActivity$inboundSchema,
  AgentActivity$Outbound,
  AgentActivity$outboundSchema,
} from "./agentactivity.js";
import {
  AgentPerformance,
  AgentPerformance$inboundSchema,
  AgentPerformance$Outbound,
  AgentPerformance$outboundSchema,
} from "./agentperformance.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseAgentAnalyticsData = {
  activeAgentsToday: number;
  agentActivity: Array<AgentActivity>;
  averageTicketsPerAgent: number;
  topPerformers: Array<AgentPerformance>;
  totalAgents: number;
};

export type ApiResponseAgentAnalytics = {
  data?: ApiResponseAgentAnalyticsData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAgentAnalyticsData$inboundSchema: z.ZodType<
  ApiResponseAgentAnalyticsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  active_agents_today: z.number().int(),
  agent_activity: z.array(AgentActivity$inboundSchema),
  average_tickets_per_agent: z.number(),
  top_performers: z.array(AgentPerformance$inboundSchema),
  total_agents: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "active_agents_today": "activeAgentsToday",
    "agent_activity": "agentActivity",
    "average_tickets_per_agent": "averageTicketsPerAgent",
    "top_performers": "topPerformers",
    "total_agents": "totalAgents",
  });
});

/** @internal */
export type ApiResponseAgentAnalyticsData$Outbound = {
  active_agents_today: number;
  agent_activity: Array<AgentActivity$Outbound>;
  average_tickets_per_agent: number;
  top_performers: Array<AgentPerformance$Outbound>;
  total_agents: number;
};

/** @internal */
export const ApiResponseAgentAnalyticsData$outboundSchema: z.ZodType<
  ApiResponseAgentAnalyticsData$Outbound,
  z.ZodTypeDef,
  ApiResponseAgentAnalyticsData
> = z.object({
  activeAgentsToday: z.number().int(),
  agentActivity: z.array(AgentActivity$outboundSchema),
  averageTicketsPerAgent: z.number(),
  topPerformers: z.array(AgentPerformance$outboundSchema),
  totalAgents: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    activeAgentsToday: "active_agents_today",
    agentActivity: "agent_activity",
    averageTicketsPerAgent: "average_tickets_per_agent",
    topPerformers: "top_performers",
    totalAgents: "total_agents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAgentAnalyticsData$ {
  /** @deprecated use `ApiResponseAgentAnalyticsData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseAgentAnalyticsData$inboundSchema;
  /** @deprecated use `ApiResponseAgentAnalyticsData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseAgentAnalyticsData$outboundSchema;
  /** @deprecated use `ApiResponseAgentAnalyticsData$Outbound` instead. */
  export type Outbound = ApiResponseAgentAnalyticsData$Outbound;
}

export function apiResponseAgentAnalyticsDataToJSON(
  apiResponseAgentAnalyticsData: ApiResponseAgentAnalyticsData,
): string {
  return JSON.stringify(
    ApiResponseAgentAnalyticsData$outboundSchema.parse(
      apiResponseAgentAnalyticsData,
    ),
  );
}

export function apiResponseAgentAnalyticsDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAgentAnalyticsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseAgentAnalyticsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAgentAnalyticsData' from JSON`,
  );
}

/** @internal */
export const ApiResponseAgentAnalytics$inboundSchema: z.ZodType<
  ApiResponseAgentAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseAgentAnalyticsData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseAgentAnalytics$Outbound = {
  data?: ApiResponseAgentAnalyticsData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseAgentAnalytics$outboundSchema: z.ZodType<
  ApiResponseAgentAnalytics$Outbound,
  z.ZodTypeDef,
  ApiResponseAgentAnalytics
> = z.object({
  data: z.lazy(() => ApiResponseAgentAnalyticsData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseAgentAnalytics$ {
  /** @deprecated use `ApiResponseAgentAnalytics$inboundSchema` instead. */
  export const inboundSchema = ApiResponseAgentAnalytics$inboundSchema;
  /** @deprecated use `ApiResponseAgentAnalytics$outboundSchema` instead. */
  export const outboundSchema = ApiResponseAgentAnalytics$outboundSchema;
  /** @deprecated use `ApiResponseAgentAnalytics$Outbound` instead. */
  export type Outbound = ApiResponseAgentAnalytics$Outbound;
}

export function apiResponseAgentAnalyticsToJSON(
  apiResponseAgentAnalytics: ApiResponseAgentAnalytics,
): string {
  return JSON.stringify(
    ApiResponseAgentAnalytics$outboundSchema.parse(apiResponseAgentAnalytics),
  );
}

export function apiResponseAgentAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseAgentAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseAgentAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseAgentAnalytics' from JSON`,
  );
}
