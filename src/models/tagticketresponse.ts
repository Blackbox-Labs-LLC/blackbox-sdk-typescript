/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TagTicketResponse = {
  createdAt: string;
  id: string;
  priority: string;
  status: string;
  subject: string;
};

/** @internal */
export const TagTicketResponse$inboundSchema: z.ZodType<
  TagTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  id: z.string(),
  priority: z.string(),
  status: z.string(),
  subject: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type TagTicketResponse$Outbound = {
  created_at: string;
  id: string;
  priority: string;
  status: string;
  subject: string;
};

/** @internal */
export const TagTicketResponse$outboundSchema: z.ZodType<
  TagTicketResponse$Outbound,
  z.ZodTypeDef,
  TagTicketResponse
> = z.object({
  createdAt: z.string(),
  id: z.string(),
  priority: z.string(),
  status: z.string(),
  subject: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagTicketResponse$ {
  /** @deprecated use `TagTicketResponse$inboundSchema` instead. */
  export const inboundSchema = TagTicketResponse$inboundSchema;
  /** @deprecated use `TagTicketResponse$outboundSchema` instead. */
  export const outboundSchema = TagTicketResponse$outboundSchema;
  /** @deprecated use `TagTicketResponse$Outbound` instead. */
  export type Outbound = TagTicketResponse$Outbound;
}

export function tagTicketResponseToJSON(
  tagTicketResponse: TagTicketResponse,
): string {
  return JSON.stringify(
    TagTicketResponse$outboundSchema.parse(tagTicketResponse),
  );
}

export function tagTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<TagTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagTicketResponse' from JSON`,
  );
}
