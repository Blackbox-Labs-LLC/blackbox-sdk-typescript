/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseWebhookTestResultData = {
  errorMessage?: string | null | undefined;
  responseCode?: number | null | undefined;
  responseTimeMs: number;
  success: boolean;
  webhookId: string;
};

export type ApiResponseWebhookTestResult = {
  data?: ApiResponseWebhookTestResultData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseWebhookTestResultData$inboundSchema: z.ZodType<
  ApiResponseWebhookTestResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  error_message: z.nullable(z.string()).optional(),
  response_code: z.nullable(z.number().int()).optional(),
  response_time_ms: z.number().int(),
  success: z.boolean(),
  webhook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "error_message": "errorMessage",
    "response_code": "responseCode",
    "response_time_ms": "responseTimeMs",
    "webhook_id": "webhookId",
  });
});

/** @internal */
export type ApiResponseWebhookTestResultData$Outbound = {
  error_message?: string | null | undefined;
  response_code?: number | null | undefined;
  response_time_ms: number;
  success: boolean;
  webhook_id: string;
};

/** @internal */
export const ApiResponseWebhookTestResultData$outboundSchema: z.ZodType<
  ApiResponseWebhookTestResultData$Outbound,
  z.ZodTypeDef,
  ApiResponseWebhookTestResultData
> = z.object({
  errorMessage: z.nullable(z.string()).optional(),
  responseCode: z.nullable(z.number().int()).optional(),
  responseTimeMs: z.number().int(),
  success: z.boolean(),
  webhookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    errorMessage: "error_message",
    responseCode: "response_code",
    responseTimeMs: "response_time_ms",
    webhookId: "webhook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseWebhookTestResultData$ {
  /** @deprecated use `ApiResponseWebhookTestResultData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseWebhookTestResultData$inboundSchema;
  /** @deprecated use `ApiResponseWebhookTestResultData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseWebhookTestResultData$outboundSchema;
  /** @deprecated use `ApiResponseWebhookTestResultData$Outbound` instead. */
  export type Outbound = ApiResponseWebhookTestResultData$Outbound;
}

export function apiResponseWebhookTestResultDataToJSON(
  apiResponseWebhookTestResultData: ApiResponseWebhookTestResultData,
): string {
  return JSON.stringify(
    ApiResponseWebhookTestResultData$outboundSchema.parse(
      apiResponseWebhookTestResultData,
    ),
  );
}

export function apiResponseWebhookTestResultDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseWebhookTestResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseWebhookTestResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseWebhookTestResultData' from JSON`,
  );
}

/** @internal */
export const ApiResponseWebhookTestResult$inboundSchema: z.ZodType<
  ApiResponseWebhookTestResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseWebhookTestResultData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseWebhookTestResult$Outbound = {
  data?: ApiResponseWebhookTestResultData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseWebhookTestResult$outboundSchema: z.ZodType<
  ApiResponseWebhookTestResult$Outbound,
  z.ZodTypeDef,
  ApiResponseWebhookTestResult
> = z.object({
  data: z.lazy(() => ApiResponseWebhookTestResultData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseWebhookTestResult$ {
  /** @deprecated use `ApiResponseWebhookTestResult$inboundSchema` instead. */
  export const inboundSchema = ApiResponseWebhookTestResult$inboundSchema;
  /** @deprecated use `ApiResponseWebhookTestResult$outboundSchema` instead. */
  export const outboundSchema = ApiResponseWebhookTestResult$outboundSchema;
  /** @deprecated use `ApiResponseWebhookTestResult$Outbound` instead. */
  export type Outbound = ApiResponseWebhookTestResult$Outbound;
}

export function apiResponseWebhookTestResultToJSON(
  apiResponseWebhookTestResult: ApiResponseWebhookTestResult,
): string {
  return JSON.stringify(
    ApiResponseWebhookTestResult$outboundSchema.parse(
      apiResponseWebhookTestResult,
    ),
  );
}

export function apiResponseWebhookTestResultFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseWebhookTestResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseWebhookTestResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseWebhookTestResult' from JSON`,
  );
}
