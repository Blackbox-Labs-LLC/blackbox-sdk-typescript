/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseOptionOrganizationSettingResponseData = {
  createdAt: string;
  id: string;
  key: string;
  updatedAt: string;
  value?: any | undefined;
};

export type ApiResponseOptionOrganizationSettingResponse = {
  data?: ApiResponseOptionOrganizationSettingResponseData | null | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOptionOrganizationSettingResponseData$inboundSchema:
  z.ZodType<
    ApiResponseOptionOrganizationSettingResponseData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    created_at: z.string(),
    id: z.string(),
    key: z.string(),
    updated_at: z.string(),
    value: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type ApiResponseOptionOrganizationSettingResponseData$Outbound = {
  created_at: string;
  id: string;
  key: string;
  updated_at: string;
  value?: any | undefined;
};

/** @internal */
export const ApiResponseOptionOrganizationSettingResponseData$outboundSchema:
  z.ZodType<
    ApiResponseOptionOrganizationSettingResponseData$Outbound,
    z.ZodTypeDef,
    ApiResponseOptionOrganizationSettingResponseData
  > = z.object({
    createdAt: z.string(),
    id: z.string(),
    key: z.string(),
    updatedAt: z.string(),
    value: z.any().optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOptionOrganizationSettingResponseData$ {
  /** @deprecated use `ApiResponseOptionOrganizationSettingResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseOptionOrganizationSettingResponseData$inboundSchema;
  /** @deprecated use `ApiResponseOptionOrganizationSettingResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseOptionOrganizationSettingResponseData$outboundSchema;
  /** @deprecated use `ApiResponseOptionOrganizationSettingResponseData$Outbound` instead. */
  export type Outbound =
    ApiResponseOptionOrganizationSettingResponseData$Outbound;
}

export function apiResponseOptionOrganizationSettingResponseDataToJSON(
  apiResponseOptionOrganizationSettingResponseData:
    ApiResponseOptionOrganizationSettingResponseData,
): string {
  return JSON.stringify(
    ApiResponseOptionOrganizationSettingResponseData$outboundSchema.parse(
      apiResponseOptionOrganizationSettingResponseData,
    ),
  );
}

export function apiResponseOptionOrganizationSettingResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseOptionOrganizationSettingResponseData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseOptionOrganizationSettingResponseData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseOptionOrganizationSettingResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseOptionOrganizationSettingResponse$inboundSchema:
  z.ZodType<
    ApiResponseOptionOrganizationSettingResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.nullable(
      z.lazy(() =>
        ApiResponseOptionOrganizationSettingResponseData$inboundSchema
      ),
    ).optional(),
    message: z.nullable(z.string()).optional(),
    success: z.boolean(),
  });

/** @internal */
export type ApiResponseOptionOrganizationSettingResponse$Outbound = {
  data?:
    | ApiResponseOptionOrganizationSettingResponseData$Outbound
    | null
    | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseOptionOrganizationSettingResponse$outboundSchema:
  z.ZodType<
    ApiResponseOptionOrganizationSettingResponse$Outbound,
    z.ZodTypeDef,
    ApiResponseOptionOrganizationSettingResponse
  > = z.object({
    data: z.nullable(
      z.lazy(() =>
        ApiResponseOptionOrganizationSettingResponseData$outboundSchema
      ),
    ).optional(),
    message: z.nullable(z.string()).optional(),
    success: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseOptionOrganizationSettingResponse$ {
  /** @deprecated use `ApiResponseOptionOrganizationSettingResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseOptionOrganizationSettingResponse$inboundSchema;
  /** @deprecated use `ApiResponseOptionOrganizationSettingResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseOptionOrganizationSettingResponse$outboundSchema;
  /** @deprecated use `ApiResponseOptionOrganizationSettingResponse$Outbound` instead. */
  export type Outbound = ApiResponseOptionOrganizationSettingResponse$Outbound;
}

export function apiResponseOptionOrganizationSettingResponseToJSON(
  apiResponseOptionOrganizationSettingResponse:
    ApiResponseOptionOrganizationSettingResponse,
): string {
  return JSON.stringify(
    ApiResponseOptionOrganizationSettingResponse$outboundSchema.parse(
      apiResponseOptionOrganizationSettingResponse,
    ),
  );
}

export function apiResponseOptionOrganizationSettingResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseOptionOrganizationSettingResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseOptionOrganizationSettingResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseOptionOrganizationSettingResponse' from JSON`,
  );
}
