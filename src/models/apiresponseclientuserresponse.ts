/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseClientUserResponseData = {
  email?: string | null | undefined;
  isAuthenticated: boolean;
  name?: string | null | undefined;
  userId: string;
};

export type ApiResponseClientUserResponse = {
  data?: ApiResponseClientUserResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseClientUserResponseData$inboundSchema: z.ZodType<
  ApiResponseClientUserResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  is_authenticated: z.boolean(),
  name: z.nullable(z.string()).optional(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "is_authenticated": "isAuthenticated",
    "user_id": "userId",
  });
});

/** @internal */
export type ApiResponseClientUserResponseData$Outbound = {
  email?: string | null | undefined;
  is_authenticated: boolean;
  name?: string | null | undefined;
  user_id: string;
};

/** @internal */
export const ApiResponseClientUserResponseData$outboundSchema: z.ZodType<
  ApiResponseClientUserResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseClientUserResponseData
> = z.object({
  email: z.nullable(z.string()).optional(),
  isAuthenticated: z.boolean(),
  name: z.nullable(z.string()).optional(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    isAuthenticated: "is_authenticated",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseClientUserResponseData$ {
  /** @deprecated use `ApiResponseClientUserResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseClientUserResponseData$inboundSchema;
  /** @deprecated use `ApiResponseClientUserResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseClientUserResponseData$outboundSchema;
  /** @deprecated use `ApiResponseClientUserResponseData$Outbound` instead. */
  export type Outbound = ApiResponseClientUserResponseData$Outbound;
}

export function apiResponseClientUserResponseDataToJSON(
  apiResponseClientUserResponseData: ApiResponseClientUserResponseData,
): string {
  return JSON.stringify(
    ApiResponseClientUserResponseData$outboundSchema.parse(
      apiResponseClientUserResponseData,
    ),
  );
}

export function apiResponseClientUserResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseClientUserResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseClientUserResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseClientUserResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseClientUserResponse$inboundSchema: z.ZodType<
  ApiResponseClientUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseClientUserResponseData$inboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseClientUserResponse$Outbound = {
  data?: ApiResponseClientUserResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseClientUserResponse$outboundSchema: z.ZodType<
  ApiResponseClientUserResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseClientUserResponse
> = z.object({
  data: z.lazy(() => ApiResponseClientUserResponseData$outboundSchema)
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseClientUserResponse$ {
  /** @deprecated use `ApiResponseClientUserResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseClientUserResponse$inboundSchema;
  /** @deprecated use `ApiResponseClientUserResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseClientUserResponse$outboundSchema;
  /** @deprecated use `ApiResponseClientUserResponse$Outbound` instead. */
  export type Outbound = ApiResponseClientUserResponse$Outbound;
}

export function apiResponseClientUserResponseToJSON(
  apiResponseClientUserResponse: ApiResponseClientUserResponse,
): string {
  return JSON.stringify(
    ApiResponseClientUserResponse$outboundSchema.parse(
      apiResponseClientUserResponse,
    ),
  );
}

export function apiResponseClientUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseClientUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseClientUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseClientUserResponse' from JSON`,
  );
}
