/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecAttachmentResponseData = {
  contentType: string;
  downloadUrl: string;
  fileSize: number;
  filename: string;
  id: string;
  originalFilename: string;
  uploadedAt: string;
};

export type ApiResponseVecAttachmentResponse = {
  data?: Array<ApiResponseVecAttachmentResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecAttachmentResponseData$inboundSchema: z.ZodType<
  ApiResponseVecAttachmentResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content_type: z.string(),
  download_url: z.string(),
  file_size: z.number().int(),
  filename: z.string(),
  id: z.string(),
  original_filename: z.string(),
  uploaded_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "content_type": "contentType",
    "download_url": "downloadUrl",
    "file_size": "fileSize",
    "original_filename": "originalFilename",
    "uploaded_at": "uploadedAt",
  });
});

/** @internal */
export type ApiResponseVecAttachmentResponseData$Outbound = {
  content_type: string;
  download_url: string;
  file_size: number;
  filename: string;
  id: string;
  original_filename: string;
  uploaded_at: string;
};

/** @internal */
export const ApiResponseVecAttachmentResponseData$outboundSchema: z.ZodType<
  ApiResponseVecAttachmentResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecAttachmentResponseData
> = z.object({
  contentType: z.string(),
  downloadUrl: z.string(),
  fileSize: z.number().int(),
  filename: z.string(),
  id: z.string(),
  originalFilename: z.string(),
  uploadedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    contentType: "content_type",
    downloadUrl: "download_url",
    fileSize: "file_size",
    originalFilename: "original_filename",
    uploadedAt: "uploaded_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecAttachmentResponseData$ {
  /** @deprecated use `ApiResponseVecAttachmentResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecAttachmentResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecAttachmentResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecAttachmentResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecAttachmentResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecAttachmentResponseData$Outbound;
}

export function apiResponseVecAttachmentResponseDataToJSON(
  apiResponseVecAttachmentResponseData: ApiResponseVecAttachmentResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecAttachmentResponseData$outboundSchema.parse(
      apiResponseVecAttachmentResponseData,
    ),
  );
}

export function apiResponseVecAttachmentResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecAttachmentResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecAttachmentResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecAttachmentResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecAttachmentResponse$inboundSchema: z.ZodType<
  ApiResponseVecAttachmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecAttachmentResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecAttachmentResponse$Outbound = {
  data?: Array<ApiResponseVecAttachmentResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecAttachmentResponse$outboundSchema: z.ZodType<
  ApiResponseVecAttachmentResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecAttachmentResponse
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecAttachmentResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecAttachmentResponse$ {
  /** @deprecated use `ApiResponseVecAttachmentResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecAttachmentResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecAttachmentResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecAttachmentResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecAttachmentResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecAttachmentResponse$Outbound;
}

export function apiResponseVecAttachmentResponseToJSON(
  apiResponseVecAttachmentResponse: ApiResponseVecAttachmentResponse,
): string {
  return JSON.stringify(
    ApiResponseVecAttachmentResponse$outboundSchema.parse(
      apiResponseVecAttachmentResponse,
    ),
  );
}

export function apiResponseVecAttachmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecAttachmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecAttachmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecAttachmentResponse' from JSON`,
  );
}
