/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateArticleRequest = {
  content: string;
  public: boolean;
  title: string;
};

/** @internal */
export const CreateArticleRequest$inboundSchema: z.ZodType<
  CreateArticleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  public: z.boolean(),
  title: z.string(),
});

/** @internal */
export type CreateArticleRequest$Outbound = {
  content: string;
  public: boolean;
  title: string;
};

/** @internal */
export const CreateArticleRequest$outboundSchema: z.ZodType<
  CreateArticleRequest$Outbound,
  z.ZodTypeDef,
  CreateArticleRequest
> = z.object({
  content: z.string(),
  public: z.boolean(),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateArticleRequest$ {
  /** @deprecated use `CreateArticleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateArticleRequest$inboundSchema;
  /** @deprecated use `CreateArticleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateArticleRequest$outboundSchema;
  /** @deprecated use `CreateArticleRequest$Outbound` instead. */
  export type Outbound = CreateArticleRequest$Outbound;
}

export function createArticleRequestToJSON(
  createArticleRequest: CreateArticleRequest,
): string {
  return JSON.stringify(
    CreateArticleRequest$outboundSchema.parse(createArticleRequest),
  );
}

export function createArticleRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateArticleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateArticleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateArticleRequest' from JSON`,
  );
}
