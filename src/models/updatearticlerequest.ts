/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpdateArticleRequest = {
  content?: string | null | undefined;
  public?: boolean | null | undefined;
  title?: string | null | undefined;
};

/** @internal */
export const UpdateArticleRequest$inboundSchema: z.ZodType<
  UpdateArticleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  public: z.nullable(z.boolean()).optional(),
  title: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateArticleRequest$Outbound = {
  content?: string | null | undefined;
  public?: boolean | null | undefined;
  title?: string | null | undefined;
};

/** @internal */
export const UpdateArticleRequest$outboundSchema: z.ZodType<
  UpdateArticleRequest$Outbound,
  z.ZodTypeDef,
  UpdateArticleRequest
> = z.object({
  content: z.nullable(z.string()).optional(),
  public: z.nullable(z.boolean()).optional(),
  title: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateArticleRequest$ {
  /** @deprecated use `UpdateArticleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateArticleRequest$inboundSchema;
  /** @deprecated use `UpdateArticleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateArticleRequest$outboundSchema;
  /** @deprecated use `UpdateArticleRequest$Outbound` instead. */
  export type Outbound = UpdateArticleRequest$Outbound;
}

export function updateArticleRequestToJSON(
  updateArticleRequest: UpdateArticleRequest,
): string {
  return JSON.stringify(
    UpdateArticleRequest$outboundSchema.parse(updateArticleRequest),
  );
}

export function updateArticleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateArticleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateArticleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateArticleRequest' from JSON`,
  );
}
