/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AgentSatisfactionScore,
  AgentSatisfactionScore$inboundSchema,
  AgentSatisfactionScore$Outbound,
  AgentSatisfactionScore$outboundSchema,
} from "./agentsatisfactionscore.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IssueCategory,
  IssueCategory$inboundSchema,
  IssueCategory$Outbound,
  IssueCategory$outboundSchema,
} from "./issuecategory.js";
import {
  MonthlySurveyData,
  MonthlySurveyData$inboundSchema,
  MonthlySurveyData$Outbound,
  MonthlySurveyData$outboundSchema,
} from "./monthlysurveydata.js";
import {
  ScoreCount,
  ScoreCount$inboundSchema,
  ScoreCount$Outbound,
  ScoreCount$outboundSchema,
} from "./scorecount.js";

export type ApiResponseCSATAnalyticsData = {
  agentSatisfaction: Array<AgentSatisfactionScore>;
  averageScore: number;
  monthlyTrends: Array<MonthlySurveyData>;
  satisfactionRate: number;
  scoreDistribution: Array<ScoreCount>;
  surveysThisMonth: number;
  surveysThisWeek: number;
  surveysToday: number;
  topIssues: Array<IssueCategory>;
  totalSurveys: number;
};

export type ApiResponseCSATAnalytics = {
  data?: ApiResponseCSATAnalyticsData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseCSATAnalyticsData$inboundSchema: z.ZodType<
  ApiResponseCSATAnalyticsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_satisfaction: z.array(AgentSatisfactionScore$inboundSchema),
  average_score: z.number(),
  monthly_trends: z.array(MonthlySurveyData$inboundSchema),
  satisfaction_rate: z.number(),
  score_distribution: z.array(ScoreCount$inboundSchema),
  surveys_this_month: z.number().int(),
  surveys_this_week: z.number().int(),
  surveys_today: z.number().int(),
  top_issues: z.array(IssueCategory$inboundSchema),
  total_surveys: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "agent_satisfaction": "agentSatisfaction",
    "average_score": "averageScore",
    "monthly_trends": "monthlyTrends",
    "satisfaction_rate": "satisfactionRate",
    "score_distribution": "scoreDistribution",
    "surveys_this_month": "surveysThisMonth",
    "surveys_this_week": "surveysThisWeek",
    "surveys_today": "surveysToday",
    "top_issues": "topIssues",
    "total_surveys": "totalSurveys",
  });
});

/** @internal */
export type ApiResponseCSATAnalyticsData$Outbound = {
  agent_satisfaction: Array<AgentSatisfactionScore$Outbound>;
  average_score: number;
  monthly_trends: Array<MonthlySurveyData$Outbound>;
  satisfaction_rate: number;
  score_distribution: Array<ScoreCount$Outbound>;
  surveys_this_month: number;
  surveys_this_week: number;
  surveys_today: number;
  top_issues: Array<IssueCategory$Outbound>;
  total_surveys: number;
};

/** @internal */
export const ApiResponseCSATAnalyticsData$outboundSchema: z.ZodType<
  ApiResponseCSATAnalyticsData$Outbound,
  z.ZodTypeDef,
  ApiResponseCSATAnalyticsData
> = z.object({
  agentSatisfaction: z.array(AgentSatisfactionScore$outboundSchema),
  averageScore: z.number(),
  monthlyTrends: z.array(MonthlySurveyData$outboundSchema),
  satisfactionRate: z.number(),
  scoreDistribution: z.array(ScoreCount$outboundSchema),
  surveysThisMonth: z.number().int(),
  surveysThisWeek: z.number().int(),
  surveysToday: z.number().int(),
  topIssues: z.array(IssueCategory$outboundSchema),
  totalSurveys: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    agentSatisfaction: "agent_satisfaction",
    averageScore: "average_score",
    monthlyTrends: "monthly_trends",
    satisfactionRate: "satisfaction_rate",
    scoreDistribution: "score_distribution",
    surveysThisMonth: "surveys_this_month",
    surveysThisWeek: "surveys_this_week",
    surveysToday: "surveys_today",
    topIssues: "top_issues",
    totalSurveys: "total_surveys",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseCSATAnalyticsData$ {
  /** @deprecated use `ApiResponseCSATAnalyticsData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseCSATAnalyticsData$inboundSchema;
  /** @deprecated use `ApiResponseCSATAnalyticsData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseCSATAnalyticsData$outboundSchema;
  /** @deprecated use `ApiResponseCSATAnalyticsData$Outbound` instead. */
  export type Outbound = ApiResponseCSATAnalyticsData$Outbound;
}

export function apiResponseCSATAnalyticsDataToJSON(
  apiResponseCSATAnalyticsData: ApiResponseCSATAnalyticsData,
): string {
  return JSON.stringify(
    ApiResponseCSATAnalyticsData$outboundSchema.parse(
      apiResponseCSATAnalyticsData,
    ),
  );
}

export function apiResponseCSATAnalyticsDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseCSATAnalyticsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseCSATAnalyticsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseCSATAnalyticsData' from JSON`,
  );
}

/** @internal */
export const ApiResponseCSATAnalytics$inboundSchema: z.ZodType<
  ApiResponseCSATAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseCSATAnalyticsData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseCSATAnalytics$Outbound = {
  data?: ApiResponseCSATAnalyticsData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseCSATAnalytics$outboundSchema: z.ZodType<
  ApiResponseCSATAnalytics$Outbound,
  z.ZodTypeDef,
  ApiResponseCSATAnalytics
> = z.object({
  data: z.lazy(() => ApiResponseCSATAnalyticsData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseCSATAnalytics$ {
  /** @deprecated use `ApiResponseCSATAnalytics$inboundSchema` instead. */
  export const inboundSchema = ApiResponseCSATAnalytics$inboundSchema;
  /** @deprecated use `ApiResponseCSATAnalytics$outboundSchema` instead. */
  export const outboundSchema = ApiResponseCSATAnalytics$outboundSchema;
  /** @deprecated use `ApiResponseCSATAnalytics$Outbound` instead. */
  export type Outbound = ApiResponseCSATAnalytics$Outbound;
}

export function apiResponseCSATAnalyticsToJSON(
  apiResponseCSATAnalytics: ApiResponseCSATAnalytics,
): string {
  return JSON.stringify(
    ApiResponseCSATAnalytics$outboundSchema.parse(apiResponseCSATAnalytics),
  );
}

export function apiResponseCSATAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseCSATAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseCSATAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseCSATAnalytics' from JSON`,
  );
}
