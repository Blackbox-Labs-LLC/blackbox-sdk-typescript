/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecOrganizationByDomainResponseData = {
  allowDomainJoin: boolean;
  createdAt: string;
  domain: string;
  id: string;
  name: string;
};

export type ApiResponseVecOrganizationByDomainResponse = {
  data?: Array<ApiResponseVecOrganizationByDomainResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecOrganizationByDomainResponseData$inboundSchema:
  z.ZodType<
    ApiResponseVecOrganizationByDomainResponseData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    allow_domain_join: z.boolean(),
    created_at: z.string(),
    domain: z.string(),
    id: z.string(),
    name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "allow_domain_join": "allowDomainJoin",
      "created_at": "createdAt",
    });
  });

/** @internal */
export type ApiResponseVecOrganizationByDomainResponseData$Outbound = {
  allow_domain_join: boolean;
  created_at: string;
  domain: string;
  id: string;
  name: string;
};

/** @internal */
export const ApiResponseVecOrganizationByDomainResponseData$outboundSchema:
  z.ZodType<
    ApiResponseVecOrganizationByDomainResponseData$Outbound,
    z.ZodTypeDef,
    ApiResponseVecOrganizationByDomainResponseData
  > = z.object({
    allowDomainJoin: z.boolean(),
    createdAt: z.string(),
    domain: z.string(),
    id: z.string(),
    name: z.string(),
  }).transform((v) => {
    return remap$(v, {
      allowDomainJoin: "allow_domain_join",
      createdAt: "created_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecOrganizationByDomainResponseData$ {
  /** @deprecated use `ApiResponseVecOrganizationByDomainResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecOrganizationByDomainResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationByDomainResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecOrganizationByDomainResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationByDomainResponseData$Outbound` instead. */
  export type Outbound =
    ApiResponseVecOrganizationByDomainResponseData$Outbound;
}

export function apiResponseVecOrganizationByDomainResponseDataToJSON(
  apiResponseVecOrganizationByDomainResponseData:
    ApiResponseVecOrganizationByDomainResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecOrganizationByDomainResponseData$outboundSchema.parse(
      apiResponseVecOrganizationByDomainResponseData,
    ),
  );
}

export function apiResponseVecOrganizationByDomainResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseVecOrganizationByDomainResponseData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecOrganizationByDomainResponseData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseVecOrganizationByDomainResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecOrganizationByDomainResponse$inboundSchema:
  z.ZodType<ApiResponseVecOrganizationByDomainResponse, z.ZodTypeDef, unknown> =
    z.object({
      data: z.array(
        z.lazy(() =>
          ApiResponseVecOrganizationByDomainResponseData$inboundSchema
        ),
      ).optional(),
      message: z.nullable(z.string()).optional(),
      success: z.boolean(),
    });

/** @internal */
export type ApiResponseVecOrganizationByDomainResponse$Outbound = {
  data?:
    | Array<ApiResponseVecOrganizationByDomainResponseData$Outbound>
    | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecOrganizationByDomainResponse$outboundSchema:
  z.ZodType<
    ApiResponseVecOrganizationByDomainResponse$Outbound,
    z.ZodTypeDef,
    ApiResponseVecOrganizationByDomainResponse
  > = z.object({
    data: z.array(
      z.lazy(() =>
        ApiResponseVecOrganizationByDomainResponseData$outboundSchema
      ),
    ).optional(),
    message: z.nullable(z.string()).optional(),
    success: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecOrganizationByDomainResponse$ {
  /** @deprecated use `ApiResponseVecOrganizationByDomainResponse$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecOrganizationByDomainResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationByDomainResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecOrganizationByDomainResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecOrganizationByDomainResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecOrganizationByDomainResponse$Outbound;
}

export function apiResponseVecOrganizationByDomainResponseToJSON(
  apiResponseVecOrganizationByDomainResponse:
    ApiResponseVecOrganizationByDomainResponse,
): string {
  return JSON.stringify(
    ApiResponseVecOrganizationByDomainResponse$outboundSchema.parse(
      apiResponseVecOrganizationByDomainResponse,
    ),
  );
}

export function apiResponseVecOrganizationByDomainResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ApiResponseVecOrganizationByDomainResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecOrganizationByDomainResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ApiResponseVecOrganizationByDomainResponse' from JSON`,
  );
}
