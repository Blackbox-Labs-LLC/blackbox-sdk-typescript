/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Enable2FARequest = {
  totpCode: string;
};

/** @internal */
export const Enable2FARequest$inboundSchema: z.ZodType<
  Enable2FARequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  totp_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "totp_code": "totpCode",
  });
});

/** @internal */
export type Enable2FARequest$Outbound = {
  totp_code: string;
};

/** @internal */
export const Enable2FARequest$outboundSchema: z.ZodType<
  Enable2FARequest$Outbound,
  z.ZodTypeDef,
  Enable2FARequest
> = z.object({
  totpCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    totpCode: "totp_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Enable2FARequest$ {
  /** @deprecated use `Enable2FARequest$inboundSchema` instead. */
  export const inboundSchema = Enable2FARequest$inboundSchema;
  /** @deprecated use `Enable2FARequest$outboundSchema` instead. */
  export const outboundSchema = Enable2FARequest$outboundSchema;
  /** @deprecated use `Enable2FARequest$Outbound` instead. */
  export type Outbound = Enable2FARequest$Outbound;
}

export function enable2FARequestToJSON(
  enable2FARequest: Enable2FARequest,
): string {
  return JSON.stringify(
    Enable2FARequest$outboundSchema.parse(enable2FARequest),
  );
}

export function enable2FARequestFromJSON(
  jsonString: string,
): SafeParseResult<Enable2FARequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Enable2FARequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Enable2FARequest' from JSON`,
  );
}
