/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  EventTypeCount,
  EventTypeCount$inboundSchema,
  EventTypeCount$Outbound,
  EventTypeCount$outboundSchema,
} from "./eventtypecount.js";
import {
  UserEventCount,
  UserEventCount$inboundSchema,
  UserEventCount$Outbound,
  UserEventCount$outboundSchema,
} from "./usereventcount.js";

export type ApiResponseEventLogStatsData = {
  eventsThisMonth: number;
  eventsThisWeek: number;
  eventsToday: number;
  mostActiveUsers: Array<UserEventCount>;
  topEventTypes: Array<EventTypeCount>;
  totalEvents: number;
};

export type ApiResponseEventLogStats = {
  data?: ApiResponseEventLogStatsData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseEventLogStatsData$inboundSchema: z.ZodType<
  ApiResponseEventLogStatsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  events_this_month: z.number().int(),
  events_this_week: z.number().int(),
  events_today: z.number().int(),
  most_active_users: z.array(UserEventCount$inboundSchema),
  top_event_types: z.array(EventTypeCount$inboundSchema),
  total_events: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "events_this_month": "eventsThisMonth",
    "events_this_week": "eventsThisWeek",
    "events_today": "eventsToday",
    "most_active_users": "mostActiveUsers",
    "top_event_types": "topEventTypes",
    "total_events": "totalEvents",
  });
});

/** @internal */
export type ApiResponseEventLogStatsData$Outbound = {
  events_this_month: number;
  events_this_week: number;
  events_today: number;
  most_active_users: Array<UserEventCount$Outbound>;
  top_event_types: Array<EventTypeCount$Outbound>;
  total_events: number;
};

/** @internal */
export const ApiResponseEventLogStatsData$outboundSchema: z.ZodType<
  ApiResponseEventLogStatsData$Outbound,
  z.ZodTypeDef,
  ApiResponseEventLogStatsData
> = z.object({
  eventsThisMonth: z.number().int(),
  eventsThisWeek: z.number().int(),
  eventsToday: z.number().int(),
  mostActiveUsers: z.array(UserEventCount$outboundSchema),
  topEventTypes: z.array(EventTypeCount$outboundSchema),
  totalEvents: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    eventsThisMonth: "events_this_month",
    eventsThisWeek: "events_this_week",
    eventsToday: "events_today",
    mostActiveUsers: "most_active_users",
    topEventTypes: "top_event_types",
    totalEvents: "total_events",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseEventLogStatsData$ {
  /** @deprecated use `ApiResponseEventLogStatsData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseEventLogStatsData$inboundSchema;
  /** @deprecated use `ApiResponseEventLogStatsData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseEventLogStatsData$outboundSchema;
  /** @deprecated use `ApiResponseEventLogStatsData$Outbound` instead. */
  export type Outbound = ApiResponseEventLogStatsData$Outbound;
}

export function apiResponseEventLogStatsDataToJSON(
  apiResponseEventLogStatsData: ApiResponseEventLogStatsData,
): string {
  return JSON.stringify(
    ApiResponseEventLogStatsData$outboundSchema.parse(
      apiResponseEventLogStatsData,
    ),
  );
}

export function apiResponseEventLogStatsDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseEventLogStatsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseEventLogStatsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseEventLogStatsData' from JSON`,
  );
}

/** @internal */
export const ApiResponseEventLogStats$inboundSchema: z.ZodType<
  ApiResponseEventLogStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseEventLogStatsData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseEventLogStats$Outbound = {
  data?: ApiResponseEventLogStatsData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseEventLogStats$outboundSchema: z.ZodType<
  ApiResponseEventLogStats$Outbound,
  z.ZodTypeDef,
  ApiResponseEventLogStats
> = z.object({
  data: z.lazy(() => ApiResponseEventLogStatsData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseEventLogStats$ {
  /** @deprecated use `ApiResponseEventLogStats$inboundSchema` instead. */
  export const inboundSchema = ApiResponseEventLogStats$inboundSchema;
  /** @deprecated use `ApiResponseEventLogStats$outboundSchema` instead. */
  export const outboundSchema = ApiResponseEventLogStats$outboundSchema;
  /** @deprecated use `ApiResponseEventLogStats$Outbound` instead. */
  export type Outbound = ApiResponseEventLogStats$Outbound;
}

export function apiResponseEventLogStatsToJSON(
  apiResponseEventLogStats: ApiResponseEventLogStats,
): string {
  return JSON.stringify(
    ApiResponseEventLogStats$outboundSchema.parse(apiResponseEventLogStats),
  );
}

export function apiResponseEventLogStatsFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseEventLogStats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseEventLogStats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseEventLogStats' from JSON`,
  );
}
