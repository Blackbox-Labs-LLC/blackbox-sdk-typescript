/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DailyCount = {
  count: number;
  date: string;
};

/** @internal */
export const DailyCount$inboundSchema: z.ZodType<
  DailyCount,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  date: z.string(),
});

/** @internal */
export type DailyCount$Outbound = {
  count: number;
  date: string;
};

/** @internal */
export const DailyCount$outboundSchema: z.ZodType<
  DailyCount$Outbound,
  z.ZodTypeDef,
  DailyCount
> = z.object({
  count: z.number().int(),
  date: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyCount$ {
  /** @deprecated use `DailyCount$inboundSchema` instead. */
  export const inboundSchema = DailyCount$inboundSchema;
  /** @deprecated use `DailyCount$outboundSchema` instead. */
  export const outboundSchema = DailyCount$outboundSchema;
  /** @deprecated use `DailyCount$Outbound` instead. */
  export type Outbound = DailyCount$Outbound;
}

export function dailyCountToJSON(dailyCount: DailyCount): string {
  return JSON.stringify(DailyCount$outboundSchema.parse(dailyCount));
}

export function dailyCountFromJSON(
  jsonString: string,
): SafeParseResult<DailyCount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyCount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyCount' from JSON`,
  );
}
