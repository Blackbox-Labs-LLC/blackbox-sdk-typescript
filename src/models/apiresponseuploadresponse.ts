/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AttachmentResponse,
  AttachmentResponse$inboundSchema,
  AttachmentResponse$Outbound,
  AttachmentResponse$outboundSchema,
} from "./attachmentresponse.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseUploadResponseData = {
  attachments: Array<AttachmentResponse>;
  message: string;
};

export type ApiResponseUploadResponse = {
  data?: ApiResponseUploadResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseUploadResponseData$inboundSchema: z.ZodType<
  ApiResponseUploadResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.array(AttachmentResponse$inboundSchema),
  message: z.string(),
});

/** @internal */
export type ApiResponseUploadResponseData$Outbound = {
  attachments: Array<AttachmentResponse$Outbound>;
  message: string;
};

/** @internal */
export const ApiResponseUploadResponseData$outboundSchema: z.ZodType<
  ApiResponseUploadResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseUploadResponseData
> = z.object({
  attachments: z.array(AttachmentResponse$outboundSchema),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseUploadResponseData$ {
  /** @deprecated use `ApiResponseUploadResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseUploadResponseData$inboundSchema;
  /** @deprecated use `ApiResponseUploadResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseUploadResponseData$outboundSchema;
  /** @deprecated use `ApiResponseUploadResponseData$Outbound` instead. */
  export type Outbound = ApiResponseUploadResponseData$Outbound;
}

export function apiResponseUploadResponseDataToJSON(
  apiResponseUploadResponseData: ApiResponseUploadResponseData,
): string {
  return JSON.stringify(
    ApiResponseUploadResponseData$outboundSchema.parse(
      apiResponseUploadResponseData,
    ),
  );
}

export function apiResponseUploadResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseUploadResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseUploadResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseUploadResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseUploadResponse$inboundSchema: z.ZodType<
  ApiResponseUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseUploadResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseUploadResponse$Outbound = {
  data?: ApiResponseUploadResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseUploadResponse$outboundSchema: z.ZodType<
  ApiResponseUploadResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseUploadResponse
> = z.object({
  data: z.lazy(() => ApiResponseUploadResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseUploadResponse$ {
  /** @deprecated use `ApiResponseUploadResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseUploadResponse$inboundSchema;
  /** @deprecated use `ApiResponseUploadResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseUploadResponse$outboundSchema;
  /** @deprecated use `ApiResponseUploadResponse$Outbound` instead. */
  export type Outbound = ApiResponseUploadResponse$Outbound;
}

export function apiResponseUploadResponseToJSON(
  apiResponseUploadResponse: ApiResponseUploadResponse,
): string {
  return JSON.stringify(
    ApiResponseUploadResponse$outboundSchema.parse(apiResponseUploadResponse),
  );
}

export function apiResponseUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseUploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseUploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseUploadResponse' from JSON`,
  );
}
