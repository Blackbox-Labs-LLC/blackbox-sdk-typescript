/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AgentActivity,
  AgentActivity$inboundSchema,
  AgentActivity$Outbound,
  AgentActivity$outboundSchema,
} from "./agentactivity.js";
import {
  AgentPerformance,
  AgentPerformance$inboundSchema,
  AgentPerformance$Outbound,
  AgentPerformance$outboundSchema,
} from "./agentperformance.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AgentAnalytics = {
  activeAgentsToday: number;
  agentActivity: Array<AgentActivity>;
  averageTicketsPerAgent: number;
  topPerformers: Array<AgentPerformance>;
  totalAgents: number;
};

/** @internal */
export const AgentAnalytics$inboundSchema: z.ZodType<
  AgentAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  active_agents_today: z.number().int(),
  agent_activity: z.array(AgentActivity$inboundSchema),
  average_tickets_per_agent: z.number(),
  top_performers: z.array(AgentPerformance$inboundSchema),
  total_agents: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "active_agents_today": "activeAgentsToday",
    "agent_activity": "agentActivity",
    "average_tickets_per_agent": "averageTicketsPerAgent",
    "top_performers": "topPerformers",
    "total_agents": "totalAgents",
  });
});

/** @internal */
export type AgentAnalytics$Outbound = {
  active_agents_today: number;
  agent_activity: Array<AgentActivity$Outbound>;
  average_tickets_per_agent: number;
  top_performers: Array<AgentPerformance$Outbound>;
  total_agents: number;
};

/** @internal */
export const AgentAnalytics$outboundSchema: z.ZodType<
  AgentAnalytics$Outbound,
  z.ZodTypeDef,
  AgentAnalytics
> = z.object({
  activeAgentsToday: z.number().int(),
  agentActivity: z.array(AgentActivity$outboundSchema),
  averageTicketsPerAgent: z.number(),
  topPerformers: z.array(AgentPerformance$outboundSchema),
  totalAgents: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    activeAgentsToday: "active_agents_today",
    agentActivity: "agent_activity",
    averageTicketsPerAgent: "average_tickets_per_agent",
    topPerformers: "top_performers",
    totalAgents: "total_agents",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentAnalytics$ {
  /** @deprecated use `AgentAnalytics$inboundSchema` instead. */
  export const inboundSchema = AgentAnalytics$inboundSchema;
  /** @deprecated use `AgentAnalytics$outboundSchema` instead. */
  export const outboundSchema = AgentAnalytics$outboundSchema;
  /** @deprecated use `AgentAnalytics$Outbound` instead. */
  export type Outbound = AgentAnalytics$Outbound;
}

export function agentAnalyticsToJSON(agentAnalytics: AgentAnalytics): string {
  return JSON.stringify(AgentAnalytics$outboundSchema.parse(agentAnalytics));
}

export function agentAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<AgentAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentAnalytics' from JSON`,
  );
}
