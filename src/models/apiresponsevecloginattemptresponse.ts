/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecLoginAttemptResponseData = {
  attemptedAt: string;
  id: string;
  ipAddress: string;
  success: boolean;
  userAgent: string;
};

export type ApiResponseVecLoginAttemptResponse = {
  data?: Array<ApiResponseVecLoginAttemptResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecLoginAttemptResponseData$inboundSchema: z.ZodType<
  ApiResponseVecLoginAttemptResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attempted_at: z.string(),
  id: z.string(),
  ip_address: z.string(),
  success: z.boolean(),
  user_agent: z.string(),
}).transform((v) => {
  return remap$(v, {
    "attempted_at": "attemptedAt",
    "ip_address": "ipAddress",
    "user_agent": "userAgent",
  });
});

/** @internal */
export type ApiResponseVecLoginAttemptResponseData$Outbound = {
  attempted_at: string;
  id: string;
  ip_address: string;
  success: boolean;
  user_agent: string;
};

/** @internal */
export const ApiResponseVecLoginAttemptResponseData$outboundSchema: z.ZodType<
  ApiResponseVecLoginAttemptResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecLoginAttemptResponseData
> = z.object({
  attemptedAt: z.string(),
  id: z.string(),
  ipAddress: z.string(),
  success: z.boolean(),
  userAgent: z.string(),
}).transform((v) => {
  return remap$(v, {
    attemptedAt: "attempted_at",
    ipAddress: "ip_address",
    userAgent: "user_agent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecLoginAttemptResponseData$ {
  /** @deprecated use `ApiResponseVecLoginAttemptResponseData$inboundSchema` instead. */
  export const inboundSchema =
    ApiResponseVecLoginAttemptResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecLoginAttemptResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecLoginAttemptResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecLoginAttemptResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecLoginAttemptResponseData$Outbound;
}

export function apiResponseVecLoginAttemptResponseDataToJSON(
  apiResponseVecLoginAttemptResponseData:
    ApiResponseVecLoginAttemptResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecLoginAttemptResponseData$outboundSchema.parse(
      apiResponseVecLoginAttemptResponseData,
    ),
  );
}

export function apiResponseVecLoginAttemptResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecLoginAttemptResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecLoginAttemptResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecLoginAttemptResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecLoginAttemptResponse$inboundSchema: z.ZodType<
  ApiResponseVecLoginAttemptResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecLoginAttemptResponseData$inboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecLoginAttemptResponse$Outbound = {
  data?: Array<ApiResponseVecLoginAttemptResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecLoginAttemptResponse$outboundSchema: z.ZodType<
  ApiResponseVecLoginAttemptResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecLoginAttemptResponse
> = z.object({
  data: z.array(
    z.lazy(() => ApiResponseVecLoginAttemptResponseData$outboundSchema),
  ).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecLoginAttemptResponse$ {
  /** @deprecated use `ApiResponseVecLoginAttemptResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecLoginAttemptResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecLoginAttemptResponse$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecLoginAttemptResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecLoginAttemptResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecLoginAttemptResponse$Outbound;
}

export function apiResponseVecLoginAttemptResponseToJSON(
  apiResponseVecLoginAttemptResponse: ApiResponseVecLoginAttemptResponse,
): string {
  return JSON.stringify(
    ApiResponseVecLoginAttemptResponse$outboundSchema.parse(
      apiResponseVecLoginAttemptResponse,
    ),
  );
}

export function apiResponseVecLoginAttemptResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecLoginAttemptResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ApiResponseVecLoginAttemptResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecLoginAttemptResponse' from JSON`,
  );
}
