/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecWebhookResponseData = {
  createdAt: string;
  description?: string | null | undefined;
  enabled: boolean;
  events: Array<string>;
  failureCount: number;
  headers?: { [k: string]: string } | null | undefined;
  id: string;
  lastDelivery?: string | null | undefined;
  name: string;
  organizationId: string;
  successCount: number;
  updatedAt: string;
  url: string;
};

export type ApiResponseVecWebhookResponse = {
  data?: Array<ApiResponseVecWebhookResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecWebhookResponseData$inboundSchema: z.ZodType<
  ApiResponseVecWebhookResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string(),
  description: z.nullable(z.string()).optional(),
  enabled: z.boolean(),
  events: z.array(z.string()),
  failure_count: z.number().int(),
  headers: z.nullable(z.record(z.string())).optional(),
  id: z.string(),
  last_delivery: z.nullable(z.string()).optional(),
  name: z.string(),
  organization_id: z.string(),
  success_count: z.number().int(),
  updated_at: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "failure_count": "failureCount",
    "last_delivery": "lastDelivery",
    "organization_id": "organizationId",
    "success_count": "successCount",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseVecWebhookResponseData$Outbound = {
  created_at: string;
  description?: string | null | undefined;
  enabled: boolean;
  events: Array<string>;
  failure_count: number;
  headers?: { [k: string]: string } | null | undefined;
  id: string;
  last_delivery?: string | null | undefined;
  name: string;
  organization_id: string;
  success_count: number;
  updated_at: string;
  url: string;
};

/** @internal */
export const ApiResponseVecWebhookResponseData$outboundSchema: z.ZodType<
  ApiResponseVecWebhookResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecWebhookResponseData
> = z.object({
  createdAt: z.string(),
  description: z.nullable(z.string()).optional(),
  enabled: z.boolean(),
  events: z.array(z.string()),
  failureCount: z.number().int(),
  headers: z.nullable(z.record(z.string())).optional(),
  id: z.string(),
  lastDelivery: z.nullable(z.string()).optional(),
  name: z.string(),
  organizationId: z.string(),
  successCount: z.number().int(),
  updatedAt: z.string(),
  url: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    failureCount: "failure_count",
    lastDelivery: "last_delivery",
    organizationId: "organization_id",
    successCount: "success_count",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecWebhookResponseData$ {
  /** @deprecated use `ApiResponseVecWebhookResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecWebhookResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecWebhookResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecWebhookResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecWebhookResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecWebhookResponseData$Outbound;
}

export function apiResponseVecWebhookResponseDataToJSON(
  apiResponseVecWebhookResponseData: ApiResponseVecWebhookResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecWebhookResponseData$outboundSchema.parse(
      apiResponseVecWebhookResponseData,
    ),
  );
}

export function apiResponseVecWebhookResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecWebhookResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecWebhookResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecWebhookResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecWebhookResponse$inboundSchema: z.ZodType<
  ApiResponseVecWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecWebhookResponseData$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecWebhookResponse$Outbound = {
  data?: Array<ApiResponseVecWebhookResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecWebhookResponse$outboundSchema: z.ZodType<
  ApiResponseVecWebhookResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecWebhookResponse
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecWebhookResponseData$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecWebhookResponse$ {
  /** @deprecated use `ApiResponseVecWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecWebhookResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecWebhookResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecWebhookResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecWebhookResponse$Outbound;
}

export function apiResponseVecWebhookResponseToJSON(
  apiResponseVecWebhookResponse: ApiResponseVecWebhookResponse,
): string {
  return JSON.stringify(
    ApiResponseVecWebhookResponse$outboundSchema.parse(
      apiResponseVecWebhookResponse,
    ),
  );
}

export function apiResponseVecWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecWebhookResponse' from JSON`,
  );
}
