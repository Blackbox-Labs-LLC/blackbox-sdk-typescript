/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AutomationAction,
  AutomationAction$inboundSchema,
  AutomationAction$Outbound,
  AutomationAction$outboundSchema,
} from "./automationaction.js";
import {
  AutomationConditions,
  AutomationConditions$inboundSchema,
  AutomationConditions$Outbound,
  AutomationConditions$outboundSchema,
} from "./automationconditions.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateAutomationRuleRequest = {
  actions: Array<AutomationAction>;
  conditions: AutomationConditions;
  description: string;
  enabled: boolean;
  name: string;
  trigger: string;
};

/** @internal */
export const CreateAutomationRuleRequest$inboundSchema: z.ZodType<
  CreateAutomationRuleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  actions: z.array(AutomationAction$inboundSchema),
  conditions: AutomationConditions$inboundSchema,
  description: z.string(),
  enabled: z.boolean(),
  name: z.string(),
  trigger: z.string(),
});

/** @internal */
export type CreateAutomationRuleRequest$Outbound = {
  actions: Array<AutomationAction$Outbound>;
  conditions: AutomationConditions$Outbound;
  description: string;
  enabled: boolean;
  name: string;
  trigger: string;
};

/** @internal */
export const CreateAutomationRuleRequest$outboundSchema: z.ZodType<
  CreateAutomationRuleRequest$Outbound,
  z.ZodTypeDef,
  CreateAutomationRuleRequest
> = z.object({
  actions: z.array(AutomationAction$outboundSchema),
  conditions: AutomationConditions$outboundSchema,
  description: z.string(),
  enabled: z.boolean(),
  name: z.string(),
  trigger: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAutomationRuleRequest$ {
  /** @deprecated use `CreateAutomationRuleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAutomationRuleRequest$inboundSchema;
  /** @deprecated use `CreateAutomationRuleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAutomationRuleRequest$outboundSchema;
  /** @deprecated use `CreateAutomationRuleRequest$Outbound` instead. */
  export type Outbound = CreateAutomationRuleRequest$Outbound;
}

export function createAutomationRuleRequestToJSON(
  createAutomationRuleRequest: CreateAutomationRuleRequest,
): string {
  return JSON.stringify(
    CreateAutomationRuleRequest$outboundSchema.parse(
      createAutomationRuleRequest,
    ),
  );
}

export function createAutomationRuleRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAutomationRuleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAutomationRuleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAutomationRuleRequest' from JSON`,
  );
}
