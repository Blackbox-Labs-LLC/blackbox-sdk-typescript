/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseSurveyResponseData = {
  comment?: string | null | undefined;
  createdAt: string;
  id: string;
  organizationId: string;
  score: number;
  ticketId: string;
  ticketSubject?: string | null | undefined;
  userId: string;
  userName: string;
};

export type ApiResponseSurveyResponse = {
  data?: ApiResponseSurveyResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSurveyResponseData$inboundSchema: z.ZodType<
  ApiResponseSurveyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.nullable(z.string()).optional(),
  created_at: z.string(),
  id: z.string(),
  organization_id: z.string(),
  score: z.number().int(),
  ticket_id: z.string(),
  ticket_subject: z.nullable(z.string()).optional(),
  user_id: z.string(),
  user_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "ticket_id": "ticketId",
    "ticket_subject": "ticketSubject",
    "user_id": "userId",
    "user_name": "userName",
  });
});

/** @internal */
export type ApiResponseSurveyResponseData$Outbound = {
  comment?: string | null | undefined;
  created_at: string;
  id: string;
  organization_id: string;
  score: number;
  ticket_id: string;
  ticket_subject?: string | null | undefined;
  user_id: string;
  user_name: string;
};

/** @internal */
export const ApiResponseSurveyResponseData$outboundSchema: z.ZodType<
  ApiResponseSurveyResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseSurveyResponseData
> = z.object({
  comment: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  id: z.string(),
  organizationId: z.string(),
  score: z.number().int(),
  ticketId: z.string(),
  ticketSubject: z.nullable(z.string()).optional(),
  userId: z.string(),
  userName: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    ticketId: "ticket_id",
    ticketSubject: "ticket_subject",
    userId: "user_id",
    userName: "user_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSurveyResponseData$ {
  /** @deprecated use `ApiResponseSurveyResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSurveyResponseData$inboundSchema;
  /** @deprecated use `ApiResponseSurveyResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSurveyResponseData$outboundSchema;
  /** @deprecated use `ApiResponseSurveyResponseData$Outbound` instead. */
  export type Outbound = ApiResponseSurveyResponseData$Outbound;
}

export function apiResponseSurveyResponseDataToJSON(
  apiResponseSurveyResponseData: ApiResponseSurveyResponseData,
): string {
  return JSON.stringify(
    ApiResponseSurveyResponseData$outboundSchema.parse(
      apiResponseSurveyResponseData,
    ),
  );
}

export function apiResponseSurveyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSurveyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSurveyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSurveyResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseSurveyResponse$inboundSchema: z.ZodType<
  ApiResponseSurveyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseSurveyResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseSurveyResponse$Outbound = {
  data?: ApiResponseSurveyResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSurveyResponse$outboundSchema: z.ZodType<
  ApiResponseSurveyResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseSurveyResponse
> = z.object({
  data: z.lazy(() => ApiResponseSurveyResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSurveyResponse$ {
  /** @deprecated use `ApiResponseSurveyResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSurveyResponse$inboundSchema;
  /** @deprecated use `ApiResponseSurveyResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSurveyResponse$outboundSchema;
  /** @deprecated use `ApiResponseSurveyResponse$Outbound` instead. */
  export type Outbound = ApiResponseSurveyResponse$Outbound;
}

export function apiResponseSurveyResponseToJSON(
  apiResponseSurveyResponse: ApiResponseSurveyResponse,
): string {
  return JSON.stringify(
    ApiResponseSurveyResponse$outboundSchema.parse(apiResponseSurveyResponse),
  );
}

export function apiResponseSurveyResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSurveyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSurveyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSurveyResponse' from JSON`,
  );
}
