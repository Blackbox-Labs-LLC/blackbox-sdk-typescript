/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CSATAnalytics,
  CSATAnalytics$inboundSchema,
  CSATAnalytics$Outbound,
  CSATAnalytics$outboundSchema,
} from "./csatanalytics.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SurveyResponse,
  SurveyResponse$inboundSchema,
  SurveyResponse$Outbound,
  SurveyResponse$outboundSchema,
} from "./surveyresponse.js";

export type ApiResponseSurveyExportData = {
  analytics: CSATAnalytics;
  exportDate: string;
  surveys: Array<SurveyResponse>;
};

export type ApiResponseSurveyExport = {
  data?: ApiResponseSurveyExportData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSurveyExportData$inboundSchema: z.ZodType<
  ApiResponseSurveyExportData,
  z.ZodTypeDef,
  unknown
> = z.object({
  analytics: CSATAnalytics$inboundSchema,
  export_date: z.string(),
  surveys: z.array(SurveyResponse$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "export_date": "exportDate",
  });
});

/** @internal */
export type ApiResponseSurveyExportData$Outbound = {
  analytics: CSATAnalytics$Outbound;
  export_date: string;
  surveys: Array<SurveyResponse$Outbound>;
};

/** @internal */
export const ApiResponseSurveyExportData$outboundSchema: z.ZodType<
  ApiResponseSurveyExportData$Outbound,
  z.ZodTypeDef,
  ApiResponseSurveyExportData
> = z.object({
  analytics: CSATAnalytics$outboundSchema,
  exportDate: z.string(),
  surveys: z.array(SurveyResponse$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    exportDate: "export_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSurveyExportData$ {
  /** @deprecated use `ApiResponseSurveyExportData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSurveyExportData$inboundSchema;
  /** @deprecated use `ApiResponseSurveyExportData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSurveyExportData$outboundSchema;
  /** @deprecated use `ApiResponseSurveyExportData$Outbound` instead. */
  export type Outbound = ApiResponseSurveyExportData$Outbound;
}

export function apiResponseSurveyExportDataToJSON(
  apiResponseSurveyExportData: ApiResponseSurveyExportData,
): string {
  return JSON.stringify(
    ApiResponseSurveyExportData$outboundSchema.parse(
      apiResponseSurveyExportData,
    ),
  );
}

export function apiResponseSurveyExportDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSurveyExportData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSurveyExportData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSurveyExportData' from JSON`,
  );
}

/** @internal */
export const ApiResponseSurveyExport$inboundSchema: z.ZodType<
  ApiResponseSurveyExport,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseSurveyExportData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseSurveyExport$Outbound = {
  data?: ApiResponseSurveyExportData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseSurveyExport$outboundSchema: z.ZodType<
  ApiResponseSurveyExport$Outbound,
  z.ZodTypeDef,
  ApiResponseSurveyExport
> = z.object({
  data: z.lazy(() => ApiResponseSurveyExportData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseSurveyExport$ {
  /** @deprecated use `ApiResponseSurveyExport$inboundSchema` instead. */
  export const inboundSchema = ApiResponseSurveyExport$inboundSchema;
  /** @deprecated use `ApiResponseSurveyExport$outboundSchema` instead. */
  export const outboundSchema = ApiResponseSurveyExport$outboundSchema;
  /** @deprecated use `ApiResponseSurveyExport$Outbound` instead. */
  export type Outbound = ApiResponseSurveyExport$Outbound;
}

export function apiResponseSurveyExportToJSON(
  apiResponseSurveyExport: ApiResponseSurveyExport,
): string {
  return JSON.stringify(
    ApiResponseSurveyExport$outboundSchema.parse(apiResponseSurveyExport),
  );
}

export function apiResponseSurveyExportFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseSurveyExport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseSurveyExport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseSurveyExport' from JSON`,
  );
}
