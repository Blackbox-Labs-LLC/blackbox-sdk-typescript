/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseTagResponseData = {
  color: string;
  id: string;
  name: string;
  ticketCount: number;
};

export type ApiResponseTagResponse = {
  data?: ApiResponseTagResponseData | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseTagResponseData$inboundSchema: z.ZodType<
  ApiResponseTagResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: z.string(),
  id: z.string(),
  name: z.string(),
  ticket_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "ticket_count": "ticketCount",
  });
});

/** @internal */
export type ApiResponseTagResponseData$Outbound = {
  color: string;
  id: string;
  name: string;
  ticket_count: number;
};

/** @internal */
export const ApiResponseTagResponseData$outboundSchema: z.ZodType<
  ApiResponseTagResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseTagResponseData
> = z.object({
  color: z.string(),
  id: z.string(),
  name: z.string(),
  ticketCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    ticketCount: "ticket_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseTagResponseData$ {
  /** @deprecated use `ApiResponseTagResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseTagResponseData$inboundSchema;
  /** @deprecated use `ApiResponseTagResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseTagResponseData$outboundSchema;
  /** @deprecated use `ApiResponseTagResponseData$Outbound` instead. */
  export type Outbound = ApiResponseTagResponseData$Outbound;
}

export function apiResponseTagResponseDataToJSON(
  apiResponseTagResponseData: ApiResponseTagResponseData,
): string {
  return JSON.stringify(
    ApiResponseTagResponseData$outboundSchema.parse(apiResponseTagResponseData),
  );
}

export function apiResponseTagResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseTagResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseTagResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseTagResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseTagResponse$inboundSchema: z.ZodType<
  ApiResponseTagResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ApiResponseTagResponseData$inboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseTagResponse$Outbound = {
  data?: ApiResponseTagResponseData$Outbound | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseTagResponse$outboundSchema: z.ZodType<
  ApiResponseTagResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseTagResponse
> = z.object({
  data: z.lazy(() => ApiResponseTagResponseData$outboundSchema).optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseTagResponse$ {
  /** @deprecated use `ApiResponseTagResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseTagResponse$inboundSchema;
  /** @deprecated use `ApiResponseTagResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseTagResponse$outboundSchema;
  /** @deprecated use `ApiResponseTagResponse$Outbound` instead. */
  export type Outbound = ApiResponseTagResponse$Outbound;
}

export function apiResponseTagResponseToJSON(
  apiResponseTagResponse: ApiResponseTagResponse,
): string {
  return JSON.stringify(
    ApiResponseTagResponse$outboundSchema.parse(apiResponseTagResponse),
  );
}

export function apiResponseTagResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseTagResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseTagResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseTagResponse' from JSON`,
  );
}
