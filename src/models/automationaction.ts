/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AutomationAction = {
  actionType: string;
  parameters: { [k: string]: any };
};

/** @internal */
export const AutomationAction$inboundSchema: z.ZodType<
  AutomationAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.string(),
  parameters: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type AutomationAction$Outbound = {
  action_type: string;
  parameters: { [k: string]: any };
};

/** @internal */
export const AutomationAction$outboundSchema: z.ZodType<
  AutomationAction$Outbound,
  z.ZodTypeDef,
  AutomationAction
> = z.object({
  actionType: z.string(),
  parameters: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutomationAction$ {
  /** @deprecated use `AutomationAction$inboundSchema` instead. */
  export const inboundSchema = AutomationAction$inboundSchema;
  /** @deprecated use `AutomationAction$outboundSchema` instead. */
  export const outboundSchema = AutomationAction$outboundSchema;
  /** @deprecated use `AutomationAction$Outbound` instead. */
  export type Outbound = AutomationAction$Outbound;
}

export function automationActionToJSON(
  automationAction: AutomationAction,
): string {
  return JSON.stringify(
    AutomationAction$outboundSchema.parse(automationAction),
  );
}

export function automationActionFromJSON(
  jsonString: string,
): SafeParseResult<AutomationAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutomationAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutomationAction' from JSON`,
  );
}
