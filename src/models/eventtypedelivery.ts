/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type EventTypeDelivery = {
  deliveryCount: number;
  eventType: string;
  successRate: number;
};

/** @internal */
export const EventTypeDelivery$inboundSchema: z.ZodType<
  EventTypeDelivery,
  z.ZodTypeDef,
  unknown
> = z.object({
  delivery_count: z.number().int(),
  event_type: z.string(),
  success_rate: z.number(),
}).transform((v) => {
  return remap$(v, {
    "delivery_count": "deliveryCount",
    "event_type": "eventType",
    "success_rate": "successRate",
  });
});

/** @internal */
export type EventTypeDelivery$Outbound = {
  delivery_count: number;
  event_type: string;
  success_rate: number;
};

/** @internal */
export const EventTypeDelivery$outboundSchema: z.ZodType<
  EventTypeDelivery$Outbound,
  z.ZodTypeDef,
  EventTypeDelivery
> = z.object({
  deliveryCount: z.number().int(),
  eventType: z.string(),
  successRate: z.number(),
}).transform((v) => {
  return remap$(v, {
    deliveryCount: "delivery_count",
    eventType: "event_type",
    successRate: "success_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventTypeDelivery$ {
  /** @deprecated use `EventTypeDelivery$inboundSchema` instead. */
  export const inboundSchema = EventTypeDelivery$inboundSchema;
  /** @deprecated use `EventTypeDelivery$outboundSchema` instead. */
  export const outboundSchema = EventTypeDelivery$outboundSchema;
  /** @deprecated use `EventTypeDelivery$Outbound` instead. */
  export type Outbound = EventTypeDelivery$Outbound;
}

export function eventTypeDeliveryToJSON(
  eventTypeDelivery: EventTypeDelivery,
): string {
  return JSON.stringify(
    EventTypeDelivery$outboundSchema.parse(eventTypeDelivery),
  );
}

export function eventTypeDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<EventTypeDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventTypeDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventTypeDelivery' from JSON`,
  );
}
