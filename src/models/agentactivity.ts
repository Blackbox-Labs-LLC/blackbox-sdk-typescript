/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AgentActivity = {
  agentId: string;
  agentName: string;
  eventsToday: number;
  lastActivity: string;
  status: string;
};

/** @internal */
export const AgentActivity$inboundSchema: z.ZodType<
  AgentActivity,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.string(),
  agent_name: z.string(),
  events_today: z.number().int(),
  last_activity: z.string(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
    "agent_name": "agentName",
    "events_today": "eventsToday",
    "last_activity": "lastActivity",
  });
});

/** @internal */
export type AgentActivity$Outbound = {
  agent_id: string;
  agent_name: string;
  events_today: number;
  last_activity: string;
  status: string;
};

/** @internal */
export const AgentActivity$outboundSchema: z.ZodType<
  AgentActivity$Outbound,
  z.ZodTypeDef,
  AgentActivity
> = z.object({
  agentId: z.string(),
  agentName: z.string(),
  eventsToday: z.number().int(),
  lastActivity: z.string(),
  status: z.string(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
    agentName: "agent_name",
    eventsToday: "events_today",
    lastActivity: "last_activity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentActivity$ {
  /** @deprecated use `AgentActivity$inboundSchema` instead. */
  export const inboundSchema = AgentActivity$inboundSchema;
  /** @deprecated use `AgentActivity$outboundSchema` instead. */
  export const outboundSchema = AgentActivity$outboundSchema;
  /** @deprecated use `AgentActivity$Outbound` instead. */
  export type Outbound = AgentActivity$Outbound;
}

export function agentActivityToJSON(agentActivity: AgentActivity): string {
  return JSON.stringify(AgentActivity$outboundSchema.parse(agentActivity));
}

export function agentActivityFromJSON(
  jsonString: string,
): SafeParseResult<AgentActivity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentActivity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentActivity' from JSON`,
  );
}
