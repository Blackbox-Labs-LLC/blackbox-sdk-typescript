/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseU64 = {
  data?: number | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseU64$inboundSchema: z.ZodType<
  ApiResponseU64,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.number().int().optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseU64$Outbound = {
  data?: number | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseU64$outboundSchema: z.ZodType<
  ApiResponseU64$Outbound,
  z.ZodTypeDef,
  ApiResponseU64
> = z.object({
  data: z.number().int().optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseU64$ {
  /** @deprecated use `ApiResponseU64$inboundSchema` instead. */
  export const inboundSchema = ApiResponseU64$inboundSchema;
  /** @deprecated use `ApiResponseU64$outboundSchema` instead. */
  export const outboundSchema = ApiResponseU64$outboundSchema;
  /** @deprecated use `ApiResponseU64$Outbound` instead. */
  export type Outbound = ApiResponseU64$Outbound;
}

export function apiResponseU64ToJSON(apiResponseU64: ApiResponseU64): string {
  return JSON.stringify(ApiResponseU64$outboundSchema.parse(apiResponseU64));
}

export function apiResponseU64FromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseU64, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseU64$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseU64' from JSON`,
  );
}
