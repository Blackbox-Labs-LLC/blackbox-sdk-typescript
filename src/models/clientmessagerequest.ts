/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClientMessageRequest = {
  message: string;
  metadata?: any | undefined;
  orgDomain: string;
  userId: string;
};

/** @internal */
export const ClientMessageRequest$inboundSchema: z.ZodType<
  ClientMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  metadata: z.any().optional(),
  org_domain: z.string(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "org_domain": "orgDomain",
    "user_id": "userId",
  });
});

/** @internal */
export type ClientMessageRequest$Outbound = {
  message: string;
  metadata?: any | undefined;
  org_domain: string;
  user_id: string;
};

/** @internal */
export const ClientMessageRequest$outboundSchema: z.ZodType<
  ClientMessageRequest$Outbound,
  z.ZodTypeDef,
  ClientMessageRequest
> = z.object({
  message: z.string(),
  metadata: z.any().optional(),
  orgDomain: z.string(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    orgDomain: "org_domain",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientMessageRequest$ {
  /** @deprecated use `ClientMessageRequest$inboundSchema` instead. */
  export const inboundSchema = ClientMessageRequest$inboundSchema;
  /** @deprecated use `ClientMessageRequest$outboundSchema` instead. */
  export const outboundSchema = ClientMessageRequest$outboundSchema;
  /** @deprecated use `ClientMessageRequest$Outbound` instead. */
  export type Outbound = ClientMessageRequest$Outbound;
}

export function clientMessageRequestToJSON(
  clientMessageRequest: ClientMessageRequest,
): string {
  return JSON.stringify(
    ClientMessageRequest$outboundSchema.parse(clientMessageRequest),
  );
}

export function clientMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<ClientMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientMessageRequest' from JSON`,
  );
}
