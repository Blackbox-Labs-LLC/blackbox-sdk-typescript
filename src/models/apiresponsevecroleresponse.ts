/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecRoleResponseData = {
  color: string;
  createdAt: string;
  id: string;
  managed: boolean;
  name: string;
  organizationId: string;
  permissions: number;
  position: number;
  updatedAt: string;
};

export type ApiResponseVecRoleResponse = {
  data?: Array<ApiResponseVecRoleResponseData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecRoleResponseData$inboundSchema: z.ZodType<
  ApiResponseVecRoleResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: z.string(),
  created_at: z.string(),
  id: z.string(),
  managed: z.boolean(),
  name: z.string(),
  organization_id: z.string(),
  permissions: z.number().int(),
  position: z.number().int(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "organization_id": "organizationId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ApiResponseVecRoleResponseData$Outbound = {
  color: string;
  created_at: string;
  id: string;
  managed: boolean;
  name: string;
  organization_id: string;
  permissions: number;
  position: number;
  updated_at: string;
};

/** @internal */
export const ApiResponseVecRoleResponseData$outboundSchema: z.ZodType<
  ApiResponseVecRoleResponseData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecRoleResponseData
> = z.object({
  color: z.string(),
  createdAt: z.string(),
  id: z.string(),
  managed: z.boolean(),
  name: z.string(),
  organizationId: z.string(),
  permissions: z.number().int(),
  position: z.number().int(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    organizationId: "organization_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecRoleResponseData$ {
  /** @deprecated use `ApiResponseVecRoleResponseData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecRoleResponseData$inboundSchema;
  /** @deprecated use `ApiResponseVecRoleResponseData$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecRoleResponseData$outboundSchema;
  /** @deprecated use `ApiResponseVecRoleResponseData$Outbound` instead. */
  export type Outbound = ApiResponseVecRoleResponseData$Outbound;
}

export function apiResponseVecRoleResponseDataToJSON(
  apiResponseVecRoleResponseData: ApiResponseVecRoleResponseData,
): string {
  return JSON.stringify(
    ApiResponseVecRoleResponseData$outboundSchema.parse(
      apiResponseVecRoleResponseData,
    ),
  );
}

export function apiResponseVecRoleResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecRoleResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecRoleResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecRoleResponseData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecRoleResponse$inboundSchema: z.ZodType<
  ApiResponseVecRoleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecRoleResponseData$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecRoleResponse$Outbound = {
  data?: Array<ApiResponseVecRoleResponseData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecRoleResponse$outboundSchema: z.ZodType<
  ApiResponseVecRoleResponse$Outbound,
  z.ZodTypeDef,
  ApiResponseVecRoleResponse
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecRoleResponseData$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecRoleResponse$ {
  /** @deprecated use `ApiResponseVecRoleResponse$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecRoleResponse$inboundSchema;
  /** @deprecated use `ApiResponseVecRoleResponse$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecRoleResponse$outboundSchema;
  /** @deprecated use `ApiResponseVecRoleResponse$Outbound` instead. */
  export type Outbound = ApiResponseVecRoleResponse$Outbound;
}

export function apiResponseVecRoleResponseToJSON(
  apiResponseVecRoleResponse: ApiResponseVecRoleResponse,
): string {
  return JSON.stringify(
    ApiResponseVecRoleResponse$outboundSchema.parse(apiResponseVecRoleResponse),
  );
}

export function apiResponseVecRoleResponseFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecRoleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecRoleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecRoleResponse' from JSON`,
  );
}
