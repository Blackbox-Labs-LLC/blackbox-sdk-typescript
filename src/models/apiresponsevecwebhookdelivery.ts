/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ApiResponseVecWebhookDeliveryData = {
  attemptCount: number;
  createdAt: string;
  deliveredAt?: string | null | undefined;
  errorMessage?: string | null | undefined;
  eventType: string;
  id: string;
  nextRetry?: string | null | undefined;
  payload?: any | undefined;
  responseBody?: string | null | undefined;
  responseCode?: number | null | undefined;
  status: string;
  url: string;
  webhookId: string;
  webhookName: string;
};

export type ApiResponseVecWebhookDelivery = {
  data?: Array<ApiResponseVecWebhookDeliveryData> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecWebhookDeliveryData$inboundSchema: z.ZodType<
  ApiResponseVecWebhookDeliveryData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attempt_count: z.number().int(),
  created_at: z.string(),
  delivered_at: z.nullable(z.string()).optional(),
  error_message: z.nullable(z.string()).optional(),
  event_type: z.string(),
  id: z.string(),
  next_retry: z.nullable(z.string()).optional(),
  payload: z.any().optional(),
  response_body: z.nullable(z.string()).optional(),
  response_code: z.nullable(z.number().int()).optional(),
  status: z.string(),
  url: z.string(),
  webhook_id: z.string(),
  webhook_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "attempt_count": "attemptCount",
    "created_at": "createdAt",
    "delivered_at": "deliveredAt",
    "error_message": "errorMessage",
    "event_type": "eventType",
    "next_retry": "nextRetry",
    "response_body": "responseBody",
    "response_code": "responseCode",
    "webhook_id": "webhookId",
    "webhook_name": "webhookName",
  });
});

/** @internal */
export type ApiResponseVecWebhookDeliveryData$Outbound = {
  attempt_count: number;
  created_at: string;
  delivered_at?: string | null | undefined;
  error_message?: string | null | undefined;
  event_type: string;
  id: string;
  next_retry?: string | null | undefined;
  payload?: any | undefined;
  response_body?: string | null | undefined;
  response_code?: number | null | undefined;
  status: string;
  url: string;
  webhook_id: string;
  webhook_name: string;
};

/** @internal */
export const ApiResponseVecWebhookDeliveryData$outboundSchema: z.ZodType<
  ApiResponseVecWebhookDeliveryData$Outbound,
  z.ZodTypeDef,
  ApiResponseVecWebhookDeliveryData
> = z.object({
  attemptCount: z.number().int(),
  createdAt: z.string(),
  deliveredAt: z.nullable(z.string()).optional(),
  errorMessage: z.nullable(z.string()).optional(),
  eventType: z.string(),
  id: z.string(),
  nextRetry: z.nullable(z.string()).optional(),
  payload: z.any().optional(),
  responseBody: z.nullable(z.string()).optional(),
  responseCode: z.nullable(z.number().int()).optional(),
  status: z.string(),
  url: z.string(),
  webhookId: z.string(),
  webhookName: z.string(),
}).transform((v) => {
  return remap$(v, {
    attemptCount: "attempt_count",
    createdAt: "created_at",
    deliveredAt: "delivered_at",
    errorMessage: "error_message",
    eventType: "event_type",
    nextRetry: "next_retry",
    responseBody: "response_body",
    responseCode: "response_code",
    webhookId: "webhook_id",
    webhookName: "webhook_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecWebhookDeliveryData$ {
  /** @deprecated use `ApiResponseVecWebhookDeliveryData$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecWebhookDeliveryData$inboundSchema;
  /** @deprecated use `ApiResponseVecWebhookDeliveryData$outboundSchema` instead. */
  export const outboundSchema =
    ApiResponseVecWebhookDeliveryData$outboundSchema;
  /** @deprecated use `ApiResponseVecWebhookDeliveryData$Outbound` instead. */
  export type Outbound = ApiResponseVecWebhookDeliveryData$Outbound;
}

export function apiResponseVecWebhookDeliveryDataToJSON(
  apiResponseVecWebhookDeliveryData: ApiResponseVecWebhookDeliveryData,
): string {
  return JSON.stringify(
    ApiResponseVecWebhookDeliveryData$outboundSchema.parse(
      apiResponseVecWebhookDeliveryData,
    ),
  );
}

export function apiResponseVecWebhookDeliveryDataFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecWebhookDeliveryData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecWebhookDeliveryData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecWebhookDeliveryData' from JSON`,
  );
}

/** @internal */
export const ApiResponseVecWebhookDelivery$inboundSchema: z.ZodType<
  ApiResponseVecWebhookDelivery,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecWebhookDeliveryData$inboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/** @internal */
export type ApiResponseVecWebhookDelivery$Outbound = {
  data?: Array<ApiResponseVecWebhookDeliveryData$Outbound> | undefined;
  message?: string | null | undefined;
  success: boolean;
};

/** @internal */
export const ApiResponseVecWebhookDelivery$outboundSchema: z.ZodType<
  ApiResponseVecWebhookDelivery$Outbound,
  z.ZodTypeDef,
  ApiResponseVecWebhookDelivery
> = z.object({
  data: z.array(z.lazy(() => ApiResponseVecWebhookDeliveryData$outboundSchema))
    .optional(),
  message: z.nullable(z.string()).optional(),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiResponseVecWebhookDelivery$ {
  /** @deprecated use `ApiResponseVecWebhookDelivery$inboundSchema` instead. */
  export const inboundSchema = ApiResponseVecWebhookDelivery$inboundSchema;
  /** @deprecated use `ApiResponseVecWebhookDelivery$outboundSchema` instead. */
  export const outboundSchema = ApiResponseVecWebhookDelivery$outboundSchema;
  /** @deprecated use `ApiResponseVecWebhookDelivery$Outbound` instead. */
  export type Outbound = ApiResponseVecWebhookDelivery$Outbound;
}

export function apiResponseVecWebhookDeliveryToJSON(
  apiResponseVecWebhookDelivery: ApiResponseVecWebhookDelivery,
): string {
  return JSON.stringify(
    ApiResponseVecWebhookDelivery$outboundSchema.parse(
      apiResponseVecWebhookDelivery,
    ),
  );
}

export function apiResponseVecWebhookDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<ApiResponseVecWebhookDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiResponseVecWebhookDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiResponseVecWebhookDelivery' from JSON`,
  );
}
