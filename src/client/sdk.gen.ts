// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetAttachmentStatsData, GetAttachmentStatsResponses, GetAttachmentStatsErrors, DownloadAttachmentData, DownloadAttachmentResponses, DownloadAttachmentErrors, Disable2FaData, Disable2FaResponses, Disable2FaErrors, Enable2FaData, Enable2FaResponses, Enable2FaErrors, LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, LogoutErrors, RegisterData, RegisterResponses, RegisterErrors, RequestPasswordResetData, RequestPasswordResetResponses, RequestPasswordResetErrors, ResendVerificationData, ResendVerificationResponses, ResendVerificationErrors, ResetPasswordData, ResetPasswordResponses, ResetPasswordErrors, Setup2FaData, Setup2FaResponses, Setup2FaErrors, VerifyEmailData, VerifyEmailResponses, VerifyEmailErrors, IdentifyUserData, IdentifyUserResponses, IdentifyUserErrors, SendMessageData, SendMessageResponses, SendMessageErrors, GetUserTicketsData, GetUserTicketsResponses, GetUserTicketsErrors, GetUserOrganizationsData, GetUserOrganizationsResponses, GetUserOrganizationsErrors, CreateOrganizationData, CreateOrganizationResponses, CreateOrganizationErrors, FindOrganizationsByEmailDomainData, FindOrganizationsByEmailDomainResponses, FindOrganizationsByEmailDomainErrors, JoinOrganizationData, JoinOrganizationResponses, JoinOrganizationErrors, GetOrganizationData, GetOrganizationResponses, GetOrganizationErrors, AcceptInvitationData, AcceptInvitationResponses, AcceptInvitationErrors, ClassifyData, ClassifyResponses, KbSuggestData, KbSuggestResponses, RedactData, RedactResponses, RewriteData, RewriteResponses, SuggestReplyData, SuggestReplyResponses, SuggestReplyStreamData, SuggestReplyStreamResponses, SummarizeData, SummarizeResponses, TelemetryData, TelemetryResponses, TranslateData, TranslateResponses, GetOrganizationAnalyticsData, GetOrganizationAnalyticsResponses, GetOrganizationAnalyticsErrors, GetAgentAnalyticsData, GetAgentAnalyticsResponses, GetAgentAnalyticsErrors, GetCsatByAgentData, GetCsatByAgentResponses, GetCsatByMacroData, GetCsatByMacroResponses, GetKnowledgeBaseAnalyticsData, GetKnowledgeBaseAnalyticsResponses, GetKnowledgeBaseAnalyticsErrors, GetMacroAnalyticsData, GetMacroAnalyticsResponses, GetMacroAnalyticsErrors, GetSystemAnalyticsData, GetSystemAnalyticsResponses, GetSystemAnalyticsErrors, GetTicketAnalyticsData, GetTicketAnalyticsResponses, GetTicketAnalyticsErrors, GetTrendAnalyticsData, GetTrendAnalyticsResponses, GetTrendAnalyticsErrors, ExecuteAutomationRulesData, ExecuteAutomationRulesResponses, ExecuteAutomationRulesErrors, ListAutomationRulesData, ListAutomationRulesResponses, ListAutomationRulesErrors, CreateAutomationRuleData, CreateAutomationRuleResponses, CreateAutomationRuleErrors, DeleteAutomationRuleData, DeleteAutomationRuleResponses, DeleteAutomationRuleErrors, GetAutomationRuleData, GetAutomationRuleResponses, GetAutomationRuleErrors, UpdateAutomationRuleData, UpdateAutomationRuleResponses, UpdateAutomationRuleErrors, GetAutomationStatsData, GetAutomationStatsResponses, GetAutomationStatsErrors, ListEventsData, ListEventsResponses, ListEventsErrors, CreateEventData, CreateEventResponses, CreateEventErrors, ExportEventsData, ExportEventsResponses, ExportEventsErrors, GetEventStatsData, GetEventStatsResponses, GetEventStatsErrors, StreamEventsData, StreamEventsResponses, GetEventData, GetEventResponses, GetEventErrors, InviteUserData, InviteUserResponses, InviteUserErrors, ListArticlesData, ListArticlesResponses, ListArticlesErrors, CreateArticleData, CreateArticleResponses, CreateArticleErrors, DeleteArticleData, DeleteArticleResponses, DeleteArticleErrors, GetArticleData, GetArticleResponses, GetArticleErrors, UpdateArticleData, UpdateArticleResponses, UpdateArticleErrors, GetPublicArticlesData, GetPublicArticlesResponses, GetPublicArticlesErrors, SearchPublicArticlesData, SearchPublicArticlesResponses, SearchPublicArticlesErrors, ListMacrosData, ListMacrosResponses, ListMacrosErrors, CreateMacroData, CreateMacroResponses, CreateMacroErrors, DeleteMacroExperimentData, DeleteMacroExperimentResponses, UpdateMacroExperimentData, UpdateMacroExperimentResponses, GetPopularMacrosData, GetPopularMacrosResponses, GetPopularMacrosErrors, RenderMacroTemplateData, RenderMacroTemplateResponses, RenderMacroTemplateErrors, DeleteMacroData, DeleteMacroResponses, DeleteMacroErrors, GetMacroData, GetMacroResponses, GetMacroErrors, UpdateMacroData, UpdateMacroResponses, UpdateMacroErrors, ListMacroExperimentsData, ListMacroExperimentsResponses, CreateMacroExperimentData, CreateMacroExperimentResponses, ListMacroVariantsData, ListMacroVariantsResponses, CreateMacroVariantData, CreateMacroVariantResponses, DeleteMacroVariantData, DeleteMacroVariantResponses, UpdateMacroVariantData, UpdateMacroVariantResponses, GetMembersData, GetMembersResponses, GetMembersErrors, RemoveMemberData, RemoveMemberResponses, RemoveMemberErrors, UpdateMembershipData, UpdateMembershipResponses, UpdateMembershipErrors, DeleteMessageData, DeleteMessageResponses, DeleteMessageErrors, GetMessageData, GetMessageResponses, GetMessageErrors, GetEffectivePermissionsData, GetEffectivePermissionsResponses, ListAgentsData, ListAgentsResponses, HeartbeatData, HeartbeatResponses, ListRolesData, ListRolesResponses, CreateRoleData, CreateRoleResponses, DeleteRoleData, DeleteRoleResponses, GetRoleData, GetRoleResponses, UpdateRoleData, UpdateRoleResponses, AssignRoleData, AssignRoleResponses, RevokeRoleData, RevokeRoleResponses, ListRulesData, ListRulesResponses, CreateRuleData, CreateRuleResponses, DeleteRuleData, DeleteRuleResponses, UpdateRuleData, UpdateRuleResponses, WorkloadData, WorkloadResponses, GetAllOrganizationSettingsData, GetAllOrganizationSettingsResponses, GetAllOrganizationSettingsErrors, SetOrganizationSettingData, SetOrganizationSettingResponses, SetOrganizationSettingErrors, DeleteOrganizationSettingData, DeleteOrganizationSettingResponses, DeleteOrganizationSettingErrors, GetOrganizationSettingData, GetOrganizationSettingResponses, GetOrganizationSettingErrors, CheckBreachesData, CheckBreachesResponses, ListPoliciesData, ListPoliciesResponses, CreatePolicyData, CreatePolicyResponses, UpdatePolicyData, UpdatePolicyResponses, ListSurveysData, ListSurveysResponses, ListSurveysErrors, SubmitSurveyData, SubmitSurveyResponses, SubmitSurveyErrors, GetSurveyAnalyticsData, GetSurveyAnalyticsResponses, GetSurveyAnalyticsErrors, ExportSurveysData, ExportSurveysResponses, ExportSurveysErrors, DeleteSurveyData, DeleteSurveyResponses, DeleteSurveyErrors, GetSurveyData, GetSurveyResponses, GetSurveyErrors, UpdateSurveyData, UpdateSurveyResponses, UpdateSurveyErrors, ListTagsData, ListTagsResponses, ListTagsErrors, CreateTagData, CreateTagResponses, CreateTagErrors, GetPopularTagsData, GetPopularTagsResponses, GetPopularTagsErrors, DeleteTagData, DeleteTagResponses, DeleteTagErrors, GetTagData, GetTagResponses, GetTagErrors, UpdateTagData, UpdateTagResponses, UpdateTagErrors, GetTagWithTicketsData, GetTagWithTicketsResponses, GetTagWithTicketsErrors, ListTicketsData, ListTicketsResponses, ListTicketsErrors, CreateTicketData, CreateTicketResponses, CreateTicketErrors, BulkUpdateTicketsData, BulkUpdateTicketsResponses, MergeTicketsData, MergeTicketsResponses, ListSavedViewsData, ListSavedViewsResponses, CreateSavedViewData, CreateSavedViewResponses, DeleteTicketData, DeleteTicketResponses, DeleteTicketErrors, GetTicketData, GetTicketResponses, GetTicketErrors, UpdateTicketData, UpdateTicketResponses, UpdateTicketErrors, DeleteDraftData, DeleteDraftResponses, GetDraftData, GetDraftResponses, UpsertDraftData, UpsertDraftResponses, GetTicketHistoryData, GetTicketHistoryResponses, GetTicketHistoryErrors, ReleaseTicketLockData, ReleaseTicketLockResponses, LockTicketData, LockTicketResponses, TakeoverTicketLockData, TakeoverTicketLockResponses, ListTicketMessagesData, ListTicketMessagesResponses, ListTicketMessagesErrors, CreateMessageData, CreateMessageResponses, CreateMessageErrors, GetMessageCountData, GetMessageCountResponses, GetMessageCountErrors, GetLatestMessageData, GetLatestMessageResponses, GetLatestMessageErrors, SearchMessagesData, SearchMessagesResponses, SearchMessagesErrors, ListMessageAttachmentsData, ListMessageAttachmentsResponses, ListMessageAttachmentsErrors, UploadAttachmentsData, UploadAttachmentsResponses, UploadAttachmentsErrors, DeleteAttachmentData, DeleteAttachmentResponses, DeleteAttachmentErrors, RemoveTagsFromTicketData, RemoveTagsFromTicketResponses, RemoveTagsFromTicketErrors, AddTagsToTicketData, AddTagsToTicketResponses, AddTagsToTicketErrors, ListTypingData, ListTypingResponses, TypingUpdateData, TypingUpdateResponses, ListWebhooksData, ListWebhooksResponses, ListWebhooksErrors, CreateWebhookData, CreateWebhookResponses, CreateWebhookErrors, ListWebhookEventsData, ListWebhookEventsResponses, ListWebhookEventsErrors, SendWebhooksData, SendWebhooksResponses, SendWebhooksErrors, GetWebhookStatsData, GetWebhookStatsResponses, GetWebhookStatsErrors, DeleteWebhookData, DeleteWebhookResponses, DeleteWebhookErrors, GetWebhookData, GetWebhookResponses, GetWebhookErrors, UpdateWebhookData, UpdateWebhookResponses, UpdateWebhookErrors, TestWebhookData, TestWebhookResponses, TestWebhookErrors, GetPermissionsCatalogData, GetPermissionsCatalogResponses, ListSessionsData, ListSessionsResponses, ListSessionsErrors, CleanupExpiredSessionsData, CleanupExpiredSessionsResponses, CleanupExpiredSessionsErrors, RevokeAllSessionsData, RevokeAllSessionsResponses, RevokeAllSessionsErrors, GetSessionStatsData, GetSessionStatsResponses, GetSessionStatsErrors, RevokeSessionData, RevokeSessionResponses, RevokeSessionErrors, GetSessionData, GetSessionResponses, GetSessionErrors, ExtendSessionData, ExtendSessionResponses, ExtendSessionErrors, DeleteAccountData, DeleteAccountResponses, DeleteAccountErrors, ListApiKeysData, ListApiKeysResponses, ListApiKeysErrors, CreateApiKeyData, CreateApiKeyResponses, CreateApiKeyErrors, DeleteApiKeyData, DeleteApiKeyResponses, DeleteApiKeyErrors, GetApiKeyData, GetApiKeyResponses, GetApiKeyErrors, RevokeApiKeyData, RevokeApiKeyResponses, RevokeApiKeyErrors, GetLoginAttemptsData, GetLoginAttemptsResponses, GetLoginAttemptsErrors, GetLoginHistoryData, GetLoginHistoryResponses, GetLoginHistoryErrors, ChangePasswordData, ChangePasswordResponses, ChangePasswordErrors, GetProfileData, GetProfileResponses, GetProfileErrors, UpdateProfileData, UpdateProfileResponses, UpdateProfileErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAttachmentStats = <ThrowOnError extends boolean = false>(options?: Options<GetAttachmentStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAttachmentStatsResponses, GetAttachmentStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/admin/attachments/stats',
        ...options
    });
};

export const downloadAttachment = <ThrowOnError extends boolean = false>(options: Options<DownloadAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadAttachmentResponses, DownloadAttachmentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/attachments/{attachment_id}/download',
        ...options
    });
};

export const disable2Fa = <ThrowOnError extends boolean = false>(options?: Options<Disable2FaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<Disable2FaResponses, Disable2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/auth/disable-2fa',
        ...options
    });
};

export const enable2Fa = <ThrowOnError extends boolean = false>(options: Options<Enable2FaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Enable2FaResponses, Enable2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/auth/enable-2fa',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/api/v0/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, LogoutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/auth/logout',
        ...options
    });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        url: '/api/v0/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const requestPasswordReset = <ThrowOnError extends boolean = false>(options: Options<RequestPasswordResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestPasswordResetResponses, RequestPasswordResetErrors, ThrowOnError>({
        url: '/api/v0/auth/request-password-reset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const resendVerification = <ThrowOnError extends boolean = false>(options: Options<ResendVerificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResendVerificationResponses, ResendVerificationErrors, ThrowOnError>({
        url: '/api/v0/auth/resend-verification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordResponses, ResetPasswordErrors, ThrowOnError>({
        url: '/api/v0/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const setup2Fa = <ThrowOnError extends boolean = false>(options?: Options<Setup2FaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<Setup2FaResponses, Setup2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/auth/setup-2fa',
        ...options
    });
};

export const verifyEmail = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyEmailResponses, VerifyEmailErrors, ThrowOnError>({
        url: '/api/v0/auth/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const identifyUser = <ThrowOnError extends boolean = false>(options: Options<IdentifyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IdentifyUserResponses, IdentifyUserErrors, ThrowOnError>({
        url: '/api/v0/client/identify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const sendMessage = <ThrowOnError extends boolean = false>(options: Options<SendMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendMessageResponses, SendMessageErrors, ThrowOnError>({
        url: '/api/v0/client/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserTickets = <ThrowOnError extends boolean = false>(options: Options<GetUserTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserTicketsResponses, GetUserTicketsErrors, ThrowOnError>({
        url: '/api/v0/client/tickets/{user_id}',
        ...options
    });
};

export const getUserOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetUserOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserOrganizationsResponses, GetUserOrganizationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations',
        ...options
    });
};

export const createOrganization = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrganizationResponses, CreateOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const findOrganizationsByEmailDomain = <ThrowOnError extends boolean = false>(options: Options<FindOrganizationsByEmailDomainData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindOrganizationsByEmailDomainResponses, FindOrganizationsByEmailDomainErrors, ThrowOnError>({
        url: '/api/v0/organizations/by-domain',
        ...options
    });
};

export const joinOrganization = <ThrowOnError extends boolean = false>(options: Options<JoinOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<JoinOrganizationResponses, JoinOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/join',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getOrganization = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationResponses, GetOrganizationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}',
        ...options
    });
};

export const acceptInvitation = <ThrowOnError extends boolean = false>(options: Options<AcceptInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AcceptInvitationResponses, AcceptInvitationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/accept-invitation',
        ...options
    });
};

export const classify = <ThrowOnError extends boolean = false>(options: Options<ClassifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClassifyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/classify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const kbSuggest = <ThrowOnError extends boolean = false>(options: Options<KbSuggestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<KbSuggestResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/kb-suggest',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const redact = <ThrowOnError extends boolean = false>(options: Options<RedactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RedactResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/redact',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rewrite = <ThrowOnError extends boolean = false>(options: Options<RewriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RewriteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/rewrite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const suggestReply = <ThrowOnError extends boolean = false>(options: Options<SuggestReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuggestReplyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/suggest-reply',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const suggestReplyStream = <ThrowOnError extends boolean = false>(options: Options<SuggestReplyStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuggestReplyStreamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/suggest-reply/stream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const summarize = <ThrowOnError extends boolean = false>(options: Options<SummarizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SummarizeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/summarize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const telemetry = <ThrowOnError extends boolean = false>(options: Options<TelemetryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TelemetryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/telemetry',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const translate = <ThrowOnError extends boolean = false>(options: Options<TranslateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TranslateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/ai/translate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getOrganizationAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationAnalyticsResponses, GetOrganizationAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics',
        ...options
    });
};

export const getAgentAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetAgentAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentAnalyticsResponses, GetAgentAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/agents',
        ...options
    });
};

export const getCsatByAgent = <ThrowOnError extends boolean = false>(options: Options<GetCsatByAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCsatByAgentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/csat/by-agent',
        ...options
    });
};

export const getCsatByMacro = <ThrowOnError extends boolean = false>(options: Options<GetCsatByMacroData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCsatByMacroResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/csat/by-macro',
        ...options
    });
};

export const getKnowledgeBaseAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgeBaseAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgeBaseAnalyticsResponses, GetKnowledgeBaseAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/knowledge-base',
        ...options
    });
};

export const getMacroAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetMacroAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMacroAnalyticsResponses, GetMacroAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/macros',
        ...options
    });
};

export const getSystemAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetSystemAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSystemAnalyticsResponses, GetSystemAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/system',
        ...options
    });
};

export const getTicketAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetTicketAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketAnalyticsResponses, GetTicketAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/tickets',
        ...options
    });
};

export const getTrendAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetTrendAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTrendAnalyticsResponses, GetTrendAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/analytics/trends',
        ...options
    });
};

export const executeAutomationRules = <ThrowOnError extends boolean = false>(options: Options<ExecuteAutomationRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecuteAutomationRulesResponses, ExecuteAutomationRulesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/automation/execute',
        ...options
    });
};

export const listAutomationRules = <ThrowOnError extends boolean = false>(options: Options<ListAutomationRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAutomationRulesResponses, ListAutomationRulesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/automation/rules',
        ...options
    });
};

export const createAutomationRule = <ThrowOnError extends boolean = false>(options: Options<CreateAutomationRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAutomationRuleResponses, CreateAutomationRuleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/automation/rules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAutomationRule = <ThrowOnError extends boolean = false>(options: Options<DeleteAutomationRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAutomationRuleResponses, DeleteAutomationRuleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/automation/rules/{rule_id}',
        ...options
    });
};

export const getAutomationRule = <ThrowOnError extends boolean = false>(options: Options<GetAutomationRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAutomationRuleResponses, GetAutomationRuleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/automation/rules/{rule_id}',
        ...options
    });
};

export const updateAutomationRule = <ThrowOnError extends boolean = false>(options: Options<UpdateAutomationRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAutomationRuleResponses, UpdateAutomationRuleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/automation/rules/{rule_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAutomationStats = <ThrowOnError extends boolean = false>(options: Options<GetAutomationStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAutomationStatsResponses, GetAutomationStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/automation/stats',
        ...options
    });
};

export const listEvents = <ThrowOnError extends boolean = false>(options: Options<ListEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListEventsResponses, ListEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/events',
        ...options
    });
};

export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventResponses, CreateEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const exportEvents = <ThrowOnError extends boolean = false>(options: Options<ExportEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportEventsResponses, ExportEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/events/export',
        ...options
    });
};

export const getEventStats = <ThrowOnError extends boolean = false>(options: Options<GetEventStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventStatsResponses, GetEventStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/events/stats',
        ...options
    });
};

export const streamEvents = <ThrowOnError extends boolean = false>(options: Options<StreamEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StreamEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/events/stream',
        ...options
    });
};

export const getEvent = <ThrowOnError extends boolean = false>(options: Options<GetEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventResponses, GetEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/events/{event_id}',
        ...options
    });
};

export const inviteUser = <ThrowOnError extends boolean = false>(options: Options<InviteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteUserResponses, InviteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listArticles = <ThrowOnError extends boolean = false>(options: Options<ListArticlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListArticlesResponses, ListArticlesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/knowledge-base/articles',
        ...options
    });
};

export const createArticle = <ThrowOnError extends boolean = false>(options: Options<CreateArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArticleResponses, CreateArticleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/knowledge-base/articles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteArticle = <ThrowOnError extends boolean = false>(options: Options<DeleteArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteArticleResponses, DeleteArticleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/knowledge-base/articles/{article_id}',
        ...options
    });
};

export const getArticle = <ThrowOnError extends boolean = false>(options: Options<GetArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArticleResponses, GetArticleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/knowledge-base/articles/{article_id}',
        ...options
    });
};

export const updateArticle = <ThrowOnError extends boolean = false>(options: Options<UpdateArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateArticleResponses, UpdateArticleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/knowledge-base/articles/{article_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getPublicArticles = <ThrowOnError extends boolean = false>(options: Options<GetPublicArticlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicArticlesResponses, GetPublicArticlesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/knowledge-base/public',
        ...options
    });
};

export const searchPublicArticles = <ThrowOnError extends boolean = false>(options: Options<SearchPublicArticlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchPublicArticlesResponses, SearchPublicArticlesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/knowledge-base/search',
        ...options
    });
};

export const listMacros = <ThrowOnError extends boolean = false>(options: Options<ListMacrosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMacrosResponses, ListMacrosErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros',
        ...options
    });
};

export const createMacro = <ThrowOnError extends boolean = false>(options: Options<CreateMacroData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMacroResponses, CreateMacroErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteMacroExperiment = <ThrowOnError extends boolean = false>(options: Options<DeleteMacroExperimentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMacroExperimentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/experiments/{experiment_id}',
        ...options
    });
};

export const updateMacroExperiment = <ThrowOnError extends boolean = false>(options: Options<UpdateMacroExperimentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMacroExperimentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/experiments/{experiment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getPopularMacros = <ThrowOnError extends boolean = false>(options: Options<GetPopularMacrosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPopularMacrosResponses, GetPopularMacrosErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/popular',
        ...options
    });
};

export const renderMacroTemplate = <ThrowOnError extends boolean = false>(options: Options<RenderMacroTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RenderMacroTemplateResponses, RenderMacroTemplateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/render',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteMacro = <ThrowOnError extends boolean = false>(options: Options<DeleteMacroData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMacroResponses, DeleteMacroErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}',
        ...options
    });
};

export const getMacro = <ThrowOnError extends boolean = false>(options: Options<GetMacroData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMacroResponses, GetMacroErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}',
        ...options
    });
};

export const updateMacro = <ThrowOnError extends boolean = false>(options: Options<UpdateMacroData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMacroResponses, UpdateMacroErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listMacroExperiments = <ThrowOnError extends boolean = false>(options: Options<ListMacroExperimentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMacroExperimentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}/experiments',
        ...options
    });
};

export const createMacroExperiment = <ThrowOnError extends boolean = false>(options: Options<CreateMacroExperimentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMacroExperimentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}/experiments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listMacroVariants = <ThrowOnError extends boolean = false>(options: Options<ListMacroVariantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMacroVariantsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}/variants',
        ...options
    });
};

export const createMacroVariant = <ThrowOnError extends boolean = false>(options: Options<CreateMacroVariantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMacroVariantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}/variants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteMacroVariant = <ThrowOnError extends boolean = false>(options: Options<DeleteMacroVariantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMacroVariantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}/variants/{variant_id}',
        ...options
    });
};

export const updateMacroVariant = <ThrowOnError extends boolean = false>(options: Options<UpdateMacroVariantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMacroVariantResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/macros/{macro_id}/variants/{variant_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMembers = <ThrowOnError extends boolean = false>(options: Options<GetMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMembersResponses, GetMembersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/members',
        ...options
    });
};

export const removeMember = <ThrowOnError extends boolean = false>(options: Options<RemoveMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveMemberResponses, RemoveMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/members/{member_id}',
        ...options
    });
};

export const updateMembership = <ThrowOnError extends boolean = false>(options: Options<UpdateMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMembershipResponses, UpdateMembershipErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/members/{member_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteMessage = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessageResponses, DeleteMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/messages/{message_id}',
        ...options
    });
};

export const getMessage = <ThrowOnError extends boolean = false>(options: Options<GetMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageResponses, GetMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/messages/{message_id}',
        ...options
    });
};

export const getEffectivePermissions = <ThrowOnError extends boolean = false>(options: Options<GetEffectivePermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEffectivePermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/permissions/effective',
        ...options
    });
};

export const listAgents = <ThrowOnError extends boolean = false>(options: Options<ListAgentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAgentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/presence/agents',
        ...options
    });
};

export const heartbeat = <ThrowOnError extends boolean = false>(options: Options<HeartbeatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HeartbeatResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/presence/heartbeat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listRoles = <ThrowOnError extends boolean = false>(options: Options<ListRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRolesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/roles',
        ...options
    });
};

export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/roles/{role_id}',
        ...options
    });
};

export const getRole = <ThrowOnError extends boolean = false>(options: Options<GetRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/roles/{role_id}',
        ...options
    });
};

export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/roles/{role_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const assignRole = <ThrowOnError extends boolean = false>(options: Options<AssignRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/roles/{role_id}/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const revokeRole = <ThrowOnError extends boolean = false>(options: Options<RevokeRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/roles/{role_id}/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listRules = <ThrowOnError extends boolean = false>(options: Options<ListRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRulesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/routing/rules',
        ...options
    });
};

export const createRule = <ThrowOnError extends boolean = false>(options: Options<CreateRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRuleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/routing/rules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteRule = <ThrowOnError extends boolean = false>(options: Options<DeleteRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRuleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/routing/rules/{rule_id}',
        ...options
    });
};

export const updateRule = <ThrowOnError extends boolean = false>(options: Options<UpdateRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRuleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/routing/rules/{rule_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const workload = <ThrowOnError extends boolean = false>(options: Options<WorkloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkloadResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/routing/workload',
        ...options
    });
};

export const getAllOrganizationSettings = <ThrowOnError extends boolean = false>(options: Options<GetAllOrganizationSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllOrganizationSettingsResponses, GetAllOrganizationSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/settings',
        ...options
    });
};

export const setOrganizationSetting = <ThrowOnError extends boolean = false>(options: Options<SetOrganizationSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetOrganizationSettingResponses, SetOrganizationSettingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteOrganizationSetting = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationSettingResponses, DeleteOrganizationSettingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/settings/{key}',
        ...options
    });
};

export const getOrganizationSetting = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationSettingResponses, GetOrganizationSettingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/settings/{key}',
        ...options
    });
};

export const checkBreaches = <ThrowOnError extends boolean = false>(options: Options<CheckBreachesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CheckBreachesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/sla/check-breaches',
        ...options
    });
};

export const listPolicies = <ThrowOnError extends boolean = false>(options: Options<ListPoliciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPoliciesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/sla/policies',
        ...options
    });
};

export const createPolicy = <ThrowOnError extends boolean = false>(options: Options<CreatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePolicyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/sla/policies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updatePolicy = <ThrowOnError extends boolean = false>(options: Options<UpdatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePolicyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/sla/policies/{policy_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listSurveys = <ThrowOnError extends boolean = false>(options: Options<ListSurveysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSurveysResponses, ListSurveysErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/surveys',
        ...options
    });
};

export const submitSurvey = <ThrowOnError extends boolean = false>(options: Options<SubmitSurveyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitSurveyResponses, SubmitSurveyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/surveys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getSurveyAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetSurveyAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSurveyAnalyticsResponses, GetSurveyAnalyticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/surveys/analytics',
        ...options
    });
};

export const exportSurveys = <ThrowOnError extends boolean = false>(options: Options<ExportSurveysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportSurveysResponses, ExportSurveysErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/surveys/export',
        ...options
    });
};

export const deleteSurvey = <ThrowOnError extends boolean = false>(options: Options<DeleteSurveyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSurveyResponses, DeleteSurveyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/surveys/{survey_id}',
        ...options
    });
};

export const getSurvey = <ThrowOnError extends boolean = false>(options: Options<GetSurveyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSurveyResponses, GetSurveyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/surveys/{survey_id}',
        ...options
    });
};

export const updateSurvey = <ThrowOnError extends boolean = false>(options: Options<UpdateSurveyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSurveyResponses, UpdateSurveyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/surveys/{survey_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listTags = <ThrowOnError extends boolean = false>(options: Options<ListTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTagsResponses, ListTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tags',
        ...options
    });
};

/**
 * Create a tag
 * Requires permission: MANAGE_TAGS
 */
export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponses, CreateTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getPopularTags = <ThrowOnError extends boolean = false>(options: Options<GetPopularTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPopularTagsResponses, GetPopularTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tags/popular',
        ...options
    });
};

/**
 * Delete a tag
 * Requires permission: MANAGE_TAGS
 */
export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponses, DeleteTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tags/{tag_id}',
        ...options
    });
};

export const getTag = <ThrowOnError extends boolean = false>(options: Options<GetTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagResponses, GetTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tags/{tag_id}',
        ...options
    });
};

/**
 * Update a tag
 * Requires permission: MANAGE_TAGS
 */
export const updateTag = <ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTagResponses, UpdateTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTagWithTickets = <ThrowOnError extends boolean = false>(options: Options<GetTagWithTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagWithTicketsResponses, GetTagWithTicketsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tags/{tag_id}/tickets',
        ...options
    });
};

/**
 * List tickets with filtering
 * Retrieves a paginated list of tickets with optional filtering by status, priority, assignment, creator, and tags. Results are ordered by creation date (newest first).
 */
export const listTickets = <ThrowOnError extends boolean = false>(options: Options<ListTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketsResponses, ListTicketsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets',
        ...options
    });
};

/**
 * Create a new support ticket
 * Creates a new support ticket in the specified organization. The ticket will be assigned to the authenticated user as the creator and can optionally be assigned to another team member.
 */
export const createTicket = <ThrowOnError extends boolean = false>(options: Options<CreateTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTicketResponses, CreateTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Bulk update tickets
 */
export const bulkUpdateTickets = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BulkUpdateTicketsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Merge two tickets
 */
export const mergeTickets = <ThrowOnError extends boolean = false>(options: Options<MergeTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MergeTicketsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List saved views
 */
export const listSavedViews = <ThrowOnError extends boolean = false>(options: Options<ListSavedViewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSavedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/views',
        ...options
    });
};

/**
 * Create a saved view
 */
export const createSavedView = <ThrowOnError extends boolean = false>(options: Options<CreateSavedViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSavedViewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/views',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteTicket = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTicketResponses, DeleteTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}',
        ...options
    });
};

/**
 * Get ticket details
 * Retrieves detailed information about a specific ticket including its current status, assignment, tags, and metadata.
 */
export const getTicket = <ThrowOnError extends boolean = false>(options: Options<GetTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketResponses, GetTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}',
        ...options
    });
};

export const updateTicket = <ThrowOnError extends boolean = false>(options: Options<UpdateTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTicketResponses, UpdateTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete current user's draft for a ticket
 */
export const deleteDraft = <ThrowOnError extends boolean = false>(options: Options<DeleteDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/draft',
        ...options
    });
};

/**
 * Get current user's draft for a ticket
 */
export const getDraft = <ThrowOnError extends boolean = false>(options: Options<GetDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/draft',
        ...options
    });
};

/**
 * Create or update a draft for a ticket
 */
export const upsertDraft = <ThrowOnError extends boolean = false>(options: Options<UpsertDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/draft',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get ticket history
 * Requires permission: VIEW_ALL_TICKETS
 */
export const getTicketHistory = <ThrowOnError extends boolean = false>(options: Options<GetTicketHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketHistoryResponses, GetTicketHistoryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/history',
        ...options
    });
};

export const releaseTicketLock = <ThrowOnError extends boolean = false>(options: Options<ReleaseTicketLockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ReleaseTicketLockResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/lock',
        ...options
    });
};

export const lockTicket = <ThrowOnError extends boolean = false>(options: Options<LockTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LockTicketResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/lock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const takeoverTicketLock = <ThrowOnError extends boolean = false>(options: Options<TakeoverTicketLockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TakeoverTicketLockResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/lock/takeover',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listTicketMessages = <ThrowOnError extends boolean = false>(options: Options<ListTicketMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketMessagesResponses, ListTicketMessagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages',
        ...options
    });
};

export const createMessage = <ThrowOnError extends boolean = false>(options: Options<CreateMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessageResponses, CreateMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMessageCount = <ThrowOnError extends boolean = false>(options: Options<GetMessageCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageCountResponses, GetMessageCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/count',
        ...options
    });
};

export const getLatestMessage = <ThrowOnError extends boolean = false>(options: Options<GetLatestMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLatestMessageResponses, GetLatestMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/latest',
        ...options
    });
};

export const searchMessages = <ThrowOnError extends boolean = false>(options: Options<SearchMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchMessagesResponses, SearchMessagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/search',
        ...options
    });
};

export const listMessageAttachments = <ThrowOnError extends boolean = false>(options: Options<ListMessageAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMessageAttachmentsResponses, ListMessageAttachmentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments',
        ...options
    });
};

export const uploadAttachments = <ThrowOnError extends boolean = false>(options: Options<UploadAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadAttachmentsResponses, UploadAttachmentsErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const deleteAttachment = <ThrowOnError extends boolean = false>(options: Options<DeleteAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAttachmentResponses, DeleteAttachmentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments/{attachment_id}',
        ...options
    });
};

export const removeTagsFromTicket = <ThrowOnError extends boolean = false>(options: Options<RemoveTagsFromTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTagsFromTicketResponses, RemoveTagsFromTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const addTagsToTicket = <ThrowOnError extends boolean = false>(options: Options<AddTagsToTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTagsToTicketResponses, AddTagsToTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listTyping = <ThrowOnError extends boolean = false>(options: Options<ListTypingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTypingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/typing',
        ...options
    });
};

export const typingUpdate = <ThrowOnError extends boolean = false>(options: Options<TypingUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TypingUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/typing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listWebhooks = <ThrowOnError extends boolean = false>(options: Options<ListWebhooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListWebhooksResponses, ListWebhooksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks',
        ...options
    });
};

export const createWebhook = <ThrowOnError extends boolean = false>(options: Options<CreateWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWebhookResponses, CreateWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listWebhookEvents = <ThrowOnError extends boolean = false>(options: Options<ListWebhookEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListWebhookEventsResponses, ListWebhookEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks/events',
        ...options
    });
};

export const sendWebhooks = <ThrowOnError extends boolean = false>(options: Options<SendWebhooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendWebhooksResponses, SendWebhooksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks/send',
        ...options
    });
};

export const getWebhookStats = <ThrowOnError extends boolean = false>(options: Options<GetWebhookStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebhookStatsResponses, GetWebhookStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks/stats',
        ...options
    });
};

export const deleteWebhook = <ThrowOnError extends boolean = false>(options: Options<DeleteWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWebhookResponses, DeleteWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}',
        ...options
    });
};

export const getWebhook = <ThrowOnError extends boolean = false>(options: Options<GetWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebhookResponses, GetWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}',
        ...options
    });
};

export const updateWebhook = <ThrowOnError extends boolean = false>(options: Options<UpdateWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWebhookResponses, UpdateWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const testWebhook = <ThrowOnError extends boolean = false>(options: Options<TestWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestWebhookResponses, TestWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getPermissionsCatalog = <ThrowOnError extends boolean = false>(options?: Options<GetPermissionsCatalogData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPermissionsCatalogResponses, unknown, ThrowOnError>({
        url: '/api/v0/permissions/catalog',
        ...options
    });
};

export const listSessions = <ThrowOnError extends boolean = false>(options?: Options<ListSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSessionsResponses, ListSessionsErrors, ThrowOnError>({
        url: '/api/v0/sessions',
        ...options
    });
};

export const cleanupExpiredSessions = <ThrowOnError extends boolean = false>(options?: Options<CleanupExpiredSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CleanupExpiredSessionsResponses, CleanupExpiredSessionsErrors, ThrowOnError>({
        url: '/api/v0/sessions/cleanup',
        ...options
    });
};

export const revokeAllSessions = <ThrowOnError extends boolean = false>(options: Options<RevokeAllSessionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeAllSessionsResponses, RevokeAllSessionsErrors, ThrowOnError>({
        url: '/api/v0/sessions/revoke-all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getSessionStats = <ThrowOnError extends boolean = false>(options?: Options<GetSessionStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionStatsResponses, GetSessionStatsErrors, ThrowOnError>({
        url: '/api/v0/sessions/stats',
        ...options
    });
};

export const revokeSession = <ThrowOnError extends boolean = false>(options: Options<RevokeSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RevokeSessionResponses, RevokeSessionErrors, ThrowOnError>({
        url: '/api/v0/sessions/{session_id}',
        ...options
    });
};

export const getSession = <ThrowOnError extends boolean = false>(options: Options<GetSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionResponses, GetSessionErrors, ThrowOnError>({
        url: '/api/v0/sessions/{session_id}',
        ...options
    });
};

export const extendSession = <ThrowOnError extends boolean = false>(options: Options<ExtendSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExtendSessionResponses, ExtendSessionErrors, ThrowOnError>({
        url: '/api/v0/sessions/{session_id}/extend',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteAccount = <ThrowOnError extends boolean = false>(options?: Options<DeleteAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteAccountResponses, DeleteAccountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/account',
        ...options
    });
};

export const listApiKeys = <ThrowOnError extends boolean = false>(options?: Options<ListApiKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListApiKeysResponses, ListApiKeysErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/api-keys',
        ...options
    });
};

export const createApiKey = <ThrowOnError extends boolean = false>(options: Options<CreateApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiKeyResponses, CreateApiKeyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/api-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiKey = <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiKeyResponses, DeleteApiKeyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/api-keys/{key_id}',
        ...options
    });
};

export const getApiKey = <ThrowOnError extends boolean = false>(options: Options<GetApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiKeyResponses, GetApiKeyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/api-keys/{key_id}',
        ...options
    });
};

export const revokeApiKey = <ThrowOnError extends boolean = false>(options: Options<RevokeApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeApiKeyResponses, RevokeApiKeyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/api-keys/{key_id}/revoke',
        ...options
    });
};

export const getLoginAttempts = <ThrowOnError extends boolean = false>(options?: Options<GetLoginAttemptsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoginAttemptsResponses, GetLoginAttemptsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/login-attempts',
        ...options
    });
};

export const getLoginHistory = <ThrowOnError extends boolean = false>(options?: Options<GetLoginHistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoginHistoryResponses, GetLoginHistoryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/login-history',
        ...options
    });
};

export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangePasswordResponses, ChangePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getProfile = <ThrowOnError extends boolean = false>(options?: Options<GetProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfileResponses, GetProfileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/profile',
        ...options
    });
};

export const updateProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProfileResponses, UpdateProfileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v0/users/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};