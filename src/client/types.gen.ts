// This file is auto-generated by @hey-api/openapi-ts

export type AgentActivity = {
    agent_id: string;
    agent_name: string;
    events_today: number;
    last_activity: string;
    status: string;
};

export type AgentAnalytics = {
    active_agents_today: number;
    agent_activity: Array<AgentActivity>;
    average_tickets_per_agent: number;
    top_performers: Array<AgentPerformance>;
    total_agents: number;
};

export type AgentPerformance = {
    agent_id: string;
    agent_name: string;
    average_resolution_time_hours?: number | null;
    average_response_time_hours?: number | null;
    messages_sent: number;
    resolution_rate: number;
    tickets_handled: number;
    tickets_resolved: number;
};

export type AgentSatisfactionScore = {
    agent_id: string;
    agent_name: string;
    average_score: number;
    satisfaction_rate: number;
    total_surveys: number;
};

export type AnalyticsTimeRange = {
    from_date?: string | null;
    to_date?: string | null;
};

export type ApiKeyListFilter = {
    include_revoked?: boolean | null;
    page?: number | null;
    per_page?: number | null;
};

export type ApiKeyResponse = {
    created_at: string;
    expires_at?: string | null;
    id: string;
    last_used?: string | null;
    name: string;
    revoked: boolean;
    scopes: Array<string>;
};

export type ApiResponseAgentAnalytics = {
    data?: {
        active_agents_today: number;
        agent_activity: Array<AgentActivity>;
        average_tickets_per_agent: number;
        top_performers: Array<AgentPerformance>;
        total_agents: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseApiKeyResponse = {
    data?: {
        created_at: string;
        expires_at?: string | null;
        id: string;
        last_used?: string | null;
        name: string;
        revoked: boolean;
        scopes: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseArticleResponse = {
    data?: {
        author_id: string;
        author_name: string;
        content: string;
        created_at: string;
        id: string;
        public: boolean;
        title: string;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseAuthResponse = {
    data?: {
        email_verified: boolean;
        organizations: Array<UserOrgInfo>;
        session_token: string;
        two_fa_enabled: boolean;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseAutomationRuleResponse = {
    data?: {
        actions: Array<AutomationAction>;
        conditions: AutomationConditions;
        created_at: string;
        description: string;
        enabled: boolean;
        execution_count: number;
        id: string;
        last_executed?: string | null;
        name: string;
        organization_id: string;
        trigger: string;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseAutomationStats = {
    data?: {
        disabled_rules: number;
        enabled_rules: number;
        executions_this_week: number;
        executions_today: number;
        most_active_rules: Array<RuleActivity>;
        total_rules: number;
        trigger_distribution: Array<TriggerCount>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseCsatAnalytics = {
    data?: {
        agent_satisfaction: Array<AgentSatisfactionScore>;
        average_score: number;
        monthly_trends: Array<MonthlySurveyData>;
        satisfaction_rate: number;
        score_distribution: Array<ScoreCount>;
        surveys_this_month: number;
        surveys_this_week: number;
        surveys_today: number;
        top_issues: Array<IssueCategory>;
        total_surveys: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseClientTicketResponse = {
    data?: {
        created_at: string;
        status: string;
        ticket_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseClientUserResponse = {
    data?: {
        email?: string | null;
        is_authenticated: boolean;
        name?: string | null;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseCreateApiKeyResponse = {
    data?: {
        created_at: string;
        expires_at?: string | null;
        id: string;
        key: string;
        name: string;
        scopes: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseEffectivePermissionsResponse = {
    data?: {
        effective_permissions: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseEventLogResponse = {
    data?: {
        created_at: string;
        event_type: string;
        id: string;
        metadata: unknown;
        organization_id: string;
        ticket_id?: string | null;
        ticket_subject?: string | null;
        user_id?: string | null;
        user_name?: string | null;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseEventLogStats = {
    data?: {
        events_this_month: number;
        events_this_week: number;
        events_today: number;
        most_active_users: Array<UserEventCount>;
        top_event_types: Array<EventTypeCount>;
        total_events: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseKnowledgeBaseStats = {
    data?: {
        articles_created_this_month: number;
        most_viewed_articles: Array<ArticleView>;
        public_articles: number;
        total_articles: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseMacroResponse = {
    data?: {
        content: string;
        created_at: string;
        created_by: string;
        created_by_name: string;
        description: string;
        id: string;
        name: string;
        organization_id: string;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseMacroTemplateResponse = {
    data?: {
        macro_id: string;
        macro_name: string;
        rendered_content: string;
        variables_used: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseMacroUsageStats = {
    data?: {
        macros_used_this_month: number;
        macros_used_today: number;
        most_used_macros: Array<MacroUsage>;
        total_macros: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseMessageResponse = {
    data?: {
        attachments?: unknown;
        channel: string;
        content: string;
        id: string;
        sender_id: string;
        sender_name: string;
        sent_at: string;
        ticket_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOptionMessageResponse = {
    data?: null | {
        attachments?: unknown;
        channel: string;
        content: string;
        id: string;
        sender_id: string;
        sender_name: string;
        sent_at: string;
        ticket_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOptionOrganizationSettingResponse = {
    data?: null | {
        created_at: string;
        id: string;
        key: string;
        updated_at: string;
        value: unknown;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOrganizationAnalytics = {
    data?: {
        agent_analytics: AgentAnalytics;
        knowledge_base_stats: KnowledgeBaseStats;
        macro_usage_stats: MacroUsageStats;
        system_usage: SystemUsage;
        ticket_analytics: TicketAnalytics;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOrganizationResponse = {
    data?: {
        created_at: string;
        domain: string;
        id: string;
        name: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOrganizationSettingResponse = {
    data?: {
        created_at: string;
        id: string;
        key: string;
        updated_at: string;
        value: unknown;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseRegisterResponse = {
    data?: {
        email_verified: boolean;
        session_token: string;
        two_fa_enabled: boolean;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseRoleResponse = {
    data?: {
        color: string;
        created_at: string;
        id: string;
        managed: boolean;
        name: string;
        organization_id: string;
        permissions: number;
        position: number;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSessionInfo = {
    data?: {
        created_at: string;
        expires_at: string;
        id: string;
        ip_address: string;
        is_current: boolean;
        token: string;
        user_agent: string;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSessionListResponse = {
    data?: {
        sessions: Array<SessionInfo>;
        total: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSessionStats = {
    data?: {
        active_sessions: number;
        expired_sessions: number;
        total_sessions: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSetup2FaResponse = {
    data?: {
        backup_codes: Array<string>;
        qr_code_svg: string;
        qr_code_url: string;
        secret: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseString = {
    data?: string;
    message?: string | null;
    success: boolean;
};

export type ApiResponseSurveyExport = {
    data?: {
        analytics: CsatAnalytics;
        export_date: string;
        surveys: Array<SurveyResponse>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSurveyResponse = {
    data?: {
        comment?: string | null;
        created_at: string;
        id: string;
        organization_id: string;
        score: number;
        ticket_id: string;
        ticket_subject?: string | null;
        user_id: string;
        user_name: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSystemUsage = {
    data?: {
        active_sessions: number;
        api_calls_today: number;
        peak_day_of_week: string;
        peak_hour: number;
        total_events_this_month: number;
        total_events_this_week: number;
        total_events_today: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTagResponse = {
    data?: {
        color: string;
        id: string;
        name: string;
        ticket_count: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTagWithTicketsResponse = {
    data?: {
        color: string;
        id: string;
        name: string;
        tickets: Array<TagTicketResponse>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTicketAnalytics = {
    data?: {
        average_first_response_time_hours?: number | null;
        average_resolution_time_hours?: number | null;
        closed_tickets: number;
        daily_ticket_trends: Array<DailyCount>;
        in_progress_tickets: number;
        open_tickets: number;
        priority_distribution: Array<PriorityCount>;
        resolved_tickets: number;
        status_distribution: Array<StatusCount>;
        tickets_created_this_month: number;
        tickets_created_this_week: number;
        tickets_created_today: number;
        total_tickets: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTicketResponse = {
    data?: {
        assigned_to?: string | null;
        assigned_to_name?: string | null;
        created_at: string;
        created_by: string;
        created_by_name: string;
        description: string;
        id: string;
        priority: string;
        status: string;
        subject: string;
        tags: Array<TicketTagResponse>;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTimeSeriesData = {
    data?: {
        datasets: Array<TimeSeriesDataset>;
        labels: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseUploadResponse = {
    data?: {
        attachments: Array<AttachmentResponse>;
        message: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseUserProfileResponse = {
    data?: {
        created_at: string;
        email: string;
        email_verified: boolean;
        id: string;
        name: string;
        organizations: Array<UserOrgMembership>;
        two_fa_enabled: boolean;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseValue = {
    data?: unknown;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecApiKeyResponse = {
    data?: Array<{
        created_at: string;
        expires_at?: string | null;
        id: string;
        last_used?: string | null;
        name: string;
        revoked: boolean;
        scopes: Array<string>;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecArticleResponse = {
    data?: Array<{
        author_id: string;
        author_name: string;
        content: string;
        created_at: string;
        id: string;
        public: boolean;
        title: string;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecAttachmentResponse = {
    data?: Array<{
        content_type: string;
        download_url: string;
        file_size: number;
        filename: string;
        id: string;
        original_filename: string;
        uploaded_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecAutomationExecution = {
    data?: Array<{
        actions_performed: Array<string>;
        context: unknown;
        error_message?: string | null;
        executed_at: string;
        rule_id: string;
        rule_name: string;
        success: boolean;
        trigger: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecAutomationRuleResponse = {
    data?: Array<{
        actions: Array<AutomationAction>;
        conditions: AutomationConditions;
        created_at: string;
        description: string;
        enabled: boolean;
        execution_count: number;
        id: string;
        last_executed?: string | null;
        name: string;
        organization_id: string;
        trigger: string;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecClientTicketResponse = {
    data?: Array<{
        created_at: string;
        status: string;
        ticket_id: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecEventLogResponse = {
    data?: Array<{
        created_at: string;
        event_type: string;
        id: string;
        metadata: unknown;
        organization_id: string;
        ticket_id?: string | null;
        ticket_subject?: string | null;
        user_id?: string | null;
        user_name?: string | null;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecLoginAttemptResponse = {
    data?: Array<{
        attempted_at: string;
        id: string;
        ip_address: string;
        success: boolean;
        user_agent: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecLoginHistoryResponse = {
    data?: Array<{
        id: string;
        ip_address: string;
        logged_in_at: string;
        user_agent: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecMacroResponse = {
    data?: Array<{
        content: string;
        created_at: string;
        created_by: string;
        created_by_name: string;
        description: string;
        id: string;
        name: string;
        organization_id: string;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecMembershipResponse = {
    data?: Array<{
        created_at: string;
        id: string;
        invited_by?: string | null;
        status: string;
        user_email: string;
        user_id: string;
        user_name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecMessageResponse = {
    data?: Array<{
        attachments?: unknown;
        channel: string;
        content: string;
        id: string;
        sender_id: string;
        sender_name: string;
        sent_at: string;
        ticket_id: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecOrganizationByDomainResponse = {
    data?: Array<{
        allow_domain_join: boolean;
        created_at: string;
        domain: string;
        id: string;
        name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecOrganizationResponse = {
    data?: Array<{
        created_at: string;
        domain: string;
        id: string;
        name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecOrganizationSettingResponse = {
    data?: Array<{
        created_at: string;
        id: string;
        key: string;
        updated_at: string;
        value: unknown;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecPermissionCatalogEntry = {
    data?: Array<{
        key: string;
        value: number;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecRoleResponse = {
    data?: Array<{
        color: string;
        created_at: string;
        id: string;
        managed: boolean;
        name: string;
        organization_id: string;
        permissions: number;
        position: number;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecString = {
    data?: Array<string>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecSurveyResponse = {
    data?: Array<{
        comment?: string | null;
        created_at: string;
        id: string;
        organization_id: string;
        score: number;
        ticket_id: string;
        ticket_subject?: string | null;
        user_id: string;
        user_name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecTagResponse = {
    data?: Array<{
        color: string;
        id: string;
        name: string;
        ticket_count: number;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecTicketResponse = {
    data?: Array<{
        assigned_to?: string | null;
        assigned_to_name?: string | null;
        created_at: string;
        created_by: string;
        created_by_name: string;
        description: string;
        id: string;
        priority: string;
        status: string;
        subject: string;
        tags: Array<TicketTagResponse>;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecWebhookDelivery = {
    data?: Array<{
        attempt_count: number;
        created_at: string;
        delivered_at?: string | null;
        error_message?: string | null;
        event_type: string;
        id: string;
        next_retry?: string | null;
        payload: unknown;
        response_body?: string | null;
        response_code?: number | null;
        status: string;
        url: string;
        webhook_id: string;
        webhook_name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecWebhookResponse = {
    data?: Array<{
        created_at: string;
        description?: string | null;
        enabled: boolean;
        events: Array<string>;
        failure_count: number;
        headers?: {
            [key: string]: string;
        } | null;
        id: string;
        last_delivery?: string | null;
        name: string;
        organization_id: string;
        success_count: number;
        updated_at: string;
        url: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseWebhookResponse = {
    data?: {
        created_at: string;
        description?: string | null;
        enabled: boolean;
        events: Array<string>;
        failure_count: number;
        headers?: {
            [key: string]: string;
        } | null;
        id: string;
        last_delivery?: string | null;
        name: string;
        organization_id: string;
        success_count: number;
        updated_at: string;
        url: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseWebhookStats = {
    data?: {
        average_response_time?: number | null;
        deliveries_this_week: number;
        deliveries_today: number;
        enabled_webhooks: number;
        event_distribution: Array<EventTypeDelivery>;
        most_active_webhooks: Array<WebhookActivity>;
        recent_failures: Array<WebhookDelivery>;
        success_rate: number;
        total_webhooks: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseWebhookTestResult = {
    data?: {
        error_message?: string | null;
        response_code?: number | null;
        response_time_ms: number;
        success: boolean;
        webhook_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseU64 = {
    data?: number;
    message?: string | null;
    success: boolean;
};

export type ArticleListFilter = {
    author_id?: string | null;
    page?: number | null;
    per_page?: number | null;
    public?: boolean | null;
    search?: string | null;
};

export type ArticleResponse = {
    author_id: string;
    author_name: string;
    content: string;
    created_at: string;
    id: string;
    public: boolean;
    title: string;
    updated_at: string;
};

export type ArticleView = {
    article_id: string;
    title: string;
    views: number;
};

export type AssignRoleRequest = {
    user_id: string;
};

export type AttachmentResponse = {
    content_type: string;
    download_url: string;
    file_size: number;
    filename: string;
    id: string;
    original_filename: string;
    uploaded_at: string;
};

export type AuthProfileResponse = {
    email: string;
    email_verified: boolean;
    organizations: Array<OrganizationDetail>;
    two_fa_enabled: boolean;
    user_id: string;
};

export type AuthResponse = {
    email_verified: boolean;
    organizations: Array<UserOrgInfo>;
    session_token: string;
    two_fa_enabled: boolean;
    user_id: string;
};

export type AutomationAction = {
    action_type: string;
    parameters: {
        [key: string]: unknown;
    };
};

export type AutomationCondition = {
    field: string;
    operator: string;
    value: unknown;
};

export type AutomationConditions = {
    conditions: Array<AutomationCondition>;
    logic: string;
};

export type AutomationExecution = {
    actions_performed: Array<string>;
    context: unknown;
    error_message?: string | null;
    executed_at: string;
    rule_id: string;
    rule_name: string;
    success: boolean;
    trigger: string;
};

export type AutomationRuleListFilter = {
    enabled?: boolean | null;
    name_search?: string | null;
    page?: number | null;
    per_page?: number | null;
    trigger?: string | null;
};

export type AutomationRuleResponse = {
    actions: Array<AutomationAction>;
    conditions: AutomationConditions;
    created_at: string;
    description: string;
    enabled: boolean;
    execution_count: number;
    id: string;
    last_executed?: string | null;
    name: string;
    organization_id: string;
    trigger: string;
    updated_at: string;
};

export type AutomationStats = {
    disabled_rules: number;
    enabled_rules: number;
    executions_this_week: number;
    executions_today: number;
    most_active_rules: Array<RuleActivity>;
    total_rules: number;
    trigger_distribution: Array<TriggerCount>;
};

export type CsatAnalytics = {
    agent_satisfaction: Array<AgentSatisfactionScore>;
    average_score: number;
    monthly_trends: Array<MonthlySurveyData>;
    satisfaction_rate: number;
    score_distribution: Array<ScoreCount>;
    surveys_this_month: number;
    surveys_this_week: number;
    surveys_today: number;
    top_issues: Array<IssueCategory>;
    total_surveys: number;
};

export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

export type ClientIdentifyRequest = {
    anonymous_id?: string | null;
    email?: string | null;
    name?: string | null;
    org_domain: string;
    user_id?: string | null;
};

export type ClientMessageRequest = {
    message: string;
    metadata?: unknown;
    org_domain: string;
    user_id: string;
};

export type ClientTicketResponse = {
    created_at: string;
    status: string;
    ticket_id: string;
};

export type ClientUserResponse = {
    email?: string | null;
    is_authenticated: boolean;
    name?: string | null;
    user_id: string;
};

export type CreateApiKeyRequest = {
    expires_in_days?: number | null;
    name: string;
    scopes: Array<string>;
};

export type CreateApiKeyResponse = {
    created_at: string;
    expires_at?: string | null;
    id: string;
    key: string;
    name: string;
    scopes: Array<string>;
};

export type CreateArticleRequest = {
    content: string;
    public: boolean;
    title: string;
};

export type CreateAutomationRuleRequest = {
    actions: Array<AutomationAction>;
    conditions: AutomationConditions;
    description: string;
    enabled: boolean;
    name: string;
    trigger: string;
};

export type CreateEventRequest = {
    event_type: string;
    metadata?: unknown;
    ticket_id?: string | null;
    user_id?: string | null;
};

export type CreateMacroRequest = {
    content: string;
    description: string;
    name: string;
};

export type CreateMessageRequest = {
    attachments?: unknown;
    channel: string;
    content: string;
};

export type CreateOrganizationRequest = {
    domain: string;
    name: string;
};

export type CreateRoleRequest = {
    color?: string | null;
    managed?: boolean | null;
    name: string;
    permissions: number;
    position?: number | null;
};

export type CreateTagRequest = {
    color: string;
    name: string;
};

export type CreateTicketRequest = {
    assigned_to?: string | null;
    description: string;
    priority: string;
    subject: string;
    tag_ids?: Array<string> | null;
};

export type CreateWebhookRequest = {
    description?: string | null;
    enabled: boolean;
    events: Array<string>;
    headers?: {
        [key: string]: string;
    } | null;
    name: string;
    secret?: string | null;
    url: string;
};

export type DailyCount = {
    count: number;
    date: string;
};

export type EffectivePermissionsResponse = {
    effective_permissions: number;
};

export type Enable2FaRequest = {
    totp_code: string;
};

export type EventLogListFilter = {
    event_type?: string | null;
    from_date?: string | null;
    page?: number | null;
    per_page?: number | null;
    ticket_id?: string | null;
    to_date?: string | null;
    user_id?: string | null;
};

export type EventLogResponse = {
    created_at: string;
    event_type: string;
    id: string;
    metadata: unknown;
    organization_id: string;
    ticket_id?: string | null;
    ticket_subject?: string | null;
    user_id?: string | null;
    user_name?: string | null;
};

export type EventLogStats = {
    events_this_month: number;
    events_this_week: number;
    events_today: number;
    most_active_users: Array<UserEventCount>;
    top_event_types: Array<EventTypeCount>;
    total_events: number;
};

export type EventTypeCount = {
    count: number;
    event_type: string;
};

export type EventTypeDelivery = {
    delivery_count: number;
    event_type: string;
    success_rate: number;
};

export type ExtendSessionRequest = {
    extension_hours: number;
};

export type InviteUserRequest = {
    email: string;
    role: string;
};

export type IssueCategory = {
    average_score: number;
    category: string;
    count: number;
};

export type JoinOrganizationRequest = {
    org_id: string;
};

export type KnowledgeBaseStats = {
    articles_created_this_month: number;
    most_viewed_articles: Array<ArticleView>;
    public_articles: number;
    total_articles: number;
};

export type LoginAttemptResponse = {
    attempted_at: string;
    id: string;
    ip_address: string;
    success: boolean;
    user_agent: string;
};

export type LoginHistoryResponse = {
    id: string;
    ip_address: string;
    logged_in_at: string;
    user_agent: string;
};

export type LoginRequest = {
    email: string;
    org_domain?: string | null;
    password: string;
    totp_code?: string | null;
};

export type MacroListFilter = {
    created_by?: string | null;
    page?: number | null;
    per_page?: number | null;
    search?: string | null;
};

export type MacroResponse = {
    content: string;
    created_at: string;
    created_by: string;
    created_by_name: string;
    description: string;
    id: string;
    name: string;
    organization_id: string;
    updated_at: string;
};

export type MacroTemplateRequest = {
    macro_id: string;
    variables: {
        [key: string]: string;
    };
};

export type MacroTemplateResponse = {
    macro_id: string;
    macro_name: string;
    rendered_content: string;
    variables_used: Array<string>;
};

export type MacroUsage = {
    macro_id: string;
    name: string;
    usage_count: number;
};

export type MacroUsageStats = {
    macros_used_this_month: number;
    macros_used_today: number;
    most_used_macros: Array<MacroUsage>;
    total_macros: number;
};

export type MembershipResponse = {
    created_at: string;
    id: string;
    invited_by?: string | null;
    status: string;
    user_email: string;
    user_id: string;
    user_name: string;
};

export type MessageListFilter = {
    channel?: string | null;
    page?: number | null;
    per_page?: number | null;
    sender_id?: string | null;
};

export type MessageResponse = {
    attachments?: unknown;
    channel: string;
    content: string;
    id: string;
    sender_id: string;
    sender_name: string;
    sent_at: string;
    ticket_id: string;
};

export type MonthlySurveyData = {
    average_score: number;
    month: string;
    satisfaction_rate: number;
    total_surveys: number;
};

export type OrganizationAnalytics = {
    agent_analytics: AgentAnalytics;
    knowledge_base_stats: KnowledgeBaseStats;
    macro_usage_stats: MacroUsageStats;
    system_usage: SystemUsage;
    ticket_analytics: TicketAnalytics;
};

export type OrganizationByDomainResponse = {
    allow_domain_join: boolean;
    created_at: string;
    domain: string;
    id: string;
    name: string;
};

export type OrganizationDetail = {
    domain: string;
    id: string;
    name: string;
    role: string;
};

export type OrganizationResponse = {
    created_at: string;
    domain: string;
    id: string;
    name: string;
};

export type OrganizationSettingResponse = {
    created_at: string;
    id: string;
    key: string;
    updated_at: string;
    value: unknown;
};

export type PasswordResetRequest = {
    email: string;
};

export type PermissionCatalogEntry = {
    key: string;
    value: number;
};

export type PriorityCount = {
    count: number;
    percentage: number;
    priority: string;
};

export type RegisterRequest = {
    email: string;
    name: string;
    password: string;
};

export type RegisterResponse = {
    email_verified: boolean;
    session_token: string;
    two_fa_enabled: boolean;
    user_id: string;
};

export type ResendVerificationRequest = {
    email: string;
};

export type ResetPasswordRequest = {
    new_password: string;
    token: string;
};

export type RevokeAllSessionsRequest = {
    keep_current: boolean;
};

export type RevokeSessionRequest = {
    session_id: string;
};

export type RoleResponse = {
    color: string;
    created_at: string;
    id: string;
    managed: boolean;
    name: string;
    organization_id: string;
    permissions: number;
    position: number;
    updated_at: string;
};

export type RuleActivity = {
    execution_count: number;
    rule_id: string;
    rule_name: string;
    success_rate: number;
};

export type ScoreCount = {
    count: number;
    percentage: number;
    score: number;
};

export type SessionInfo = {
    created_at: string;
    expires_at: string;
    id: string;
    ip_address: string;
    is_current: boolean;
    token: string;
    user_agent: string;
    user_id: string;
};

export type SessionListResponse = {
    sessions: Array<SessionInfo>;
    total: number;
};

export type SessionStats = {
    active_sessions: number;
    expired_sessions: number;
    total_sessions: number;
};

export type SetOrganizationSettingRequest = {
    key: string;
    value: unknown;
};

export type Setup2FaResponse = {
    backup_codes: Array<string>;
    qr_code_svg: string;
    qr_code_url: string;
    secret: string;
};

export type StatusCount = {
    count: number;
    percentage: number;
    status: string;
};

export type SubmitSurveyRequest = {
    comment?: string | null;
    score: number;
    ticket_id: string;
};

export type SurveyExport = {
    analytics: CsatAnalytics;
    export_date: string;
    surveys: Array<SurveyResponse>;
};

export type SurveyListFilter = {
    from_date?: string | null;
    has_comment?: boolean | null;
    max_score?: number | null;
    min_score?: number | null;
    page?: number | null;
    per_page?: number | null;
    ticket_id?: string | null;
    to_date?: string | null;
    user_id?: string | null;
};

export type SurveyResponse = {
    comment?: string | null;
    created_at: string;
    id: string;
    organization_id: string;
    score: number;
    ticket_id: string;
    ticket_subject?: string | null;
    user_id: string;
    user_name: string;
};

export type SystemUsage = {
    active_sessions: number;
    api_calls_today: number;
    peak_day_of_week: string;
    peak_hour: number;
    total_events_this_month: number;
    total_events_this_week: number;
    total_events_today: number;
};

export type TagManagementRequest = {
    tag_ids: Array<string>;
};

export type TagResponse = {
    color: string;
    id: string;
    name: string;
    ticket_count: number;
};

export type TagTicketResponse = {
    created_at: string;
    id: string;
    priority: string;
    status: string;
    subject: string;
};

export type TagWithTicketsResponse = {
    color: string;
    id: string;
    name: string;
    tickets: Array<TagTicketResponse>;
};

export type TestWebhookRequest = {
    event_type: string;
    test_data?: unknown;
};

export type TicketAnalytics = {
    average_first_response_time_hours?: number | null;
    average_resolution_time_hours?: number | null;
    closed_tickets: number;
    daily_ticket_trends: Array<DailyCount>;
    in_progress_tickets: number;
    open_tickets: number;
    priority_distribution: Array<PriorityCount>;
    resolved_tickets: number;
    status_distribution: Array<StatusCount>;
    tickets_created_this_month: number;
    tickets_created_this_week: number;
    tickets_created_today: number;
    total_tickets: number;
};

export type TicketListFilter = {
    assigned_to?: string | null;
    created_by?: string | null;
    page?: number | null;
    per_page?: number | null;
    priority?: string | null;
    status?: string | null;
    tag_ids?: Array<string> | null;
};

export type TicketResponse = {
    assigned_to?: string | null;
    assigned_to_name?: string | null;
    created_at: string;
    created_by: string;
    created_by_name: string;
    description: string;
    id: string;
    priority: string;
    status: string;
    subject: string;
    tags: Array<TicketTagResponse>;
    updated_at: string;
};

export type TicketTagResponse = {
    color: string;
    id: string;
    name: string;
};

export type TimeSeriesData = {
    datasets: Array<TimeSeriesDataset>;
    labels: Array<string>;
};

export type TimeSeriesDataset = {
    color: string;
    data: Array<number>;
    label: string;
};

export type TriggerCount = {
    count: number;
    trigger: string;
};

export type UpdateArticleRequest = {
    content?: string | null;
    public?: boolean | null;
    title?: string | null;
};

export type UpdateAutomationRuleRequest = {
    actions?: Array<AutomationAction> | null;
    conditions?: null | AutomationConditions;
    description?: string | null;
    enabled?: boolean | null;
    name?: string | null;
    trigger?: string | null;
};

export type UpdateMacroRequest = {
    content?: string | null;
    description?: string | null;
    name?: string | null;
};

export type UpdateMembershipRequest = {
    status: string;
};

export type UpdateProfileRequest = {
    email?: string | null;
    name?: string | null;
};

export type UpdateRoleRequest = {
    color?: string | null;
    name?: string | null;
    permissions?: number | null;
    position?: number | null;
};

export type UpdateSurveyRequest = {
    comment?: string | null;
    score?: number | null;
};

export type UpdateTagRequest = {
    color?: string | null;
    name?: string | null;
};

export type UpdateTicketRequest = {
    assigned_to?: string | null;
    description?: string | null;
    priority?: string | null;
    status?: string | null;
    subject?: string | null;
};

export type UpdateWebhookRequest = {
    description?: string | null;
    enabled?: boolean | null;
    events?: Array<string> | null;
    headers?: {
        [key: string]: string;
    } | null;
    name?: string | null;
    secret?: string | null;
    url?: string | null;
};

export type UploadResponse = {
    attachments: Array<AttachmentResponse>;
    message: string;
};

export type UserEventCount = {
    count: number;
    user_id: string;
    user_name: string;
};

export type UserOrgInfo = {
    domain: string;
    id: string;
    name: string;
};

export type UserOrgMembership = {
    joined_at: string;
    organization_domain: string;
    organization_id: string;
    organization_name: string;
    status: string;
};

export type UserProfileResponse = {
    created_at: string;
    email: string;
    email_verified: boolean;
    id: string;
    name: string;
    organizations: Array<UserOrgMembership>;
    two_fa_enabled: boolean;
};

export type VerifyEmailRequest = {
    token: string;
};

export type WebhookActivity = {
    delivery_count: number;
    success_rate: number;
    webhook_id: string;
    webhook_name: string;
};

export type WebhookDelivery = {
    attempt_count: number;
    created_at: string;
    delivered_at?: string | null;
    error_message?: string | null;
    event_type: string;
    id: string;
    next_retry?: string | null;
    payload: unknown;
    response_body?: string | null;
    response_code?: number | null;
    status: string;
    url: string;
    webhook_id: string;
    webhook_name: string;
};

export type WebhookListFilter = {
    enabled?: boolean | null;
    event_type?: string | null;
    name_search?: string | null;
    page?: number | null;
    per_page?: number | null;
    url_search?: string | null;
};

export type WebhookResponse = {
    created_at: string;
    description?: string | null;
    enabled: boolean;
    events: Array<string>;
    failure_count: number;
    headers?: {
        [key: string]: string;
    } | null;
    id: string;
    last_delivery?: string | null;
    name: string;
    organization_id: string;
    success_count: number;
    updated_at: string;
    url: string;
};

export type WebhookStats = {
    average_response_time?: number | null;
    deliveries_this_week: number;
    deliveries_today: number;
    enabled_webhooks: number;
    event_distribution: Array<EventTypeDelivery>;
    most_active_webhooks: Array<WebhookActivity>;
    recent_failures: Array<WebhookDelivery>;
    success_rate: number;
    total_webhooks: number;
};

export type WebhookTestResult = {
    error_message?: string | null;
    response_code?: number | null;
    response_time_ms: number;
    success: boolean;
    webhook_id: string;
};

export type GetAttachmentStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/admin/attachments/stats';
};

export type GetAttachmentStatsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Admin access required
     */
    403: unknown;
};

export type GetAttachmentStatsResponses = {
    /**
     * File storage statistics
     */
    200: ApiResponseValue;
};

export type GetAttachmentStatsResponse = GetAttachmentStatsResponses[keyof GetAttachmentStatsResponses];

export type DownloadAttachmentData = {
    body?: never;
    path: {
        /**
         * Attachment ID
         */
        attachment_id: string;
    };
    query?: never;
    url: '/api/v0/attachments/{attachment_id}/download';
};

export type DownloadAttachmentErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Attachment not found
     */
    404: unknown;
};

export type DownloadAttachmentResponses = {
    /**
     * File download
     */
    200: Blob | File;
};

export type DownloadAttachmentResponse = DownloadAttachmentResponses[keyof DownloadAttachmentResponses];

export type Disable2FaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/auth/disable-2fa';
};

export type Disable2FaErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type Disable2FaResponses = {
    /**
     * 2FA disabled successfully
     */
    200: ApiResponseString;
};

export type Disable2FaResponse = Disable2FaResponses[keyof Disable2FaResponses];

export type Enable2FaData = {
    body: Enable2FaRequest;
    path?: never;
    query?: never;
    url: '/api/v0/auth/enable-2fa';
};

export type Enable2FaErrors = {
    /**
     * Invalid TOTP code
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type Enable2FaResponses = {
    /**
     * 2FA enabled successfully
     */
    200: ApiResponseString;
};

export type Enable2FaResponse = Enable2FaResponses[keyof Enable2FaResponses];

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v0/auth/login';
};

export type LoginErrors = {
    /**
     * Invalid credentials
     */
    401: unknown;
    /**
     * 2FA code required
     */
    403: unknown;
};

export type LoginResponses = {
    /**
     * Login successful
     */
    200: ApiResponseAuthResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/auth/logout';
};

export type LogoutErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type LogoutResponses = {
    /**
     * Logout successful
     */
    200: ApiResponseString;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type RegisterData = {
    body: RegisterRequest;
    path?: never;
    query?: never;
    url: '/api/v0/auth/register';
};

export type RegisterErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Email already exists
     */
    409: unknown;
};

export type RegisterResponses = {
    /**
     * User registered successfully
     */
    201: ApiResponseRegisterResponse;
};

export type RegisterResponse2 = RegisterResponses[keyof RegisterResponses];

export type RequestPasswordResetData = {
    body: PasswordResetRequest;
    path?: never;
    query?: never;
    url: '/api/v0/auth/request-password-reset';
};

export type RequestPasswordResetErrors = {
    /**
     * User not found
     */
    404: unknown;
};

export type RequestPasswordResetResponses = {
    /**
     * Password reset email sent
     */
    200: ApiResponseString;
};

export type RequestPasswordResetResponse = RequestPasswordResetResponses[keyof RequestPasswordResetResponses];

export type ResendVerificationData = {
    body: ResendVerificationRequest;
    path?: never;
    query?: never;
    url: '/api/v0/auth/resend-verification';
};

export type ResendVerificationErrors = {
    /**
     * Email already verified or rate limit exceeded
     */
    400: unknown;
    /**
     * User not found
     */
    404: unknown;
    /**
     * Rate limit exceeded
     */
    429: unknown;
};

export type ResendVerificationResponses = {
    /**
     * Verification email sent
     */
    200: ApiResponseString;
};

export type ResendVerificationResponse = ResendVerificationResponses[keyof ResendVerificationResponses];

export type ResetPasswordData = {
    body: ResetPasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v0/auth/reset-password';
};

export type ResetPasswordErrors = {
    /**
     * Invalid or expired token
     */
    400: unknown;
};

export type ResetPasswordResponses = {
    /**
     * Password reset successful
     */
    200: ApiResponseString;
};

export type ResetPasswordResponse = ResetPasswordResponses[keyof ResetPasswordResponses];

export type Setup2FaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/auth/setup-2fa';
};

export type Setup2FaErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type Setup2FaResponses = {
    /**
     * 2FA setup data
     */
    200: ApiResponseSetup2FaResponse;
};

export type Setup2FaResponse2 = Setup2FaResponses[keyof Setup2FaResponses];

export type VerifyEmailData = {
    body: VerifyEmailRequest;
    path?: never;
    query?: never;
    url: '/api/v0/auth/verify-email';
};

export type VerifyEmailErrors = {
    /**
     * Invalid or expired verification token
     */
    400: unknown;
};

export type VerifyEmailResponses = {
    /**
     * Email verified successfully
     */
    200: ApiResponseString;
};

export type VerifyEmailResponse = VerifyEmailResponses[keyof VerifyEmailResponses];

export type IdentifyUserData = {
    body: ClientIdentifyRequest;
    path?: never;
    query?: never;
    url: '/api/v0/client/identify';
};

export type IdentifyUserErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Organization not found
     */
    404: unknown;
};

export type IdentifyUserResponses = {
    /**
     * User identified successfully
     */
    200: ApiResponseClientUserResponse;
};

export type IdentifyUserResponse = IdentifyUserResponses[keyof IdentifyUserResponses];

export type SendMessageData = {
    body: ClientMessageRequest;
    path?: never;
    query?: never;
    url: '/api/v0/client/message';
};

export type SendMessageErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Organization or user not found
     */
    404: unknown;
};

export type SendMessageResponses = {
    /**
     * Message sent successfully
     */
    201: ApiResponseClientTicketResponse;
};

export type SendMessageResponse = SendMessageResponses[keyof SendMessageResponses];

export type GetUserTicketsData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query: {
        /**
         * Organization domain
         */
        org_domain: string;
    };
    url: '/api/v0/client/tickets/{user_id}';
};

export type GetUserTicketsErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type GetUserTicketsResponses = {
    /**
     * User tickets
     */
    200: ApiResponseVecClientTicketResponse;
};

export type GetUserTicketsResponse = GetUserTicketsResponses[keyof GetUserTicketsResponses];

export type GetUserOrganizationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/organizations';
};

export type GetUserOrganizationsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type GetUserOrganizationsResponses = {
    /**
     * User organizations
     */
    200: ApiResponseVecOrganizationResponse;
};

export type GetUserOrganizationsResponse = GetUserOrganizationsResponses[keyof GetUserOrganizationsResponses];

export type CreateOrganizationData = {
    body: CreateOrganizationRequest;
    path?: never;
    query?: never;
    url: '/api/v0/organizations';
};

export type CreateOrganizationErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type CreateOrganizationResponses = {
    /**
     * Organization created successfully
     */
    201: ApiResponseOrganizationResponse;
};

export type CreateOrganizationResponse = CreateOrganizationResponses[keyof CreateOrganizationResponses];

export type FindOrganizationsByEmailDomainData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email address to find organizations for
         */
        email: string;
    };
    url: '/api/v0/organizations/by-domain';
};

export type FindOrganizationsByEmailDomainErrors = {
    /**
     * Invalid email format
     */
    400: unknown;
};

export type FindOrganizationsByEmailDomainResponses = {
    /**
     * Organizations found for email domain
     */
    200: ApiResponseVecOrganizationByDomainResponse;
};

export type FindOrganizationsByEmailDomainResponse = FindOrganizationsByEmailDomainResponses[keyof FindOrganizationsByEmailDomainResponses];

export type JoinOrganizationData = {
    body: JoinOrganizationRequest;
    path?: never;
    query?: never;
    url: '/api/v0/organizations/join';
};

export type JoinOrganizationErrors = {
    /**
     * Invalid input or already a member
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Domain-based joining not allowed or email verification required
     */
    403: unknown;
    /**
     * Organization not found
     */
    404: unknown;
};

export type JoinOrganizationResponses = {
    /**
     * Successfully joined organization
     */
    200: ApiResponseString;
};

export type JoinOrganizationResponse = JoinOrganizationResponses[keyof JoinOrganizationResponses];

export type GetOrganizationData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}';
};

export type GetOrganizationErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetOrganizationResponses = {
    /**
     * Organization details
     */
    200: ApiResponseOrganizationResponse;
};

export type GetOrganizationResponse = GetOrganizationResponses[keyof GetOrganizationResponses];

export type AcceptInvitationData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/accept-invitation';
};

export type AcceptInvitationErrors = {
    /**
     * No pending invitation found
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email not verified
     */
    403: unknown;
};

export type AcceptInvitationResponses = {
    /**
     * Invitation accepted successfully
     */
    200: ApiResponseString;
};

export type AcceptInvitationResponse = AcceptInvitationResponses[keyof AcceptInvitationResponses];

export type GetOrganizationAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Start date for analytics (ISO 8601)
         */
        from_date?: string;
        /**
         * End date for analytics (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v0/organizations/{org_id}/analytics';
};

export type GetOrganizationAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetOrganizationAnalyticsResponses = {
    /**
     * Organization analytics retrieved successfully
     */
    200: ApiResponseOrganizationAnalytics;
};

export type GetOrganizationAnalyticsResponse = GetOrganizationAnalyticsResponses[keyof GetOrganizationAnalyticsResponses];

export type GetAgentAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Start date for analytics (ISO 8601)
         */
        from_date?: string;
        /**
         * End date for analytics (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v0/organizations/{org_id}/analytics/agents';
};

export type GetAgentAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetAgentAnalyticsResponses = {
    /**
     * Agent analytics retrieved successfully
     */
    200: ApiResponseAgentAnalytics;
};

export type GetAgentAnalyticsResponse = GetAgentAnalyticsResponses[keyof GetAgentAnalyticsResponses];

export type GetKnowledgeBaseAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/analytics/knowledge-base';
};

export type GetKnowledgeBaseAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetKnowledgeBaseAnalyticsResponses = {
    /**
     * Knowledge base statistics retrieved successfully
     */
    200: ApiResponseKnowledgeBaseStats;
};

export type GetKnowledgeBaseAnalyticsResponse = GetKnowledgeBaseAnalyticsResponses[keyof GetKnowledgeBaseAnalyticsResponses];

export type GetMacroAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/analytics/macros';
};

export type GetMacroAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetMacroAnalyticsResponses = {
    /**
     * Macro usage statistics retrieved successfully
     */
    200: ApiResponseMacroUsageStats;
};

export type GetMacroAnalyticsResponse = GetMacroAnalyticsResponses[keyof GetMacroAnalyticsResponses];

export type GetSystemAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Start date for analytics (ISO 8601)
         */
        from_date?: string;
        /**
         * End date for analytics (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v0/organizations/{org_id}/analytics/system';
};

export type GetSystemAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetSystemAnalyticsResponses = {
    /**
     * System usage analytics retrieved successfully
     */
    200: ApiResponseSystemUsage;
};

export type GetSystemAnalyticsResponse = GetSystemAnalyticsResponses[keyof GetSystemAnalyticsResponses];

export type GetTicketAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Start date for analytics (ISO 8601)
         */
        from_date?: string;
        /**
         * End date for analytics (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v0/organizations/{org_id}/analytics/tickets';
};

export type GetTicketAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetTicketAnalyticsResponses = {
    /**
     * Ticket analytics retrieved successfully
     */
    200: ApiResponseTicketAnalytics;
};

export type GetTicketAnalyticsResponse = GetTicketAnalyticsResponses[keyof GetTicketAnalyticsResponses];

export type GetTrendAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Start date for trends (ISO 8601)
         */
        from_date?: string;
        /**
         * End date for trends (ISO 8601)
         */
        to_date?: string;
        /**
         * Metric to analyze (tickets, messages, events)
         */
        metric?: string;
        /**
         * Time interval (daily, weekly, monthly)
         */
        interval?: string;
    };
    url: '/api/v0/organizations/{org_id}/analytics/trends';
};

export type GetTrendAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetTrendAnalyticsResponses = {
    /**
     * Trend data retrieved successfully
     */
    200: ApiResponseTimeSeriesData;
};

export type GetTrendAnalyticsResponse = GetTrendAnalyticsResponses[keyof GetTrendAnalyticsResponses];

export type ExecuteAutomationRulesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query: {
        /**
         * Trigger type to execute
         */
        trigger: string;
        /**
         * Ticket ID for context
         */
        ticket_id?: string;
        /**
         * User ID for context
         */
        user_id?: string;
        /**
         * CSAT score for context
         */
        csat_score?: number;
    };
    url: '/api/v0/organizations/{org_id}/automation/execute';
};

export type ExecuteAutomationRulesErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ExecuteAutomationRulesResponses = {
    /**
     * Automation rules executed successfully
     */
    200: ApiResponseVecAutomationExecution;
};

export type ExecuteAutomationRulesResponse = ExecuteAutomationRulesResponses[keyof ExecuteAutomationRulesResponses];

export type ListAutomationRulesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by enabled status
         */
        enabled?: boolean;
        /**
         * Filter by trigger type
         */
        trigger?: string;
        /**
         * Search by name
         */
        name_search?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/automation/rules';
};

export type ListAutomationRulesErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListAutomationRulesResponses = {
    /**
     * Automation rules retrieved successfully
     */
    200: ApiResponseVecAutomationRuleResponse;
};

export type ListAutomationRulesResponse = ListAutomationRulesResponses[keyof ListAutomationRulesResponses];

export type CreateAutomationRuleData = {
    body: CreateAutomationRuleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/automation/rules';
};

export type CreateAutomationRuleErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type CreateAutomationRuleResponses = {
    /**
     * Automation rule created successfully
     */
    201: ApiResponseAutomationRuleResponse;
};

export type CreateAutomationRuleResponse = CreateAutomationRuleResponses[keyof CreateAutomationRuleResponses];

export type DeleteAutomationRuleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Automation rule ID
         */
        rule_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/automation/rules/{rule_id}';
};

export type DeleteAutomationRuleErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Automation rule not found
     */
    404: unknown;
};

export type DeleteAutomationRuleResponses = {
    /**
     * Automation rule deleted successfully
     */
    200: unknown;
};

export type GetAutomationRuleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Automation rule ID
         */
        rule_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/automation/rules/{rule_id}';
};

export type GetAutomationRuleErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Automation rule not found
     */
    404: unknown;
};

export type GetAutomationRuleResponses = {
    /**
     * Automation rule retrieved successfully
     */
    200: ApiResponseAutomationRuleResponse;
};

export type GetAutomationRuleResponse = GetAutomationRuleResponses[keyof GetAutomationRuleResponses];

export type UpdateAutomationRuleData = {
    body: UpdateAutomationRuleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Automation rule ID
         */
        rule_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/automation/rules/{rule_id}';
};

export type UpdateAutomationRuleErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Automation rule not found
     */
    404: unknown;
};

export type UpdateAutomationRuleResponses = {
    /**
     * Automation rule updated successfully
     */
    200: ApiResponseAutomationRuleResponse;
};

export type UpdateAutomationRuleResponse = UpdateAutomationRuleResponses[keyof UpdateAutomationRuleResponses];

export type GetAutomationStatsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/automation/stats';
};

export type GetAutomationStatsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetAutomationStatsResponses = {
    /**
     * Automation statistics retrieved successfully
     */
    200: ApiResponseAutomationStats;
};

export type GetAutomationStatsResponse = GetAutomationStatsResponses[keyof GetAutomationStatsResponses];

export type ListEventsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 20, max: 100)
         */
        per_page?: number;
        /**
         * Filter by event type
         */
        event_type?: string;
        /**
         * Filter by user ID
         */
        user_id?: string;
        /**
         * Filter by ticket ID
         */
        ticket_id?: string;
        /**
         * Filter events from date (ISO 8601)
         */
        from_date?: string;
        /**
         * Filter events to date (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v0/organizations/{org_id}/events';
};

export type ListEventsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListEventsResponses = {
    /**
     * Events retrieved successfully
     */
    200: ApiResponseVecEventLogResponse;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type CreateEventData = {
    body: CreateEventRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/events';
};

export type CreateEventErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type CreateEventResponses = {
    /**
     * Event created successfully
     */
    201: ApiResponseEventLogResponse;
};

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses];

export type ExportEventsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Export format (csv)
         */
        format?: string;
        /**
         * Filter by event type
         */
        event_type?: string;
        /**
         * Filter by user ID
         */
        user_id?: string;
        /**
         * Filter by ticket ID
         */
        ticket_id?: string;
        /**
         * Filter events from date (ISO 8601)
         */
        from_date?: string;
        /**
         * Filter events to date (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v0/organizations/{org_id}/events/export';
};

export type ExportEventsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ExportEventsResponses = {
    /**
     * Events exported successfully
     */
    200: unknown;
};

export type GetEventStatsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/events/stats';
};

export type GetEventStatsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetEventStatsResponses = {
    /**
     * Event statistics retrieved successfully
     */
    200: ApiResponseEventLogStats;
};

export type GetEventStatsResponse = GetEventStatsResponses[keyof GetEventStatsResponses];

export type GetEventData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Event ID
         */
        event_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/events/{event_id}';
};

export type GetEventErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Event not found
     */
    404: unknown;
};

export type GetEventResponses = {
    /**
     * Event retrieved successfully
     */
    200: ApiResponseEventLogResponse;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type InviteUserData = {
    body: InviteUserRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/invite';
};

export type InviteUserErrors = {
    /**
     * Invalid input or user already member
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
    /**
     * User not found
     */
    404: unknown;
};

export type InviteUserResponses = {
    /**
     * User invited successfully
     */
    200: ApiResponseString;
};

export type InviteUserResponse = InviteUserResponses[keyof InviteUserResponses];

export type ListArticlesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by public visibility
         */
        public?: boolean;
        /**
         * Filter by author user ID
         */
        author_id?: string;
        /**
         * Search in title and content
         */
        search?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/knowledge-base/articles';
};

export type ListArticlesErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListArticlesResponses = {
    /**
     * List of articles
     */
    200: ApiResponseVecArticleResponse;
};

export type ListArticlesResponse = ListArticlesResponses[keyof ListArticlesResponses];

export type CreateArticleData = {
    body: CreateArticleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/knowledge-base/articles';
};

export type CreateArticleErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type CreateArticleResponses = {
    /**
     * Article created successfully
     */
    201: ApiResponseArticleResponse;
};

export type CreateArticleResponse = CreateArticleResponses[keyof CreateArticleResponses];

export type DeleteArticleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Article ID
         */
        article_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/knowledge-base/articles/{article_id}';
};

export type DeleteArticleErrors = {
    /**
     * Access denied to organization or insufficient permissions
     */
    403: unknown;
    /**
     * Article not found
     */
    404: unknown;
};

export type DeleteArticleResponses = {
    /**
     * Article deleted successfully
     */
    204: void;
};

export type DeleteArticleResponse = DeleteArticleResponses[keyof DeleteArticleResponses];

export type GetArticleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Article ID
         */
        article_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/knowledge-base/articles/{article_id}';
};

export type GetArticleErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Article not found
     */
    404: unknown;
};

export type GetArticleResponses = {
    /**
     * Article details
     */
    200: ApiResponseArticleResponse;
};

export type GetArticleResponse = GetArticleResponses[keyof GetArticleResponses];

export type UpdateArticleData = {
    body: UpdateArticleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Article ID
         */
        article_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/knowledge-base/articles/{article_id}';
};

export type UpdateArticleErrors = {
    /**
     * Access denied to organization or insufficient permissions
     */
    403: unknown;
    /**
     * Article not found
     */
    404: unknown;
};

export type UpdateArticleResponses = {
    /**
     * Article updated successfully
     */
    200: ApiResponseArticleResponse;
};

export type UpdateArticleResponse = UpdateArticleResponses[keyof UpdateArticleResponses];

export type GetPublicArticlesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/knowledge-base/public';
};

export type GetPublicArticlesErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetPublicArticlesResponses = {
    /**
     * Public articles
     */
    200: ApiResponseVecArticleResponse;
};

export type GetPublicArticlesResponse = GetPublicArticlesResponses[keyof GetPublicArticlesResponses];

export type SearchPublicArticlesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query: {
        /**
         * Search query
         */
        q: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/knowledge-base/search';
};

export type SearchPublicArticlesErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type SearchPublicArticlesResponses = {
    /**
     * Search results
     */
    200: ApiResponseVecArticleResponse;
};

export type SearchPublicArticlesResponse = SearchPublicArticlesResponses[keyof SearchPublicArticlesResponses];

export type ListMacrosData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 20, max: 100)
         */
        per_page?: number;
        /**
         * Search in name, description, or content
         */
        search?: string;
        /**
         * Filter by creator user ID
         */
        created_by?: string;
    };
    url: '/api/v0/organizations/{org_id}/macros';
};

export type ListMacrosErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListMacrosResponses = {
    /**
     * Macros retrieved successfully
     */
    200: ApiResponseVecMacroResponse;
};

export type ListMacrosResponse = ListMacrosResponses[keyof ListMacrosResponses];

export type CreateMacroData = {
    body: CreateMacroRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/macros';
};

export type CreateMacroErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Macro name already exists
     */
    409: unknown;
};

export type CreateMacroResponses = {
    /**
     * Macro created successfully
     */
    201: ApiResponseMacroResponse;
};

export type CreateMacroResponse = CreateMacroResponses[keyof CreateMacroResponses];

export type GetPopularMacrosData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Maximum number of macros to return (default: 10, max: 50)
         */
        limit?: number;
    };
    url: '/api/v0/organizations/{org_id}/macros/popular';
};

export type GetPopularMacrosErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetPopularMacrosResponses = {
    /**
     * Popular macros retrieved successfully
     */
    200: ApiResponseVecMacroResponse;
};

export type GetPopularMacrosResponse = GetPopularMacrosResponses[keyof GetPopularMacrosResponses];

export type RenderMacroTemplateData = {
    body: MacroTemplateRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/macros/render';
};

export type RenderMacroTemplateErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Macro not found
     */
    404: unknown;
};

export type RenderMacroTemplateResponses = {
    /**
     * Macro template rendered successfully
     */
    200: ApiResponseMacroTemplateResponse;
};

export type RenderMacroTemplateResponse = RenderMacroTemplateResponses[keyof RenderMacroTemplateResponses];

export type DeleteMacroData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Macro ID
         */
        macro_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/macros/{macro_id}';
};

export type DeleteMacroErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Macro not found
     */
    404: unknown;
};

export type DeleteMacroResponses = {
    /**
     * Macro deleted successfully
     */
    200: ApiResponseString;
};

export type DeleteMacroResponse = DeleteMacroResponses[keyof DeleteMacroResponses];

export type GetMacroData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Macro ID
         */
        macro_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/macros/{macro_id}';
};

export type GetMacroErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Macro not found
     */
    404: unknown;
};

export type GetMacroResponses = {
    /**
     * Macro retrieved successfully
     */
    200: ApiResponseMacroResponse;
};

export type GetMacroResponse = GetMacroResponses[keyof GetMacroResponses];

export type UpdateMacroData = {
    body: UpdateMacroRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Macro ID
         */
        macro_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/macros/{macro_id}';
};

export type UpdateMacroErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Macro not found
     */
    404: unknown;
    /**
     * Macro name already exists
     */
    409: unknown;
};

export type UpdateMacroResponses = {
    /**
     * Macro updated successfully
     */
    200: ApiResponseMacroResponse;
};

export type UpdateMacroResponse = UpdateMacroResponses[keyof UpdateMacroResponses];

export type GetMembersData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/members';
};

export type GetMembersErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetMembersResponses = {
    /**
     * Organization members
     */
    200: ApiResponseVecMembershipResponse;
};

export type GetMembersResponse = GetMembersResponses[keyof GetMembersResponses];

export type RemoveMemberData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Member user ID
         */
        member_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/members/{member_id}';
};

export type RemoveMemberErrors = {
    /**
     * Cannot remove last admin
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
};

export type RemoveMemberResponses = {
    /**
     * Member removed successfully
     */
    200: ApiResponseString;
};

export type RemoveMemberResponse = RemoveMemberResponses[keyof RemoveMemberResponses];

export type UpdateMembershipData = {
    body: UpdateMembershipRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Member user ID
         */
        member_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/members/{member_id}';
};

export type UpdateMembershipErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
    /**
     * Member not found
     */
    404: unknown;
};

export type UpdateMembershipResponses = {
    /**
     * Membership updated successfully
     */
    200: ApiResponseString;
};

export type UpdateMembershipResponse = UpdateMembershipResponses[keyof UpdateMembershipResponses];

export type DeleteMessageData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/messages/{message_id}';
};

export type DeleteMessageErrors = {
    /**
     * Access denied to organization or insufficient permissions
     */
    403: unknown;
    /**
     * Message not found
     */
    404: unknown;
};

export type DeleteMessageResponses = {
    /**
     * Message deleted successfully
     */
    204: void;
};

export type DeleteMessageResponse = DeleteMessageResponses[keyof DeleteMessageResponses];

export type GetMessageData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/messages/{message_id}';
};

export type GetMessageErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Message not found
     */
    404: unknown;
};

export type GetMessageResponses = {
    /**
     * Message details
     */
    200: ApiResponseMessageResponse;
};

export type GetMessageResponse = GetMessageResponses[keyof GetMessageResponses];

export type GetEffectivePermissionsData = {
    body?: never;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/permissions/effective';
};

export type GetEffectivePermissionsResponses = {
    /**
     * Effective permissions
     */
    200: ApiResponseEffectivePermissionsResponse;
};

export type GetEffectivePermissionsResponse = GetEffectivePermissionsResponses[keyof GetEffectivePermissionsResponses];

export type ListRolesData = {
    body?: never;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/roles';
};

export type ListRolesResponses = {
    /**
     * List roles
     */
    200: ApiResponseVecRoleResponse;
};

export type ListRolesResponse = ListRolesResponses[keyof ListRolesResponses];

export type CreateRoleData = {
    body: CreateRoleRequest;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/roles';
};

export type CreateRoleResponses = {
    /**
     * Role created
     */
    201: ApiResponseRoleResponse;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type DeleteRoleData = {
    body?: never;
    path: {
        org_id: string;
        role_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/roles/{role_id}';
};

export type DeleteRoleResponses = {
    /**
     * Deleted
     */
    204: void;
};

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses];

export type GetRoleData = {
    body?: never;
    path: {
        org_id: string;
        role_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/roles/{role_id}';
};

export type GetRoleResponses = {
    /**
     * Role
     */
    200: ApiResponseRoleResponse;
};

export type GetRoleResponse = GetRoleResponses[keyof GetRoleResponses];

export type UpdateRoleData = {
    body: UpdateRoleRequest;
    path: {
        org_id: string;
        role_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/roles/{role_id}';
};

export type UpdateRoleResponses = {
    /**
     * Updated
     */
    200: ApiResponseRoleResponse;
};

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses];

export type AssignRoleData = {
    body: AssignRoleRequest;
    path: {
        org_id: string;
        role_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/roles/{role_id}/assign';
};

export type AssignRoleResponses = {
    /**
     * Assigned
     */
    200: ApiResponseString;
};

export type AssignRoleResponse = AssignRoleResponses[keyof AssignRoleResponses];

export type RevokeRoleData = {
    body: AssignRoleRequest;
    path: {
        org_id: string;
        role_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/roles/{role_id}/revoke';
};

export type RevokeRoleResponses = {
    /**
     * Revoked
     */
    200: ApiResponseString;
};

export type RevokeRoleResponse = RevokeRoleResponses[keyof RevokeRoleResponses];

export type GetAllOrganizationSettingsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/settings';
};

export type GetAllOrganizationSettingsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetAllOrganizationSettingsResponses = {
    /**
     * All organization settings
     */
    200: ApiResponseVecOrganizationSettingResponse;
};

export type GetAllOrganizationSettingsResponse = GetAllOrganizationSettingsResponses[keyof GetAllOrganizationSettingsResponses];

export type SetOrganizationSettingData = {
    body: SetOrganizationSettingRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/settings';
};

export type SetOrganizationSettingErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
};

export type SetOrganizationSettingResponses = {
    /**
     * Setting created/updated successfully
     */
    201: ApiResponseOrganizationSettingResponse;
};

export type SetOrganizationSettingResponse = SetOrganizationSettingResponses[keyof SetOrganizationSettingResponses];

export type DeleteOrganizationSettingData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Setting key
         */
        key: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/settings/{key}';
};

export type DeleteOrganizationSettingErrors = {
    /**
     * Organization admin access required
     */
    403: unknown;
    /**
     * Setting not found
     */
    404: unknown;
};

export type DeleteOrganizationSettingResponses = {
    /**
     * Setting deleted successfully
     */
    204: void;
};

export type DeleteOrganizationSettingResponse = DeleteOrganizationSettingResponses[keyof DeleteOrganizationSettingResponses];

export type GetOrganizationSettingData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Setting key
         */
        key: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/settings/{key}';
};

export type GetOrganizationSettingErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetOrganizationSettingResponses = {
    /**
     * Setting value
     */
    200: ApiResponseOptionOrganizationSettingResponse;
};

export type GetOrganizationSettingResponse = GetOrganizationSettingResponses[keyof GetOrganizationSettingResponses];

export type ListSurveysData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by ticket ID
         */
        ticket_id?: string;
        /**
         * Filter by user ID
         */
        user_id?: string;
        /**
         * Minimum score filter
         */
        min_score?: number;
        /**
         * Maximum score filter
         */
        max_score?: number;
        /**
         * Filter by comment presence
         */
        has_comment?: boolean;
        /**
         * Start date (ISO 8601)
         */
        from_date?: string;
        /**
         * End date (ISO 8601)
         */
        to_date?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/surveys';
};

export type ListSurveysErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListSurveysResponses = {
    /**
     * Surveys retrieved successfully
     */
    200: ApiResponseVecSurveyResponse;
};

export type ListSurveysResponse = ListSurveysResponses[keyof ListSurveysResponses];

export type SubmitSurveyData = {
    body: SubmitSurveyRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/surveys';
};

export type SubmitSurveyErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
    /**
     * Survey already exists for this ticket
     */
    409: unknown;
};

export type SubmitSurveyResponses = {
    /**
     * Survey submitted successfully
     */
    201: ApiResponseSurveyResponse;
};

export type SubmitSurveyResponse = SubmitSurveyResponses[keyof SubmitSurveyResponses];

export type GetSurveyAnalyticsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Start date for analytics (ISO 8601)
         */
        from_date?: string;
        /**
         * End date for analytics (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v0/organizations/{org_id}/surveys/analytics';
};

export type GetSurveyAnalyticsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetSurveyAnalyticsResponses = {
    /**
     * Survey analytics retrieved successfully
     */
    200: ApiResponseCsatAnalytics;
};

export type GetSurveyAnalyticsResponse = GetSurveyAnalyticsResponses[keyof GetSurveyAnalyticsResponses];

export type ExportSurveysData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by ticket ID
         */
        ticket_id?: string;
        /**
         * Filter by user ID
         */
        user_id?: string;
        /**
         * Minimum score filter
         */
        min_score?: number;
        /**
         * Maximum score filter
         */
        max_score?: number;
        /**
         * Filter by comment presence
         */
        has_comment?: boolean;
        /**
         * Start date (ISO 8601)
         */
        from_date?: string;
        /**
         * End date (ISO 8601)
         */
        to_date?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/surveys/export';
};

export type ExportSurveysErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ExportSurveysResponses = {
    /**
     * Survey data exported successfully
     */
    200: ApiResponseSurveyExport;
};

export type ExportSurveysResponse = ExportSurveysResponses[keyof ExportSurveysResponses];

export type DeleteSurveyData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Survey ID
         */
        survey_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/surveys/{survey_id}';
};

export type DeleteSurveyErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to survey
     */
    403: unknown;
    /**
     * Survey not found
     */
    404: unknown;
};

export type DeleteSurveyResponses = {
    /**
     * Survey deleted successfully
     */
    200: unknown;
};

export type GetSurveyData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Survey ID
         */
        survey_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/surveys/{survey_id}';
};

export type GetSurveyErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Survey not found
     */
    404: unknown;
};

export type GetSurveyResponses = {
    /**
     * Survey retrieved successfully
     */
    200: ApiResponseSurveyResponse;
};

export type GetSurveyResponse = GetSurveyResponses[keyof GetSurveyResponses];

export type UpdateSurveyData = {
    body: UpdateSurveyRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Survey ID
         */
        survey_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/surveys/{survey_id}';
};

export type UpdateSurveyErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to survey
     */
    403: unknown;
    /**
     * Survey not found
     */
    404: unknown;
};

export type UpdateSurveyResponses = {
    /**
     * Survey updated successfully
     */
    200: ApiResponseSurveyResponse;
};

export type UpdateSurveyResponse = UpdateSurveyResponses[keyof UpdateSurveyResponses];

export type ListTagsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/tags';
};

export type ListTagsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListTagsResponses = {
    /**
     * List of tags
     */
    200: ApiResponseVecTagResponse;
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
    body: CreateTagRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tags';
};

export type CreateTagErrors = {
    /**
     * Invalid input or tag name already exists
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type CreateTagResponses = {
    /**
     * Tag created successfully
     */
    201: ApiResponseTagResponse;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type GetPopularTagsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Maximum number of tags to return
         */
        limit?: number;
    };
    url: '/api/v0/organizations/{org_id}/tags/popular';
};

export type GetPopularTagsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetPopularTagsResponses = {
    /**
     * Popular tags by usage
     */
    200: ApiResponseVecTagResponse;
};

export type GetPopularTagsResponse = GetPopularTagsResponses[keyof GetPopularTagsResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tags/{tag_id}';
};

export type DeleteTagErrors = {
    /**
     * Access denied to organization or insufficient permissions
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type DeleteTagResponses = {
    /**
     * Tag deleted successfully
     */
    204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tags/{tag_id}';
};

export type GetTagErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type GetTagResponses = {
    /**
     * Tag details
     */
    200: ApiResponseTagResponse;
};

export type GetTagResponse = GetTagResponses[keyof GetTagResponses];

export type UpdateTagData = {
    body: UpdateTagRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tags/{tag_id}';
};

export type UpdateTagErrors = {
    /**
     * Tag name already exists
     */
    400: unknown;
    /**
     * Access denied to organization or insufficient permissions
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type UpdateTagResponses = {
    /**
     * Tag updated successfully
     */
    200: ApiResponseTagResponse;
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type GetTagWithTicketsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/tags/{tag_id}/tickets';
};

export type GetTagWithTicketsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type GetTagWithTicketsResponses = {
    /**
     * Tag with associated tickets
     */
    200: ApiResponseTagWithTicketsResponse;
};

export type GetTagWithTicketsResponse = GetTagWithTicketsResponses[keyof GetTagWithTicketsResponses];

export type ListTicketsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by ticket status (open, in_progress, resolved, closed)
         */
        status?: string;
        /**
         * Filter by priority level (low, medium, high, urgent)
         */
        priority?: string;
        /**
         * Filter by assigned user ID
         */
        assigned_to?: string;
        /**
         * Filter by creator user ID
         */
        created_by?: string;
        /**
         * Filter by tag IDs (comma-separated UUIDs)
         */
        tag_ids?: string;
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 20, max: 100)
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/tickets';
};

export type ListTicketsErrors = {
    /**
     * Invalid filter parameters
     */
    400: unknown;
    /**
     * Authentication required
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListTicketsResponses = {
    /**
     * List of tickets retrieved successfully
     */
    200: ApiResponseVecTicketResponse;
};

export type ListTicketsResponse = ListTicketsResponses[keyof ListTicketsResponses];

export type CreateTicketData = {
    body: CreateTicketRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets';
};

export type CreateTicketErrors = {
    /**
     * Invalid input data or validation error
     */
    400: unknown;
    /**
     * Authentication required
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Validation error in request body
     */
    422: unknown;
};

export type CreateTicketResponses = {
    /**
     * Ticket created successfully
     */
    201: ApiResponseTicketResponse;
};

export type CreateTicketResponse = CreateTicketResponses[keyof CreateTicketResponses];

export type DeleteTicketData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}';
};

export type DeleteTicketErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type DeleteTicketResponses = {
    /**
     * Ticket deleted successfully
     */
    204: void;
};

export type DeleteTicketResponse = DeleteTicketResponses[keyof DeleteTicketResponses];

export type GetTicketData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}';
};

export type GetTicketErrors = {
    /**
     * Authentication required
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type GetTicketResponses = {
    /**
     * Ticket details retrieved successfully
     */
    200: ApiResponseTicketResponse;
};

export type GetTicketResponse = GetTicketResponses[keyof GetTicketResponses];

export type UpdateTicketData = {
    body: UpdateTicketRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}';
};

export type UpdateTicketErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type UpdateTicketResponses = {
    /**
     * Ticket updated successfully
     */
    200: ApiResponseTicketResponse;
};

export type UpdateTicketResponse = UpdateTicketResponses[keyof UpdateTicketResponses];

export type ListTicketMessagesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: {
        /**
         * Filter by channel
         */
        channel?: string;
        /**
         * Filter by sender user ID
         */
        sender_id?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages';
};

export type ListTicketMessagesErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type ListTicketMessagesResponses = {
    /**
     * List of messages
     */
    200: ApiResponseVecMessageResponse;
};

export type ListTicketMessagesResponse = ListTicketMessagesResponses[keyof ListTicketMessagesResponses];

export type CreateMessageData = {
    body: CreateMessageRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages';
};

export type CreateMessageErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type CreateMessageResponses = {
    /**
     * Message created successfully
     */
    201: ApiResponseMessageResponse;
};

export type CreateMessageResponse = CreateMessageResponses[keyof CreateMessageResponses];

export type GetMessageCountData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/count';
};

export type GetMessageCountErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type GetMessageCountResponses = {
    /**
     * Message count
     */
    200: ApiResponseU64;
};

export type GetMessageCountResponse = GetMessageCountResponses[keyof GetMessageCountResponses];

export type GetLatestMessageData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/latest';
};

export type GetLatestMessageErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type GetLatestMessageResponses = {
    /**
     * Latest message
     */
    200: ApiResponseOptionMessageResponse;
};

export type GetLatestMessageResponse = GetLatestMessageResponses[keyof GetLatestMessageResponses];

export type SearchMessagesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query: {
        /**
         * Search query
         */
        q: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/search';
};

export type SearchMessagesErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type SearchMessagesResponses = {
    /**
     * Search results
     */
    200: ApiResponseVecMessageResponse;
};

export type SearchMessagesResponse = SearchMessagesResponses[keyof SearchMessagesResponses];

export type ListMessageAttachmentsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments';
};

export type ListMessageAttachmentsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied
     */
    403: unknown;
    /**
     * Message not found
     */
    404: unknown;
};

export type ListMessageAttachmentsResponses = {
    /**
     * Attachments retrieved successfully
     */
    200: ApiResponseVecAttachmentResponse;
};

export type ListMessageAttachmentsResponse = ListMessageAttachmentsResponses[keyof ListMessageAttachmentsResponses];

export type UploadAttachmentsData = {
    /**
     * Files to upload
     */
    body?: unknown;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments';
};

export type UploadAttachmentsErrors = {
    /**
     * Invalid input or file type
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied
     */
    403: unknown;
    /**
     * Message not found
     */
    404: unknown;
};

export type UploadAttachmentsResponses = {
    /**
     * Files uploaded successfully
     */
    201: ApiResponseUploadResponse;
};

export type UploadAttachmentsResponse = UploadAttachmentsResponses[keyof UploadAttachmentsResponses];

export type DeleteAttachmentData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * Message ID
         */
        message_id: string;
        /**
         * Attachment ID
         */
        attachment_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments/{attachment_id}';
};

export type DeleteAttachmentErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied
     */
    403: unknown;
    /**
     * Attachment not found
     */
    404: unknown;
};

export type DeleteAttachmentResponses = {
    /**
     * Attachment deleted successfully
     */
    200: ApiResponseString;
};

export type DeleteAttachmentResponse = DeleteAttachmentResponses[keyof DeleteAttachmentResponses];

export type RemoveTagsFromTicketData = {
    body: TagManagementRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/tags';
};

export type RemoveTagsFromTicketErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type RemoveTagsFromTicketResponses = {
    /**
     * Tags removed successfully
     */
    200: unknown;
};

export type AddTagsToTicketData = {
    body: TagManagementRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/tickets/{ticket_id}/tags';
};

export type AddTagsToTicketErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type AddTagsToTicketResponses = {
    /**
     * Tags added successfully
     */
    200: unknown;
};

export type ListWebhooksData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by enabled status
         */
        enabled?: boolean;
        /**
         * Filter by event type
         */
        event_type?: string;
        /**
         * Search by name
         */
        name_search?: string;
        /**
         * Search by URL
         */
        url_search?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v0/organizations/{org_id}/webhooks';
};

export type ListWebhooksErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListWebhooksResponses = {
    /**
     * Webhooks retrieved successfully
     */
    200: ApiResponseVecWebhookResponse;
};

export type ListWebhooksResponse = ListWebhooksResponses[keyof ListWebhooksResponses];

export type CreateWebhookData = {
    body: CreateWebhookRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/webhooks';
};

export type CreateWebhookErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type CreateWebhookResponses = {
    /**
     * Webhook created successfully
     */
    201: ApiResponseWebhookResponse;
};

export type CreateWebhookResponse = CreateWebhookResponses[keyof CreateWebhookResponses];

export type ListWebhookEventsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/webhooks/events';
};

export type ListWebhookEventsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListWebhookEventsResponses = {
    /**
     * Available webhook events retrieved successfully
     */
    200: ApiResponseVecString;
};

export type ListWebhookEventsResponse = ListWebhookEventsResponses[keyof ListWebhookEventsResponses];

export type SendWebhooksData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query: {
        /**
         * Event type to trigger
         */
        event_type: string;
        /**
         * Ticket ID for context
         */
        ticket_id?: string;
        /**
         * User ID for context
         */
        user_id?: string;
    };
    url: '/api/v0/organizations/{org_id}/webhooks/send';
};

export type SendWebhooksErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type SendWebhooksResponses = {
    /**
     * Webhooks sent successfully
     */
    200: ApiResponseVecWebhookDelivery;
};

export type SendWebhooksResponse = SendWebhooksResponses[keyof SendWebhooksResponses];

export type GetWebhookStatsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/webhooks/stats';
};

export type GetWebhookStatsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetWebhookStatsResponses = {
    /**
     * Webhook statistics retrieved successfully
     */
    200: ApiResponseWebhookStats;
};

export type GetWebhookStatsResponse = GetWebhookStatsResponses[keyof GetWebhookStatsResponses];

export type DeleteWebhookData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}';
};

export type DeleteWebhookErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type DeleteWebhookResponses = {
    /**
     * Webhook deleted successfully
     */
    200: unknown;
};

export type GetWebhookData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}';
};

export type GetWebhookErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type GetWebhookResponses = {
    /**
     * Webhook retrieved successfully
     */
    200: ApiResponseWebhookResponse;
};

export type GetWebhookResponse = GetWebhookResponses[keyof GetWebhookResponses];

export type UpdateWebhookData = {
    body: UpdateWebhookRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}';
};

export type UpdateWebhookErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type UpdateWebhookResponses = {
    /**
     * Webhook updated successfully
     */
    200: ApiResponseWebhookResponse;
};

export type UpdateWebhookResponse = UpdateWebhookResponses[keyof UpdateWebhookResponses];

export type TestWebhookData = {
    body: TestWebhookRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v0/organizations/{org_id}/webhooks/{webhook_id}/test';
};

export type TestWebhookErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type TestWebhookResponses = {
    /**
     * Webhook test completed
     */
    200: ApiResponseWebhookTestResult;
};

export type TestWebhookResponse = TestWebhookResponses[keyof TestWebhookResponses];

export type GetPermissionsCatalogData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/permissions/catalog';
};

export type GetPermissionsCatalogResponses = {
    /**
     * Permission bitmask catalog
     */
    200: ApiResponseVecPermissionCatalogEntry;
};

export type GetPermissionsCatalogResponse = GetPermissionsCatalogResponses[keyof GetPermissionsCatalogResponses];

export type ListSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/sessions';
};

export type ListSessionsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type ListSessionsResponses = {
    /**
     * List of user sessions
     */
    200: ApiResponseSessionListResponse;
};

export type ListSessionsResponse = ListSessionsResponses[keyof ListSessionsResponses];

export type CleanupExpiredSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/sessions/cleanup';
};

export type CleanupExpiredSessionsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CleanupExpiredSessionsResponses = {
    /**
     * Expired sessions cleaned up
     */
    200: unknown;
};

export type RevokeAllSessionsData = {
    body: RevokeAllSessionsRequest;
    path?: never;
    query?: never;
    url: '/api/v0/sessions/revoke-all';
};

export type RevokeAllSessionsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type RevokeAllSessionsResponses = {
    /**
     * Sessions revoked successfully
     */
    200: unknown;
};

export type GetSessionStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/sessions/stats';
};

export type GetSessionStatsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type GetSessionStatsResponses = {
    /**
     * Session statistics
     */
    200: ApiResponseSessionStats;
};

export type GetSessionStatsResponse = GetSessionStatsResponses[keyof GetSessionStatsResponses];

export type RevokeSessionData = {
    body?: never;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v0/sessions/{session_id}';
};

export type RevokeSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Session not found
     */
    404: unknown;
};

export type RevokeSessionResponses = {
    /**
     * Session revoked successfully
     */
    200: unknown;
};

export type GetSessionData = {
    body?: never;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v0/sessions/{session_id}';
};

export type GetSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Session not found
     */
    404: unknown;
};

export type GetSessionResponses = {
    /**
     * Session details
     */
    200: ApiResponseSessionInfo;
};

export type GetSessionResponse = GetSessionResponses[keyof GetSessionResponses];

export type ExtendSessionData = {
    body: ExtendSessionRequest;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v0/sessions/{session_id}/extend';
};

export type ExtendSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Session not found
     */
    404: unknown;
};

export type ExtendSessionResponses = {
    /**
     * Session extended successfully
     */
    200: ApiResponseSessionInfo;
};

export type ExtendSessionResponse = ExtendSessionResponses[keyof ExtendSessionResponses];

export type DeleteAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/users/account';
};

export type DeleteAccountErrors = {
    /**
     * Cannot delete account
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
};

export type DeleteAccountResponses = {
    /**
     * Account deleted successfully
     */
    200: ApiResponseString;
};

export type DeleteAccountResponse = DeleteAccountResponses[keyof DeleteAccountResponses];

export type ListApiKeysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 20, max: 100)
         */
        per_page?: number;
        /**
         * Include revoked keys (default: false)
         */
        include_revoked?: boolean;
    };
    url: '/api/v0/users/api-keys';
};

export type ListApiKeysErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type ListApiKeysResponses = {
    /**
     * API keys retrieved successfully
     */
    200: ApiResponseVecApiKeyResponse;
};

export type ListApiKeysResponse = ListApiKeysResponses[keyof ListApiKeysResponses];

export type CreateApiKeyData = {
    body: CreateApiKeyRequest;
    path?: never;
    query?: never;
    url: '/api/v0/users/api-keys';
};

export type CreateApiKeyErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
};

export type CreateApiKeyResponses = {
    /**
     * API key created successfully
     */
    201: ApiResponseCreateApiKeyResponse;
};

export type CreateApiKeyResponse2 = CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type DeleteApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v0/users/api-keys/{key_id}';
};

export type DeleteApiKeyErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * API key not found
     */
    404: unknown;
};

export type DeleteApiKeyResponses = {
    /**
     * API key deleted successfully
     */
    200: ApiResponseString;
};

export type DeleteApiKeyResponse = DeleteApiKeyResponses[keyof DeleteApiKeyResponses];

export type GetApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v0/users/api-keys/{key_id}';
};

export type GetApiKeyErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * API key not found
     */
    404: unknown;
};

export type GetApiKeyResponses = {
    /**
     * API key retrieved successfully
     */
    200: ApiResponseApiKeyResponse;
};

export type GetApiKeyResponse = GetApiKeyResponses[keyof GetApiKeyResponses];

export type RevokeApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v0/users/api-keys/{key_id}/revoke';
};

export type RevokeApiKeyErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * API key not found
     */
    404: unknown;
};

export type RevokeApiKeyResponses = {
    /**
     * API key revoked successfully
     */
    200: ApiResponseString;
};

export type RevokeApiKeyResponse = RevokeApiKeyResponses[keyof RevokeApiKeyResponses];

export type GetLoginAttemptsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of entries to return
         */
        limit?: number;
    };
    url: '/api/v0/users/login-attempts';
};

export type GetLoginAttemptsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type GetLoginAttemptsResponses = {
    /**
     * Login attempts
     */
    200: ApiResponseVecLoginAttemptResponse;
};

export type GetLoginAttemptsResponse = GetLoginAttemptsResponses[keyof GetLoginAttemptsResponses];

export type GetLoginHistoryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of entries to return
         */
        limit?: number;
    };
    url: '/api/v0/users/login-history';
};

export type GetLoginHistoryErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type GetLoginHistoryResponses = {
    /**
     * Login history
     */
    200: ApiResponseVecLoginHistoryResponse;
};

export type GetLoginHistoryResponse = GetLoginHistoryResponses[keyof GetLoginHistoryResponses];

export type ChangePasswordData = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v0/users/password';
};

export type ChangePasswordErrors = {
    /**
     * Invalid current password
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
};

export type ChangePasswordResponses = {
    /**
     * Password changed successfully
     */
    200: ApiResponseString;
};

export type ChangePasswordResponse = ChangePasswordResponses[keyof ChangePasswordResponses];

export type GetProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v0/users/profile';
};

export type GetProfileErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type GetProfileResponses = {
    /**
     * User profile
     */
    200: ApiResponseUserProfileResponse;
};

export type GetProfileResponse = GetProfileResponses[keyof GetProfileResponses];

export type UpdateProfileData = {
    body: UpdateProfileRequest;
    path?: never;
    query?: never;
    url: '/api/v0/users/profile';
};

export type UpdateProfileErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type UpdateProfileResponses = {
    /**
     * Profile updated successfully
     */
    200: ApiResponseUserProfileResponse;
};

export type UpdateProfileResponse = UpdateProfileResponses[keyof UpdateProfileResponses];

export type ClientOptions = {
    baseUrl: 'https://api.blckbox.dev' | 'https://staging.api.blckbox.dev' | 'http://localhost:8080' | (string & {});
};